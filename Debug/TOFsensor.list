
TOFsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08008f2c  08008f2c  00009f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009058  08009058  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009058  08009058  0000a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009060  08009060  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009060  08009060  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009064  08009064  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009068  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  080090d0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080090d0  0000b2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b6c  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002356  00000000  00000000  0001dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001ff60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae3  00000000  00000000  00020d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b840  00000000  00000000  00021843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134cd  00000000  00000000  0004d083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010df18  00000000  00000000  00060550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004288  00000000  00000000  0016e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00172734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000068 	.word	0x20000068
 8000270:	00000000 	.word	0x00000000
 8000274:	08008f14 	.word	0x08008f14

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	2000006c 	.word	0x2000006c
 8000290:	08008f14 	.word	0x08008f14

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b9b0 	b.w	800060c <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	4688      	mov	r8, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	468e      	mov	lr, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14a      	bne.n	800036a <__udivmoddi4+0xa6>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d95f      	bls.n	800039a <__udivmoddi4+0xd6>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	b14e      	cbz	r6, 80002f4 <__udivmoddi4+0x30>
 80002e0:	f1c6 0320 	rsb	r3, r6, #32
 80002e4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	40b4      	lsls	r4, r6
 80002ec:	fa20 f303 	lsr.w	r3, r0, r3
 80002f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fbbe f1f8 	udiv	r1, lr, r8
 8000302:	fb08 ee11 	mls	lr, r8, r1, lr
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f101 30ff 	add.w	r0, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 8154 	bhi.w	80005c8 <__udivmoddi4+0x304>
 8000320:	4601      	mov	r1, r0
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	b2a2      	uxth	r2, r4
 8000326:	fbb3 f0f8 	udiv	r0, r3, r8
 800032a:	fb08 3310 	mls	r3, r8, r0, r3
 800032e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000336:	4594      	cmp	ip, r2
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x8e>
 800033a:	18ba      	adds	r2, r7, r2
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000340:	bf2c      	ite	cs
 8000342:	2401      	movcs	r4, #1
 8000344:	2400      	movcc	r4, #0
 8000346:	4594      	cmp	ip, r2
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x8c>
 800034a:	2c00      	cmp	r4, #0
 800034c:	f000 813f 	beq.w	80005ce <__udivmoddi4+0x30a>
 8000350:	4618      	mov	r0, r3
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	eba2 020c 	sub.w	r2, r2, ip
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa2>
 800035e:	40f2      	lsrs	r2, r6
 8000360:	2300      	movs	r3, #0
 8000362:	e9c5 2300 	strd	r2, r3, [r5]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xb6>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb0>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa2>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d14e      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000382:	4543      	cmp	r3, r8
 8000384:	f0c0 8112 	bcc.w	80005ac <__udivmoddi4+0x2e8>
 8000388:	4282      	cmp	r2, r0
 800038a:	f240 810f 	bls.w	80005ac <__udivmoddi4+0x2e8>
 800038e:	4608      	mov	r0, r1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e8      	beq.n	8000366 <__udivmoddi4+0xa2>
 8000394:	e9c5 4e00 	strd	r4, lr, [r5]
 8000398:	e7e5      	b.n	8000366 <__udivmoddi4+0xa2>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80ac 	beq.w	80004f8 <__udivmoddi4+0x234>
 80003a0:	fab2 f682 	clz	r6, r2
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	f040 80bb 	bne.w	8000520 <__udivmoddi4+0x25c>
 80003aa:	1a8b      	subs	r3, r1, r2
 80003ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b0:	b2bc      	uxth	r4, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0c02      	lsrs	r2, r0, #16
 80003b6:	b280      	uxth	r0, r0
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c4:	fb04 f20c 	mul.w	r2, r4, ip
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d90e      	bls.n	80003ea <__udivmoddi4+0x126>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	429a      	cmp	r2, r3
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80ec 	beq.w	80005c0 <__udivmoddi4+0x2fc>
 80003e8:	46c4      	mov	ip, r8
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f4:	fb04 f408 	mul.w	r4, r4, r8
 80003f8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x154>
 8000400:	18ba      	adds	r2, r7, r2
 8000402:	f108 33ff 	add.w	r3, r8, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	2001      	movcs	r0, #1
 800040a:	2000      	movcc	r0, #0
 800040c:	4294      	cmp	r4, r2
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x152>
 8000410:	2800      	cmp	r0, #0
 8000412:	f000 80d1 	beq.w	80005b8 <__udivmoddi4+0x2f4>
 8000416:	4698      	mov	r8, r3
 8000418:	1b12      	subs	r2, r2, r4
 800041a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa08 f401 	lsl.w	r4, r8, r1
 800042a:	fa00 f901 	lsl.w	r9, r0, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa28 f806 	lsr.w	r8, r8, r6
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f306 	lsr.w	r3, r0, r6
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fbb8 fef0 	udiv	lr, r8, r0
 800044c:	fb00 881e 	mls	r8, r0, lr, r8
 8000450:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000454:	fb0e f80c 	mul.w	r8, lr, ip
 8000458:	45a0      	cmp	r8, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b6>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a0      	cmp	r8, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b4>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 80b8 	beq.w	80005e8 <__udivmoddi4+0x324>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fa1f f883 	uxth.w	r8, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x1f0>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	bf2c      	ite	cs
 800049e:	f04f 0801 	movcs.w	r8, #1
 80004a2:	f04f 0800 	movcc.w	r8, #0
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d903      	bls.n	80004b2 <__udivmoddi4+0x1ee>
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	f000 809f 	beq.w	80005f0 <__udivmoddi4+0x32c>
 80004b2:	4603      	mov	r3, r0
 80004b4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b8:	eba4 040c 	sub.w	r4, r4, ip
 80004bc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c0:	4564      	cmp	r4, ip
 80004c2:	4673      	mov	r3, lr
 80004c4:	46e0      	mov	r8, ip
 80004c6:	d302      	bcc.n	80004ce <__udivmoddi4+0x20a>
 80004c8:	d107      	bne.n	80004da <__udivmoddi4+0x216>
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d205      	bcs.n	80004da <__udivmoddi4+0x216>
 80004ce:	ebbe 0302 	subs.w	r3, lr, r2
 80004d2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	46e0      	mov	r8, ip
 80004da:	b15d      	cbz	r5, 80004f4 <__udivmoddi4+0x230>
 80004dc:	ebb9 0203 	subs.w	r2, r9, r3
 80004e0:	eb64 0408 	sbc.w	r4, r4, r8
 80004e4:	fa04 f606 	lsl.w	r6, r4, r6
 80004e8:	fa22 f301 	lsr.w	r3, r2, r1
 80004ec:	40cc      	lsrs	r4, r1
 80004ee:	431e      	orrs	r6, r3
 80004f0:	e9c5 6400 	strd	r6, r4, [r5]
 80004f4:	2100      	movs	r1, #0
 80004f6:	e736      	b.n	8000366 <__udivmoddi4+0xa2>
 80004f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	4614      	mov	r4, r2
 8000500:	b280      	uxth	r0, r0
 8000502:	4696      	mov	lr, r2
 8000504:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000508:	2620      	movs	r6, #32
 800050a:	4690      	mov	r8, r2
 800050c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000510:	4610      	mov	r0, r2
 8000512:	fbb1 f1f2 	udiv	r1, r1, r2
 8000516:	eba3 0308 	sub.w	r3, r3, r8
 800051a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051e:	e74b      	b.n	80003b8 <__udivmoddi4+0xf4>
 8000520:	40b7      	lsls	r7, r6
 8000522:	f1c6 0320 	rsb	r3, r6, #32
 8000526:	fa01 f206 	lsl.w	r2, r1, r6
 800052a:	fa21 f803 	lsr.w	r8, r1, r3
 800052e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000532:	fa20 f303 	lsr.w	r3, r0, r3
 8000536:	b2bc      	uxth	r4, r7
 8000538:	40b0      	lsls	r0, r6
 800053a:	4313      	orrs	r3, r2
 800053c:	0c02      	lsrs	r2, r0, #16
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	b280      	uxth	r0, r0
 8000542:	fbb8 f9fe 	udiv	r9, r8, lr
 8000546:	fb0e 8819 	mls	r8, lr, r9, r8
 800054a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	4588      	cmp	r8, r1
 8000554:	d951      	bls.n	80005fa <__udivmoddi4+0x336>
 8000556:	1879      	adds	r1, r7, r1
 8000558:	f109 3cff 	add.w	ip, r9, #4294967295
 800055c:	bf2c      	ite	cs
 800055e:	f04f 0a01 	movcs.w	sl, #1
 8000562:	f04f 0a00 	movcc.w	sl, #0
 8000566:	4588      	cmp	r8, r1
 8000568:	d902      	bls.n	8000570 <__udivmoddi4+0x2ac>
 800056a:	f1ba 0f00 	cmp.w	sl, #0
 800056e:	d031      	beq.n	80005d4 <__udivmoddi4+0x310>
 8000570:	eba1 0108 	sub.w	r1, r1, r8
 8000574:	fbb1 f9fe 	udiv	r9, r1, lr
 8000578:	fb09 f804 	mul.w	r8, r9, r4
 800057c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000580:	b29b      	uxth	r3, r3
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	4543      	cmp	r3, r8
 8000588:	d235      	bcs.n	80005f6 <__udivmoddi4+0x332>
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000590:	bf2c      	ite	cs
 8000592:	f04f 0a01 	movcs.w	sl, #1
 8000596:	f04f 0a00 	movcc.w	sl, #0
 800059a:	4543      	cmp	r3, r8
 800059c:	d2bb      	bcs.n	8000516 <__udivmoddi4+0x252>
 800059e:	f1ba 0f00 	cmp.w	sl, #0
 80005a2:	d1b8      	bne.n	8000516 <__udivmoddi4+0x252>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e7b4      	b.n	8000516 <__udivmoddi4+0x252>
 80005ac:	1a84      	subs	r4, r0, r2
 80005ae:	eb68 0203 	sbc.w	r2, r8, r3
 80005b2:	2001      	movs	r0, #1
 80005b4:	4696      	mov	lr, r2
 80005b6:	e6eb      	b.n	8000390 <__udivmoddi4+0xcc>
 80005b8:	443a      	add	r2, r7
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	e72b      	b.n	8000418 <__udivmoddi4+0x154>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e710      	b.n	80003ea <__udivmoddi4+0x126>
 80005c8:	3902      	subs	r1, #2
 80005ca:	443b      	add	r3, r7
 80005cc:	e6a9      	b.n	8000322 <__udivmoddi4+0x5e>
 80005ce:	443a      	add	r2, r7
 80005d0:	3802      	subs	r0, #2
 80005d2:	e6be      	b.n	8000352 <__udivmoddi4+0x8e>
 80005d4:	eba7 0808 	sub.w	r8, r7, r8
 80005d8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005dc:	4441      	add	r1, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c9      	b.n	800057c <__udivmoddi4+0x2b8>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e744      	b.n	800047a <__udivmoddi4+0x1b6>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	e75e      	b.n	80004b4 <__udivmoddi4+0x1f0>
 80005f6:	4649      	mov	r1, r9
 80005f8:	e78d      	b.n	8000516 <__udivmoddi4+0x252>
 80005fa:	eba1 0108 	sub.w	r1, r1, r8
 80005fe:	46cc      	mov	ip, r9
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7b8      	b.n	800057c <__udivmoddi4+0x2b8>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fd25 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f83f 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f929 	bl	8000874 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000622:	f000 f89b 	bl	800075c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f8d9 	bl	80007dc <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	       uint8_t status;
  	       uint8_t cmd;

  	       cmd = (1 << 4);
 800062a:	2310      	movs	r3, #16
 800062c:	717b      	strb	r3, [r7, #5]
  	       HAL_I2C_Master_Transmit(&hi2c1, TCA9548A_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800062e:	1d7a      	adds	r2, r7, #5
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	21e0      	movs	r1, #224	@ 0xe0
 800063a:	4814      	ldr	r0, [pc, #80]	@ (800068c <main+0x7c>)
 800063c:	f001 fa24 	bl	8001a88 <HAL_I2C_Master_Transmit>
  	       // Test of het sensoradres antwoordt
  	       status = HAL_I2C_IsDeviceReady(&hi2c1, VL6180X_ADDR, 3, 100);
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2203      	movs	r2, #3
 8000644:	2152      	movs	r1, #82	@ 0x52
 8000646:	4811      	ldr	r0, [pc, #68]	@ (800068c <main+0x7c>)
 8000648:	f001 fd40 	bl	80020cc <HAL_I2C_IsDeviceReady>
 800064c:	4603      	mov	r3, r0
 800064e:	71fb      	strb	r3, [r7, #7]

  	       if(status == HAL_OK)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <main+0x4e>
  	           printf("Sensor aanwezig op kanaal 4!\r\n");
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <main+0x80>)
 8000658:	f007 fde8 	bl	800822c <puts>
 800065c:	e002      	b.n	8000664 <main+0x54>
  	       else
  	           printf("Sensor NIET gevonden op kanaal 4!\r\n");
 800065e:	480d      	ldr	r0, [pc, #52]	@ (8000694 <main+0x84>)
 8000660:	f007 fde4 	bl	800822c <puts>

  TCA9548A_SelectChannel(4);    // Selecteer kanaal 4
 8000664:	2004      	movs	r0, #4
 8000666:	f000 f941 	bl	80008ec <TCA9548A_SelectChannel>
  HAL_Delay(10);
 800066a:	200a      	movs	r0, #10
 800066c:	f000 fdb8 	bl	80011e0 <HAL_Delay>
  VL6180X_SimpleInit();
 8000670:	f000 f99c 	bl	80009ac <VL6180X_SimpleInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      uint8_t afstand = VL6180X_ReadRange();
 8000674:	f000 fa4a 	bl	8000b0c <VL6180X_ReadRange>
 8000678:	4603      	mov	r3, r0
 800067a:	71bb      	strb	r3, [r7, #6]
      printf("Afstand: %d mm\r\n", afstand);
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <main+0x88>)
 8000682:	f007 fd6b 	bl	800815c <iprintf>
  {
 8000686:	bf00      	nop
 8000688:	e7f4      	b.n	8000674 <main+0x64>
 800068a:	bf00      	nop
 800068c:	20000084 	.word	0x20000084
 8000690:	08008f2c 	.word	0x08008f2c
 8000694:	08008f4c 	.word	0x08008f4c
 8000698:	08008f70 	.word	0x08008f70

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	@ 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2250      	movs	r2, #80	@ 0x50
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fe9e 	bl	80083ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <SystemClock_Config+0xb8>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	4a23      	ldr	r2, [pc, #140]	@ (8000754 <SystemClock_Config+0xb8>)
 80006c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006cc:	6113      	str	r3, [r2, #16]
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <SystemClock_Config+0xb8>)
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006da:	bf00      	nop
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemClock_Config+0xb8>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	d1f9      	bne.n	80006dc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006f0:	2308      	movs	r3, #8
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2340      	movs	r3, #64	@ 0x40
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f943 	bl	800298c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800070c:	f000 fa40 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	231f      	movs	r3, #31
 8000712:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fd64 	bl	80031fc <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073a:	f000 fa29 	bl	8000b90 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <SystemClock_Config+0xbc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <SystemClock_Config+0xbc>)
 8000744:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000748:	6013      	str	r3, [r2, #0]
}
 800074a:	bf00      	nop
 800074c:	3770      	adds	r7, #112	@ 0x70
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	44020800 	.word	0x44020800
 8000758:	40022000 	.word	0x40022000

0800075c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b1b      	ldr	r3, [pc, #108]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	@ (80007d4 <MX_I2C1_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <MX_I2C1_Init+0x7c>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000774:	2201      	movs	r2, #1
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_I2C1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000796:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <MX_I2C1_Init+0x74>)
 8000798:	f001 f8da 	bl	8001950 <HAL_I2C_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007a2:	f000 f9f5 	bl	8000b90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <MX_I2C1_Init+0x74>)
 80007aa:	f002 f857 	bl	800285c <HAL_I2CEx_ConfigAnalogFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f000 f9ec 	bl	8000b90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_I2C1_Init+0x74>)
 80007bc:	f002 f899 	bl	80028f2 <HAL_I2CEx_ConfigDigitalFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 f9e3 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000084 	.word	0x20000084
 80007d4:	40005400 	.word	0x40005400
 80007d8:	00707cbb 	.word	0x00707cbb

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007e2:	4a23      	ldr	r2, [pc, #140]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000826:	f006 faaf 	bl	8006d88 <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f9ae 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	480d      	ldr	r0, [pc, #52]	@ (800086c <MX_USART2_UART_Init+0x90>)
 8000838:	f007 fb03 	bl	8007e42 <HAL_UARTEx_SetTxFifoThreshold>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f9a5 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800084a:	f007 fb38 	bl	8007ebe <HAL_UARTEx_SetRxFifoThreshold>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f99c 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_USART2_UART_Init+0x90>)
 800085a:	f007 fab9 	bl	8007dd0 <HAL_UARTEx_DisableFifoMode>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f994 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000d8 	.word	0x200000d8
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_GPIO_Init+0x50>)
 800087c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000880:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <MX_GPIO_Init+0x50>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_GPIO_Init+0x50>)
 800088c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_GPIO_Init+0x50>)
 800089a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <MX_GPIO_Init+0x50>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_GPIO_Init+0x50>)
 80008aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	44020c00 	.word	0x44020c00

080008c8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80008d0:	1d39      	adds	r1, r7, #4
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	2201      	movs	r2, #1
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <__io_putchar+0x20>)
 80008da:	f006 faa5 	bl	8006e28 <HAL_UART_Transmit>
  	return ch;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000d8 	.word	0x200000d8

080008ec <TCA9548A_SelectChannel>:

void TCA9548A_SelectChannel(uint8_t channel)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
		       uint8_t status;
		       uint8_t cmd;
    if (channel > 7) return;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d80c      	bhi.n	8000916 <TCA9548A_SelectChannel+0x2a>
//    uint8_t cmd = (1 << channel);
//    HAL_I2C_Master_Transmit(&hi2c1, TCA9548A_ADDR, &cmd, 1, HAL_MAX_DELAY);
    cmd = (1 << 4);
 80008fc:	2310      	movs	r3, #16
 80008fe:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, TCA9548A_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000900:	f107 020f 	add.w	r2, r7, #15
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	21e0      	movs	r1, #224	@ 0xe0
 800090e:	4804      	ldr	r0, [pc, #16]	@ (8000920 <TCA9548A_SelectChannel+0x34>)
 8000910:	f001 f8ba 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8000914:	e000      	b.n	8000918 <TCA9548A_SelectChannel+0x2c>
    if (channel > 7) return;
 8000916:	bf00      	nop
}
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000084 	.word	0x20000084

08000924 <VL6180X_WriteReg>:

// VL6180X register schrijven (16-bit registeradres)
void VL6180X_WriteReg(uint16_t reg, uint8_t val)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af04      	add	r7, sp, #16
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	4613      	mov	r3, r2
 8000932:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, VL6180X_ADDR, reg, I2C_MEMADD_SIZE_16BIT, &val, 1, HAL_MAX_DELAY);
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	2301      	movs	r3, #1
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	1d7b      	adds	r3, r7, #5
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2302      	movs	r3, #2
 8000946:	2152      	movs	r1, #82	@ 0x52
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <VL6180X_WriteReg+0x34>)
 800094a:	f001 f991 	bl	8001c70 <HAL_I2C_Mem_Write>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000084 	.word	0x20000084

0800095c <VL6180X_ReadReg>:

// VL6180X register lezen (16-bit registeradres)
uint8_t VL6180X_ReadReg(uint16_t reg)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af04      	add	r7, sp, #16
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
    uint8_t val;
    HAL_StatusTypeDef status;

        status = HAL_I2C_Mem_Read(&hi2c1, VL6180X_ADDR, reg, I2C_MEMADD_SIZE_16BIT, &val, 1, HAL_MAX_DELAY);
 8000966:	88fa      	ldrh	r2, [r7, #6]
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	9302      	str	r3, [sp, #8]
 800096e:	2301      	movs	r3, #1
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	f107 030e 	add.w	r3, r7, #14
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2302      	movs	r3, #2
 800097a:	2152      	movs	r1, #82	@ 0x52
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <VL6180X_ReadReg+0x48>)
 800097e:	f001 fa8b 	bl	8001e98 <HAL_I2C_Mem_Read>
 8000982:	4603      	mov	r3, r0
 8000984:	73fb      	strb	r3, [r7, #15]


    if (status != HAL_OK) {
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d005      	beq.n	8000998 <VL6180X_ReadReg+0x3c>
        printf("FOUT: Leesfout bij reg 0x%04X, status = %d\r\n", reg, status);
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <VL6180X_ReadReg+0x4c>)
 8000994:	f007 fbe2 	bl	800815c <iprintf>
    }

//    printf("FOUT: Leesfout bij reg 0x%04X, status = %d\r\n", reg, status);


    return val;
 8000998:	7bbb      	ldrb	r3, [r7, #14]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000084 	.word	0x20000084
 80009a8:	08008f84 	.word	0x08008f84

080009ac <VL6180X_SimpleInit>:

void VL6180X_SimpleInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    // Reset settings (optioneel, kan overslagen worden)
    VL6180X_WriteReg(0x0207, 0x01);
 80009b0:	2101      	movs	r1, #1
 80009b2:	f240 2007 	movw	r0, #519	@ 0x207
 80009b6:	f7ff ffb5 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0208, 0x01);
 80009ba:	2101      	movs	r1, #1
 80009bc:	f44f 7002 	mov.w	r0, #520	@ 0x208
 80009c0:	f7ff ffb0 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0096, 0x00);
 80009c4:	2100      	movs	r1, #0
 80009c6:	2096      	movs	r0, #150	@ 0x96
 80009c8:	f7ff ffac 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0097, 0xfd);
 80009cc:	21fd      	movs	r1, #253	@ 0xfd
 80009ce:	2097      	movs	r0, #151	@ 0x97
 80009d0:	f7ff ffa8 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e3, 0x00);
 80009d4:	2100      	movs	r1, #0
 80009d6:	20e3      	movs	r0, #227	@ 0xe3
 80009d8:	f7ff ffa4 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e4, 0x04);
 80009dc:	2104      	movs	r1, #4
 80009de:	20e4      	movs	r0, #228	@ 0xe4
 80009e0:	f7ff ffa0 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e5, 0x02);
 80009e4:	2102      	movs	r1, #2
 80009e6:	20e5      	movs	r0, #229	@ 0xe5
 80009e8:	f7ff ff9c 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e6, 0x01);
 80009ec:	2101      	movs	r1, #1
 80009ee:	20e6      	movs	r0, #230	@ 0xe6
 80009f0:	f7ff ff98 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e7, 0x03);
 80009f4:	2103      	movs	r1, #3
 80009f6:	20e7      	movs	r0, #231	@ 0xe7
 80009f8:	f7ff ff94 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00f5, 0x02);
 80009fc:	2102      	movs	r1, #2
 80009fe:	20f5      	movs	r0, #245	@ 0xf5
 8000a00:	f7ff ff90 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00d9, 0x05);
 8000a04:	2105      	movs	r1, #5
 8000a06:	20d9      	movs	r0, #217	@ 0xd9
 8000a08:	f7ff ff8c 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00db, 0xce);
 8000a0c:	21ce      	movs	r1, #206	@ 0xce
 8000a0e:	20db      	movs	r0, #219	@ 0xdb
 8000a10:	f7ff ff88 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00dc, 0x03);
 8000a14:	2103      	movs	r1, #3
 8000a16:	20dc      	movs	r0, #220	@ 0xdc
 8000a18:	f7ff ff84 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00dd, 0xf8);
 8000a1c:	21f8      	movs	r1, #248	@ 0xf8
 8000a1e:	20dd      	movs	r0, #221	@ 0xdd
 8000a20:	f7ff ff80 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x009f, 0x00);
 8000a24:	2100      	movs	r1, #0
 8000a26:	209f      	movs	r0, #159	@ 0x9f
 8000a28:	f7ff ff7c 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00a3, 0x3c);
 8000a2c:	213c      	movs	r1, #60	@ 0x3c
 8000a2e:	20a3      	movs	r0, #163	@ 0xa3
 8000a30:	f7ff ff78 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00b7, 0x00);
 8000a34:	2100      	movs	r1, #0
 8000a36:	20b7      	movs	r0, #183	@ 0xb7
 8000a38:	f7ff ff74 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00bb, 0x3c);
 8000a3c:	213c      	movs	r1, #60	@ 0x3c
 8000a3e:	20bb      	movs	r0, #187	@ 0xbb
 8000a40:	f7ff ff70 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00b2, 0x09);
 8000a44:	2109      	movs	r1, #9
 8000a46:	20b2      	movs	r0, #178	@ 0xb2
 8000a48:	f7ff ff6c 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ca, 0x09);
 8000a4c:	2109      	movs	r1, #9
 8000a4e:	20ca      	movs	r0, #202	@ 0xca
 8000a50:	f7ff ff68 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0198, 0x01);
 8000a54:	2101      	movs	r1, #1
 8000a56:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 8000a5a:	f7ff ff63 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01b0, 0x17);
 8000a5e:	2117      	movs	r1, #23
 8000a60:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 8000a64:	f7ff ff5e 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01ad, 0x00);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f240 10ad 	movw	r0, #429	@ 0x1ad
 8000a6e:	f7ff ff59 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ff, 0x05);
 8000a72:	2105      	movs	r1, #5
 8000a74:	20ff      	movs	r0, #255	@ 0xff
 8000a76:	f7ff ff55 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0100, 0x05);
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a80:	f7ff ff50 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ff, 0x00);
 8000a84:	2100      	movs	r1, #0
 8000a86:	20ff      	movs	r0, #255	@ 0xff
 8000a88:	f7ff ff4c 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x010a, 0x30);
 8000a8c:	2130      	movs	r1, #48	@ 0x30
 8000a8e:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8000a92:	f7ff ff47 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x003f, 0x46);
 8000a96:	2146      	movs	r1, #70	@ 0x46
 8000a98:	203f      	movs	r0, #63	@ 0x3f
 8000a9a:	f7ff ff43 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e3, 0xff);
 8000a9e:	21ff      	movs	r1, #255	@ 0xff
 8000aa0:	f240 10e3 	movw	r0, #483	@ 0x1e3
 8000aa4:	f7ff ff3e 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e4, 0x01);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	f44f 70f2 	mov.w	r0, #484	@ 0x1e4
 8000aae:	f7ff ff39 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e5, 0x00);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f240 10e5 	movw	r0, #485	@ 0x1e5
 8000ab8:	f7ff ff34 	bl	8000924 <VL6180X_WriteReg>

    // Recommended : Public registers - See data sheet for more detail
    VL6180X_WriteReg(0x0011, 0x10); // Enables polling for 'New Sample ready'
 8000abc:	2110      	movs	r1, #16
 8000abe:	2011      	movs	r0, #17
 8000ac0:	f7ff ff30 	bl	8000924 <VL6180X_WriteReg>
                          // when measurement completes
    VL6180X_WriteReg(0x010a, 0x30); // Set the averaging sample period
 8000ac4:	2130      	movs	r1, #48	@ 0x30
 8000ac6:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8000aca:	f7ff ff2b 	bl	8000924 <VL6180X_WriteReg>
                          // (compromise between lower noise and
                          // increased execution time)
    VL6180X_WriteReg(0x003f, 0x46); // Sets the light and dark gain (upper
 8000ace:	2146      	movs	r1, #70	@ 0x46
 8000ad0:	203f      	movs	r0, #63	@ 0x3f
 8000ad2:	f7ff ff27 	bl	8000924 <VL6180X_WriteReg>
                          // nibble). Dark gain should not be
                          // changed.
    VL6180X_WriteReg(0x0031, 0xFF); // sets the # of range measurements after
 8000ad6:	21ff      	movs	r1, #255	@ 0xff
 8000ad8:	2031      	movs	r0, #49	@ 0x31
 8000ada:	f7ff ff23 	bl	8000924 <VL6180X_WriteReg>
                          // which auto calibration of system is
                          // performed
    VL6180X_WriteReg(0x0041, 0x63); // Set ALS integration time to 100ms
 8000ade:	2163      	movs	r1, #99	@ 0x63
 8000ae0:	2041      	movs	r0, #65	@ 0x41
 8000ae2:	f7ff ff1f 	bl	8000924 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x002e, 0x01); // perform a single temperature calibration
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	202e      	movs	r0, #46	@ 0x2e
 8000aea:	f7ff ff1b 	bl	8000924 <VL6180X_WriteReg>
                          // of the ranging sensor

    // Optional: Public registers - See data sheet for more detail
    VL6180X_WriteReg(0x001b,
 8000aee:	2109      	movs	r1, #9
 8000af0:	201b      	movs	r0, #27
 8000af2:	f7ff ff17 	bl	8000924 <VL6180X_WriteReg>
           0x09);         // Set default ranging inter-measurement
                          // period to 100ms
    VL6180X_WriteReg(0x003e, 0x31); // Set default ALS inter-measurement period
 8000af6:	2131      	movs	r1, #49	@ 0x31
 8000af8:	203e      	movs	r0, #62	@ 0x3e
 8000afa:	f7ff ff13 	bl	8000924 <VL6180X_WriteReg>
                          // to 500ms
    VL6180X_WriteReg(0x0014, 0x24); // Configures interrupt on 'New Sample
 8000afe:	2124      	movs	r1, #36	@ 0x24
 8000b00:	2014      	movs	r0, #20
 8000b02:	f7ff ff0f 	bl	8000924 <VL6180X_WriteReg>
                          // Ready threshold event'
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <VL6180X_ReadRange>:

uint8_t VL6180X_ReadRange(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
    // Stap 1: Start de range meting
    VL6180X_WriteReg(0x0018, 0x01);  // SYSRANGE__START
 8000b12:	2101      	movs	r1, #1
 8000b14:	2018      	movs	r0, #24
 8000b16:	f7ff ff05 	bl	8000924 <VL6180X_WriteReg>

    // Stap 2: Wacht tot meting klaar is
    uint8_t status;
    uint32_t timeout = 1000;
 8000b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1e:	607b      	str	r3, [r7, #4]
    do {
        status = VL6180X_ReadReg(0x004F);  // RESULT__INTERRUPT_STATUS_GPIO
 8000b20:	204f      	movs	r0, #79	@ 0x4f
 8000b22:	f7ff ff1b 	bl	800095c <VL6180X_ReadReg>
 8000b26:	4603      	mov	r3, r0
 8000b28:	70fb      	strb	r3, [r7, #3]
        HAL_Delay(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 fb58 	bl	80011e0 <HAL_Delay>
        timeout--;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	607b      	str	r3, [r7, #4]
        if (timeout == 0) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d104      	bne.n	8000b46 <VL6180X_ReadRange+0x3a>
            printf("Timeout tijdens meting\r\n");
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <VL6180X_ReadRange+0x7c>)
 8000b3e:	f007 fb75 	bl	800822c <puts>
            return 255;
 8000b42:	23ff      	movs	r3, #255	@ 0xff
 8000b44:	e01b      	b.n	8000b7e <VL6180X_ReadRange+0x72>
        }
    } while ((status & 0x07) != 0x04);
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d1e7      	bne.n	8000b20 <VL6180X_ReadRange+0x14>

    // Stap 3: Lees afstand
    uint8_t range = VL6180X_ReadReg(0x0062);  // RESULT__RANGE_VAL
 8000b50:	2062      	movs	r0, #98	@ 0x62
 8000b52:	f7ff ff03 	bl	800095c <VL6180X_ReadReg>
 8000b56:	4603      	mov	r3, r0
 8000b58:	70bb      	strb	r3, [r7, #2]

    // Stap 4: Reset interrupt (anders blijven metingen hangen)
    VL6180X_WriteReg(0x0015, 0x07);  // SYSTEM__INTERRUPT_CLEAR
 8000b5a:	2107      	movs	r1, #7
 8000b5c:	2015      	movs	r0, #21
 8000b5e:	f7ff fee1 	bl	8000924 <VL6180X_WriteReg>

    // Stap 5: Check foutstatus
    uint8_t rangeStatus = VL6180X_ReadReg(0x0063);  // RESULT__RANGE_STATUS
 8000b62:	2063      	movs	r0, #99	@ 0x63
 8000b64:	f7ff fefa 	bl	800095c <VL6180X_ReadReg>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	707b      	strb	r3, [r7, #1]
    if (rangeStatus != 0x00) {
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d004      	beq.n	8000b7c <VL6180X_ReadRange+0x70>
        printf("Foutstatus: 0x%02X\r\n", rangeStatus);
 8000b72:	787b      	ldrb	r3, [r7, #1]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <VL6180X_ReadRange+0x80>)
 8000b78:	f007 faf0 	bl	800815c <iprintf>
    }

    return range;
 8000b7c:	78bb      	ldrb	r3, [r7, #2]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	08008fb4 	.word	0x08008fb4
 8000b8c:	08008fcc 	.word	0x08008fcc

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0be      	sub	sp, #248	@ 0xf8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	22d0      	movs	r2, #208	@ 0xd0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 fc0d 	bl	80083ec <memset>
  if(hi2c->Instance==I2C1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a26      	ldr	r2, [pc, #152]	@ (8000c70 <HAL_I2C_MspInit+0xc4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d145      	bne.n	8000c68 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 fe44 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000bfe:	f7ff ffc7 	bl	8000b90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c20:	23c0      	movs	r3, #192	@ 0xc0
 8000c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <HAL_I2C_MspInit+0xcc>)
 8000c46:	f000 fd25 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c50:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c56:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c68:	bf00      	nop
 8000c6a:	37f8      	adds	r7, #248	@ 0xf8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40005400 	.word	0x40005400
 8000c74:	44020c00 	.word	0x44020c00
 8000c78:	42020400 	.word	0x42020400

08000c7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0be      	sub	sp, #248	@ 0xf8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	22d0      	movs	r2, #208	@ 0xd0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f007 fba5 	bl	80083ec <memset>
  if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d50 <HAL_UART_MspInit+0xd4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d14c      	bne.n	8000d46 <HAL_UART_MspInit+0xca>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	f04f 0202 	mov.w	r2, #2
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fddd 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000ccc:	f7ff ff60 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cdc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_UART_MspInit+0xd8>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <HAL_UART_MspInit+0xdc>)
 8000d32:	f000 fcaf 	bl	8001694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	203b      	movs	r0, #59	@ 0x3b
 8000d3c:	f000 fb2c 	bl	8001398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d40:	203b      	movs	r0, #59	@ 0x3b
 8000d42:	f000 fb43 	bl	80013cc <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d46:	bf00      	nop
 8000d48:	37f8      	adds	r7, #248	@ 0xf8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	44020c00 	.word	0x44020c00
 8000d58:	42020000 	.word	0x42020000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f9f5 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <USART2_IRQHandler+0x10>)
 8000dc2:	f006 f8cf 	bl	8006f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000d8 	.word	0x200000d8

08000dd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e00a      	b.n	8000df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de2:	f3af 8000 	nop.w
 8000de6:	4601      	mov	r1, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	b2ca      	uxtb	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf0      	blt.n	8000de2 <_read+0x12>
  }

  return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e009      	b.n	8000e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fd4f 	bl	80008c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dbf1      	blt.n	8000e1c <_write+0x12>
  }
  return len;
 8000e38:	687b      	ldr	r3, [r7, #4]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_close>:

int _close(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_isatty>:

int _isatty(int file)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f007 fad4 	bl	8008488 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20044000 	.word	0x20044000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	2000016c 	.word	0x2000016c
 8000f14:	200002c0 	.word	0x200002c0

08000f18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f1e:	4b35      	ldr	r3, [pc, #212]	@ (8000ff4 <SystemInit+0xdc>)
 8000f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f24:	4a33      	ldr	r2, [pc, #204]	@ (8000ff4 <SystemInit+0xdc>)
 8000f26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <SystemInit+0xe0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f34:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <SystemInit+0xe0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <SystemInit+0xe0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000f40:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <SystemInit+0xe0>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	492c      	ldr	r1, [pc, #176]	@ (8000ff8 <SystemInit+0xe0>)
 8000f46:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <SystemInit+0xe4>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <SystemInit+0xe0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <SystemInit+0xe0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <SystemInit+0xe0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <SystemInit+0xe0>)
 8000f60:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <SystemInit+0xe8>)
 8000f62:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <SystemInit+0xe0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <SystemInit+0xe0>)
 8000f6c:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <SystemInit+0xe8>)
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <SystemInit+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <SystemInit+0xe0>)
 8000f78:	4a21      	ldr	r2, [pc, #132]	@ (8001000 <SystemInit+0xe8>)
 8000f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <SystemInit+0xe0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <SystemInit+0xe0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff8 <SystemInit+0xe0>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <SystemInit+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <SystemInit+0xdc>)
 8000f96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f9a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <SystemInit+0xec>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000fa4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000fac:	d003      	beq.n	8000fb6 <SystemInit+0x9e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000fb4:	d117      	bne.n	8000fe6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <SystemInit+0xec>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <SystemInit+0xec>)
 8000fc4:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <SystemInit+0xf0>)
 8000fc6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <SystemInit+0xec>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <SystemInit+0xf4>)
 8000fcc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <SystemInit+0xec>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001004 <SystemInit+0xec>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <SystemInit+0xec>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <SystemInit+0xec>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	61d3      	str	r3, [r2, #28]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	44020c00 	.word	0x44020c00
 8000ffc:	eae2eae3 	.word	0xeae2eae3
 8001000:	01010280 	.word	0x01010280
 8001004:	40022000 	.word	0x40022000
 8001008:	08192a3b 	.word	0x08192a3b
 800100c:	4c5d6e7f 	.word	0x4c5d6e7f

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f7ff ff80 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800103e:	f007 fa29 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff fae5 	bl	8000610 <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001054:	08009068 	.word	0x08009068
  ldr r2, =_sbss
 8001058:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800105c:	200002c0 	.word	0x200002c0

08001060 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_IRQHandler>
	...

08001064 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f98a 	bl	8001382 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800106e:	f002 fa7d 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8001072:	4602      	mov	r2, r0
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_Init+0x44>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	490b      	ldr	r1, [pc, #44]	@ (80010ac <HAL_Init+0x48>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <HAL_Init+0x4c>)
 8001086:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001088:	2004      	movs	r0, #4
 800108a:	f000 f9cf 	bl	800142c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108e:	200f      	movs	r0, #15
 8001090:	f000 f810 	bl	80010b4 <HAL_InitTick>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e002      	b.n	80010a4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800109e:	f7ff fd7d 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	44020c00 	.word	0x44020c00
 80010ac:	08008fe4 	.word	0x08008fe4
 80010b0:	20000000 	.word	0x20000000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_InitTick+0xdc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e05c      	b.n	8001186 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80010cc:	4b31      	ldr	r3, [pc, #196]	@ (8001194 <HAL_InitTick+0xe0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d10c      	bne.n	80010f2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <HAL_InitTick+0xe4>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <HAL_InitTick+0xdc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e037      	b.n	8001162 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80010f2:	f000 f9f3 	bl	80014dc <HAL_SYSTICK_GetCLKSourceConfig>
 80010f6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d023      	beq.n	8001146 <HAL_InitTick+0x92>
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d82d      	bhi.n	8001160 <HAL_InitTick+0xac>
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_InitTick+0x5e>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d00d      	beq.n	800112c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001110:	e026      	b.n	8001160 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_InitTick+0xe4>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_InitTick+0xdc>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001120:	fbb3 f3f1 	udiv	r3, r3, r1
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	60fb      	str	r3, [r7, #12]
        break;
 800112a:	e01a      	b.n	8001162 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_InitTick+0xdc>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f2 	udiv	r3, r3, r2
 800113a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	60fb      	str	r3, [r7, #12]
        break;
 8001144:	e00d      	b.n	8001162 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0xdc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001150:	fbb3 f3f2 	udiv	r3, r3, r2
 8001154:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001158:	fbb2 f3f3 	udiv	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
        break;
 800115e:	e000      	b.n	8001162 <HAL_InitTick+0xae>
        break;
 8001160:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f940 	bl	80013e8 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e009      	b.n	8001186 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	f000 f90d 	bl	8001398 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_InitTick+0xe8>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	e000e010 	.word	0xe000e010
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000170 	.word	0x20000170

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000170 	.word	0x20000170

080011e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f7ff ffee 	bl	80011c8 <HAL_GetTick>
 80011ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f8:	d005      	beq.n	8001206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_Delay+0x44>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001206:	bf00      	nop
 8001208:	f7ff ffde 	bl	80011c8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	429a      	cmp	r2, r3
 8001216:	d8f7      	bhi.n	8001208 <HAL_Delay+0x28>
  {
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	@ (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ff4c 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff63 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ffb3 	bl	800131c <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff82 	bl	80012c8 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff56 	bl	800128c <__NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f8:	d301      	bcc.n	80013fe <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00d      	b.n	800141a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <HAL_SYSTICK_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_SYSTICK_Config+0x40>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_SYSTICK_Config+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <HAL_SYSTICK_Config+0x40>)
 8001412:	f043 0303 	orr.w	r3, r3, #3
 8001416:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b04      	cmp	r3, #4
 8001438:	d844      	bhi.n	80014c4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800143a:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	08001463 	.word	0x08001463
 8001444:	08001481 	.word	0x08001481
 8001448:	080014a3 	.word	0x080014a3
 800144c:	080014c5 	.word	0x080014c5
 8001450:	08001455 	.word	0x08001455
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6013      	str	r3, [r2, #0]
      break;
 8001460:	e031      	b.n	80014c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001474:	4a18      	ldr	r2, [pc, #96]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001476:	f023 030c 	bic.w	r3, r3, #12
 800147a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800147e:	e022      	b.n	80014c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a13      	ldr	r2, [pc, #76]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001486:	f023 0304 	bic.w	r3, r3, #4
 800148a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800148e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001492:	f023 030c 	bic.w	r3, r3, #12
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014a0:	e011      	b.n	80014c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014b4:	f023 030c 	bic.w	r3, r3, #12
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014c2:	e000      	b.n	80014c6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80014c4:	bf00      	nop
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010
 80014d8:	44020c00 	.word	0x44020c00

080014dc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80014ee:	2304      	movs	r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	e01e      	b.n	8001532 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80014f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b08      	cmp	r3, #8
 8001504:	d00f      	beq.n	8001526 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d80f      	bhi.n	800152c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d003      	beq.n	8001520 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001518:	e008      	b.n	800152c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
        break;
 800151e:	e008      	b.n	8001532 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001520:	2301      	movs	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
        break;
 8001524:	e005      	b.n	8001532 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001526:	2302      	movs	r3, #2
 8001528:	607b      	str	r3, [r7, #4]
        break;
 800152a:	e002      	b.n	8001532 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
        break;
 8001530:	bf00      	nop
    }
  }
  return systick_source;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e010 	.word	0xe000e010
 8001544:	44020c00 	.word	0x44020c00

08001548 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001550:	f7ff fe3a 	bl	80011c8 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e06b      	b.n	8001638 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d008      	beq.n	800157e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e05c      	b.n	8001638 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0204 	orr.w	r2, r2, #4
 800158c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001596:	e020      	b.n	80015da <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001598:	f7ff fe16 	bl	80011c8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d919      	bls.n	80015da <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	2201      	movs	r2, #1
 80015cc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02e      	b.n	8001638 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0d7      	beq.n	8001598 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0202 	orr.w	r2, r2, #2
 80015f6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001608:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	d007      	beq.n	800162e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001622:	2201      	movs	r2, #1
 8001624:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e019      	b.n	8001686 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d004      	beq.n	8001668 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00e      	b.n	8001686 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2204      	movs	r2, #4
 800166c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016a2:	e142      	b.n	800192a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8134 	beq.w	8001924 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x38>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b12      	cmp	r3, #18
 80016ca:	d125      	bne.n	8001718 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 020f 	and.w	r2, r3, #15
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	6979      	ldr	r1, [r7, #20]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d00b      	beq.n	800176c <HAL_GPIO_Init+0xd8>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001760:	2b11      	cmp	r3, #17
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d130      	bne.n	80017ce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	4313      	orrs	r3, r2
 8001794:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a2:	2201      	movs	r2, #1
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0201 	and.w	r2, r3, #1
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d109      	bne.n	80017ee <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d11b      	bne.n	800181e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d017      	beq.n	800181e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4013      	ands	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d07c      	beq.n	8001924 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800182a:	4a47      	ldr	r2, [pc, #284]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3318      	adds	r3, #24
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4013      	ands	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0a9a      	lsrs	r2, r3, #10
 8001852:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <HAL_GPIO_Init+0x2b8>)
 8001854:	4013      	ands	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	4093      	lsls	r3, r2
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001866:	4938      	ldr	r1, [pc, #224]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3318      	adds	r3, #24
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001874:	4b34      	ldr	r3, [pc, #208]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001898:	4a2b      	ldr	r2, [pc, #172]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4013      	ands	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80018c2:	4a21      	ldr	r2, [pc, #132]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4013      	ands	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80018ee:	4a16      	ldr	r2, [pc, #88]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80018f6:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 80018f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <HAL_GPIO_Init+0x2b4>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	3301      	adds	r3, #1
 8001928:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aeb5 	bne.w	80016a4 <HAL_GPIO_Init+0x10>
  }
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	44022000 	.word	0x44022000
 800194c:	002f7f7f 	.word	0x002f7f7f

08001950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e08d      	b.n	8001a7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff f918 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2224      	movs	r2, #36	@ 0x24
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	e006      	b.n	80019d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d108      	bne.n	80019f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	e007      	b.n	8001a02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69d9      	ldr	r1, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	817b      	strh	r3, [r7, #10]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	f040 80da 	bne.w	8001c5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2C_Master_Transmit+0x30>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0d3      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fb82 	bl	80011c8 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2319      	movs	r3, #25
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 fccc 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0be      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2221      	movs	r2, #33	@ 0x21
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2210      	movs	r2, #16
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2bff      	cmp	r3, #255	@ 0xff
 8001b12:	d90e      	bls.n	8001b32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	22ff      	movs	r2, #255	@ 0xff
 8001b18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	4b51      	ldr	r3, [pc, #324]	@ (8001c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fe64 	bl	80027f8 <I2C_TransferConfig>
 8001b30:	e06c      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fe53 	bl	80027f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b52:	e05b      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	6a39      	ldr	r1, [r7, #32]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fce2 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07b      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d034      	beq.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d130      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	@ 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fc5b 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04d      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2bff      	cmp	r3, #255	@ 0xff
 8001bcc:	d90e      	bls.n	8001bec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	22ff      	movs	r2, #255	@ 0xff
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fe07 	bl	80027f8 <I2C_TransferConfig>
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fdf6 	bl	80027f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d19e      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	6a39      	ldr	r1, [r7, #32]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fcc8 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01a      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_I2C_Master_Transmit+0x1e4>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	80002000 	.word	0x80002000
 8001c6c:	fe00e800 	.word	0xfe00e800

08001c70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	817b      	strh	r3, [r7, #10]
 8001c82:	460b      	mov	r3, r1
 8001c84:	813b      	strh	r3, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	f040 80f9 	bne.w	8001e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_I2C_Mem_Write+0x34>
 8001c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0ed      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2C_Mem_Write+0x4e>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e0e6      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc6:	f7ff fa7f 	bl	80011c8 <HAL_GetTick>
 8001cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2319      	movs	r3, #25
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fbc9 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0d1      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2221      	movs	r2, #33	@ 0x21
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d10:	88f8      	ldrh	r0, [r7, #6]
 8001d12:	893a      	ldrh	r2, [r7, #8]
 8001d14:	8979      	ldrh	r1, [r7, #10]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fad9 	bl	80022d8 <I2C_RequestMemoryWrite>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0a9      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	d90e      	bls.n	8001d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	22ff      	movs	r2, #255	@ 0xff
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fd4d 	bl	80027f8 <I2C_TransferConfig>
 8001d5e:	e00f      	b.n	8001d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	8979      	ldrh	r1, [r7, #10]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fd3c 	bl	80027f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fbcc 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e07b      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d034      	beq.n	8001e38 <HAL_I2C_Mem_Write+0x1c8>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d130      	bne.n	8001e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2180      	movs	r1, #128	@ 0x80
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fb45 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e04d      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2bff      	cmp	r3, #255	@ 0xff
 8001df8:	d90e      	bls.n	8001e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	22ff      	movs	r2, #255	@ 0xff
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	8979      	ldrh	r1, [r7, #10]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fcf1 	bl	80027f8 <I2C_TransferConfig>
 8001e16:	e00f      	b.n	8001e38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	8979      	ldrh	r1, [r7, #10]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 fce0 	bl	80027f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d19e      	bne.n	8001d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fbb2 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e01a      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_I2C_Mem_Write+0x224>)
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
  }
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	fe00e800 	.word	0xfe00e800

08001e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	f040 80fd 	bne.w	80020ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_I2C_Mem_Read+0x34>
 8001ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0f1      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2C_Mem_Read+0x4e>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0ea      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eee:	f7ff f96b 	bl	80011c8 <HAL_GetTick>
 8001ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2319      	movs	r3, #25
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fab5 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d5      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2222      	movs	r2, #34	@ 0x22
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2240      	movs	r2, #64	@ 0x40
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a3a      	ldr	r2, [r7, #32]
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f38:	88f8      	ldrh	r0, [r7, #6]
 8001f3a:	893a      	ldrh	r2, [r7, #8]
 8001f3c:	8979      	ldrh	r1, [r7, #10]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4603      	mov	r3, r0
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa19 	bl	8002380 <I2C_RequestMemoryRead>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0ad      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2bff      	cmp	r3, #255	@ 0xff
 8001f68:	d90e      	bls.n	8001f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	22ff      	movs	r2, #255	@ 0xff
 8001f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	8979      	ldrh	r1, [r7, #10]
 8001f78:	4b52      	ldr	r3, [pc, #328]	@ (80020c4 <HAL_I2C_Mem_Read+0x22c>)
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fc39 	bl	80027f8 <I2C_TransferConfig>
 8001f86:	e00f      	b.n	8001fa8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	8979      	ldrh	r1, [r7, #10]
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80020c4 <HAL_I2C_Mem_Read+0x22c>)
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fc28 	bl	80027f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa5c 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07c      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d034      	beq.n	8002068 <HAL_I2C_Mem_Read+0x1d0>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d130      	bne.n	8002068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200c:	2200      	movs	r2, #0
 800200e:	2180      	movs	r1, #128	@ 0x80
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fa2d 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04d      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2bff      	cmp	r3, #255	@ 0xff
 8002028:	d90e      	bls.n	8002048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22ff      	movs	r2, #255	@ 0xff
 800202e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	b2da      	uxtb	r2, r3
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	2300      	movs	r3, #0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fbd9 	bl	80027f8 <I2C_TransferConfig>
 8002046:	e00f      	b.n	8002068 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	b2da      	uxtb	r2, r3
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fbc8 	bl	80027f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d19a      	bne.n	8001fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fa9a 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e01a      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2220      	movs	r2, #32
 800208c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_I2C_Mem_Read+0x230>)
 800209a:	400b      	ands	r3, r1
 800209c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020ba:	2302      	movs	r3, #2
  }
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	80002400 	.word	0x80002400
 80020c8:	fe00e800 	.word	0xfe00e800

080020cc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	460b      	mov	r3, r1
 80020da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	f040 80ed 	bne.w	80022cc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002100:	d101      	bne.n	8002106 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002102:	2302      	movs	r3, #2
 8002104:	e0e3      	b.n	80022ce <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_I2C_IsDeviceReady+0x48>
 8002110:	2302      	movs	r3, #2
 8002112:	e0dc      	b.n	80022ce <HAL_I2C_IsDeviceReady+0x202>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_I2C_IsDeviceReady+0x76>
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800213c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002140:	e006      	b.n	8002150 <HAL_I2C_IsDeviceReady+0x84>
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002156:	f7ff f837 	bl	80011c8 <HAL_GetTick>
 800215a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b10      	cmp	r3, #16
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002188:	e034      	b.n	80021f4 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d01a      	beq.n	80021c8 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7ff f819 	bl	80011c8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <HAL_I2C_IsDeviceReady+0xdc>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e082      	b.n	80022ce <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021f4:	7fbb      	ldrb	r3, [r7, #30]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_I2C_IsDeviceReady+0x134>
 80021fa:	7f7b      	ldrb	r3, [r7, #29]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0c4      	beq.n	800218a <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d027      	beq.n	800225e <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	2120      	movs	r1, #32
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f929 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	2b04      	cmp	r3, #4
 800222a:	d107      	bne.n	800223c <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
 800223a:	e026      	b.n	800228a <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e023      	b.n	800228a <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2220      	movs	r2, #32
 8002248:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e037      	b.n	80022ce <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	2120      	movs	r1, #32
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f8fd 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	77fb      	strb	r3, [r7, #31]
 8002280:	e003      	b.n	800228a <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d904      	bls.n	80022a2 <HAL_I2C_IsDeviceReady+0x1d6>
 8002298:	7ffb      	ldrb	r3, [r7, #31]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	f63f af3f 	bhi.w	800212a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	817b      	strh	r3, [r7, #10]
 80022ea:	460b      	mov	r3, r1
 80022ec:	813b      	strh	r3, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	8979      	ldrh	r1, [r7, #10]
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <I2C_RequestMemoryWrite+0xa4>)
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fa79 	bl	80027f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f909 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02c      	b.n	8002374 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002320:	893b      	ldrh	r3, [r7, #8]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
 800232a:	e015      	b.n	8002358 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f8ef 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e012      	b.n	8002374 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800234e:	893b      	ldrh	r3, [r7, #8]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2200      	movs	r2, #0
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f884 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	80002000 	.word	0x80002000

08002380 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	817b      	strh	r3, [r7, #10]
 8002392:	460b      	mov	r3, r1
 8002394:	813b      	strh	r3, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8979      	ldrh	r1, [r7, #10]
 80023a0:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <I2C_RequestMemoryRead+0xa4>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fa26 	bl	80027f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f8b6 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e02c      	b.n	800241a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023c6:	893b      	ldrh	r3, [r7, #8]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80023d0:	e015      	b.n	80023fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023d2:	893b      	ldrh	r3, [r7, #8]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f89c 	bl	8002522 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e012      	b.n	800241a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023f4:	893b      	ldrh	r3, [r7, #8]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2200      	movs	r2, #0
 8002406:	2140      	movs	r1, #64	@ 0x40
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f831 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	80002000 	.word	0x80002000

08002428 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d103      	bne.n	8002446 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d007      	beq.n	8002464 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	619a      	str	r2, [r3, #24]
  }
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002480:	e03b      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f8d6 	bl	8002638 <I2C_IsErrorOccurred>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d02d      	beq.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe fe93 	bl	80011c8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d122      	bne.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4013      	ands	r3, r2
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d113      	bne.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4013      	ands	r3, r2
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	429a      	cmp	r2, r3
 8002516:	d0b4      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252e:	e033      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f87f 	bl	8002638 <I2C_IsErrorOccurred>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e031      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254a:	d025      	beq.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe fe3c 	bl	80011c8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11a      	bne.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d013      	beq.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d1c4      	bne.n	8002530 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e02f      	b.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f838 	bl	8002638 <I2C_IsErrorOccurred>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e02d      	b.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7fe fdf9 	bl	80011c8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11a      	bne.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d013      	beq.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e007      	b.n	800262e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	d1c8      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d068      	beq.n	8002736 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2210      	movs	r2, #16
 800266a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800266c:	e049      	b.n	8002702 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d045      	beq.n	8002702 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe fda7 	bl	80011c8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_IsErrorOccurred+0x54>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d13a      	bne.n	8002702 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800269e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ae:	d121      	bne.n	80026f4 <I2C_IsErrorOccurred+0xbc>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b6:	d01d      	beq.n	80026f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d01a      	beq.n	80026f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026ce:	f7fe fd7b 	bl	80011c8 <HAL_GetTick>
 80026d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d4:	e00e      	b.n	80026f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026d6:	f7fe fd77 	bl	80011c8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b19      	cmp	r3, #25
 80026e2:	d907      	bls.n	80026f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f043 0320 	orr.w	r3, r3, #32
 80026ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026f2:	e006      	b.n	8002702 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b20      	cmp	r3, #32
 8002700:	d1e9      	bne.n	80026d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b20      	cmp	r3, #32
 800270e:	d003      	beq.n	8002718 <I2C_IsErrorOccurred+0xe0>
 8002710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0aa      	beq.n	800266e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800271c:	2b00      	cmp	r3, #0
 800271e:	d103      	bne.n	8002728 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2220      	movs	r2, #32
 8002726:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002758:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01c      	beq.n	80027e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe3b 	bl	8002428 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <I2C_IsErrorOccurred+0x1bc>)
 80027be:	400b      	ands	r3, r1
 80027c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3728      	adds	r7, #40	@ 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	fe00e800 	.word	0xfe00e800

080027f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	817b      	strh	r3, [r7, #10]
 8002806:	4613      	mov	r3, r2
 8002808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002810:	7a7b      	ldrb	r3, [r7, #9]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002818:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	4313      	orrs	r3, r2
 8002822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002826:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	0d5b      	lsrs	r3, r3, #21
 8002832:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <I2C_TransferConfig+0x60>)
 8002838:	430b      	orrs	r3, r1
 800283a:	43db      	mvns	r3, r3
 800283c:	ea02 0103 	and.w	r1, r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	03ff63ff 	.word	0x03ff63ff

0800285c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	d138      	bne.n	80028e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800287c:	2302      	movs	r3, #2
 800287e:	e032      	b.n	80028e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2224      	movs	r2, #36	@ 0x24
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028e4:	2302      	movs	r3, #2
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	d139      	bne.n	800297c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002912:	2302      	movs	r3, #2
 8002914:	e033      	b.n	800297e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2224      	movs	r2, #36	@ 0x24
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002944:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f000 bc28 	b.w	80031f0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a0:	4b94      	ldr	r3, [pc, #592]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f003 0318 	and.w	r3, r3, #24
 80029a8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80029aa:	4b92      	ldr	r3, [pc, #584]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x46>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2b18      	cmp	r3, #24
 80029ca:	d114      	bne.n	80029f6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d111      	bne.n	80029f6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f000 bc08 	b.w	80031f0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80029e0:	4b84      	ldr	r3, [pc, #528]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	4981      	ldr	r1, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80029f4:	e040      	b.n	8002a78 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d023      	beq.n	8002a46 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7c      	ldr	r2, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fbdd 	bl	80011c8 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002a12:	f7fe fbd9 	bl	80011c8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e3e5      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a24:	4b73      	ldr	r3, [pc, #460]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002a30:	4b70      	ldr	r3, [pc, #448]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	496d      	ldr	r1, [pc, #436]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	618b      	str	r3, [r1, #24]
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a46:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fbb9 	bl	80011c8 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fbb5 	bl	80011c8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e3c1      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002a6c:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a0 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x10c>
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b18      	cmp	r3, #24
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 8092 	bne.w	8002bc6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e3a4      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x132>
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a4f      	ldr	r2, [pc, #316]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_OscConfig+0x1e4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d112      	bne.n	8002aec <HAL_RCC_OscConfig+0x160>
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b48      	ldr	r3, [pc, #288]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a47      	ldr	r2, [pc, #284]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ad8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b45      	ldr	r3, [pc, #276]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a44      	ldr	r2, [pc, #272]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e041      	b.n	8002b70 <HAL_RCC_OscConfig+0x1e4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x190>
 8002af6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e029      	b.n	8002b70 <HAL_RCC_OscConfig+0x1e4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b24:	d112      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1c0>
 8002b26:	4b33      	ldr	r3, [pc, #204]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a32      	ldr	r2, [pc, #200]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b30      	ldr	r3, [pc, #192]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e011      	b.n	8002b70 <HAL_RCC_OscConfig+0x1e4>
 8002b4c:	4b29      	ldr	r3, [pc, #164]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b26      	ldr	r3, [pc, #152]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a22      	ldr	r2, [pc, #136]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fb26 	bl	80011c8 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fb22 	bl	80011c8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e32e      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x1f4>
 8002b9e:	e012      	b.n	8002bc6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fb12 	bl	80011c8 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb0e 	bl	80011c8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e31a      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bba:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_RCC_OscConfig+0x268>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 809a 	beq.w	8002d08 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x25a>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	d149      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d146      	bne.n	8002c74 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2fe      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
 8002bf2:	bf00      	nop
 8002bf4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002bfe:	4b9a      	ldr	r3, [pc, #616]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0218 	and.w	r2, r3, #24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d014      	beq.n	8002c38 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002c0e:	4b96      	ldr	r3, [pc, #600]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0218 	bic.w	r2, r3, #24
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	4993      	ldr	r1, [pc, #588]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002c20:	f000 fdd0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c24:	4b91      	ldr	r3, [pc, #580]	@ (8002e6c <HAL_RCC_OscConfig+0x4e0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe fa43 	bl	80010b4 <HAL_InitTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e2db      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fac6 	bl	80011c8 <HAL_GetTick>
 8002c3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fac2 	bl	80011c8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e2ce      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c52:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002c5e:	4b82      	ldr	r3, [pc, #520]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	497e      	ldr	r1, [pc, #504]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002c72:	e049      	b.n	8002d08 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002c7c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0218 	bic.w	r2, r3, #24
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4977      	ldr	r1, [pc, #476]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002c8e:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a75      	ldr	r2, [pc, #468]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fa95 	bl	80011c8 <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fa91 	bl	80011c8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e29d      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002cc0:	4b69      	ldr	r3, [pc, #420]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	4966      	ldr	r1, [pc, #408]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	610b      	str	r3, [r1, #16]
 8002cd4:	e018      	b.n	8002d08 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	4b64      	ldr	r3, [pc, #400]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a63      	ldr	r2, [pc, #396]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fa71 	bl	80011c8 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002cea:	f7fe fa6d 	bl	80011c8 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e279      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d03c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1c:	4b52      	ldr	r3, [pc, #328]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d22:	4a51      	ldr	r2, [pc, #324]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fa4c 	bl	80011c8 <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fa48 	bl	80011c8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e254      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d46:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ef      	beq.n	8002d34 <HAL_RCC_OscConfig+0x3a8>
 8002d54:	e01b      	b.n	8002d8e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d56:	4b44      	ldr	r3, [pc, #272]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d5c:	4a42      	ldr	r2, [pc, #264]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe fa2f 	bl	80011c8 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fa2b 	bl	80011c8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e237      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ef      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80d2 	beq.w	8002f40 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002d9c:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <HAL_RCC_OscConfig+0x4e4>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d118      	bne.n	8002dda <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002da8:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <HAL_RCC_OscConfig+0x4e4>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	4a30      	ldr	r2, [pc, #192]	@ (8002e70 <HAL_RCC_OscConfig+0x4e4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db4:	f7fe fa08 	bl	80011c8 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe fa04 	bl	80011c8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e210      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002dce:	4b28      	ldr	r3, [pc, #160]	@ (8002e70 <HAL_RCC_OscConfig+0x4e4>)
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x468>
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002df2:	e074      	b.n	8002ede <HAL_RCC_OscConfig+0x552>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <HAL_RCC_OscConfig+0x4a2>
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e1c:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e22:	4a11      	ldr	r2, [pc, #68]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e2c:	e057      	b.n	8002ede <HAL_RCC_OscConfig+0x552>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d11e      	bne.n	8002e74 <HAL_RCC_OscConfig+0x4e8>
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e46:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e4c:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e56:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e5c:	4a02      	ldr	r2, [pc, #8]	@ (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x552>
 8002e68:	44020c00 	.word	0x44020c00
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	44020800 	.word	0x44020800
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b85      	cmp	r3, #133	@ 0x85
 8002e7a:	d118      	bne.n	8002eae <HAL_RCC_OscConfig+0x522>
 8002e7c:	4ba2      	ldr	r3, [pc, #648]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e82:	4aa1      	ldr	r2, [pc, #644]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e92:	4a9d      	ldr	r2, [pc, #628]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e9c:	4b9a      	ldr	r3, [pc, #616]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ea2:	4a99      	ldr	r2, [pc, #612]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002eac:	e017      	b.n	8002ede <HAL_RCC_OscConfig+0x552>
 8002eae:	4b96      	ldr	r3, [pc, #600]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eb4:	4a94      	ldr	r2, [pc, #592]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ebe:	4b92      	ldr	r3, [pc, #584]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ec4:	4a90      	ldr	r2, [pc, #576]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ece:	4b8e      	ldr	r3, [pc, #568]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ed4:	4a8c      	ldr	r2, [pc, #560]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe f96f 	bl	80011c8 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe f96b 	bl	80011c8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e175      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f04:	4b80      	ldr	r3, [pc, #512]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ed      	beq.n	8002eee <HAL_RCC_OscConfig+0x562>
 8002f12:	e015      	b.n	8002f40 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe f958 	bl	80011c8 <HAL_GetTick>
 8002f18:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f954 	bl	80011c8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e15e      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f32:	4b75      	ldr	r3, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ed      	bne.n	8002f1c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d036      	beq.n	8002fba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d019      	beq.n	8002f88 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f54:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6b      	ldr	r2, [pc, #428]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f932 	bl	80011c8 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002f68:	f7fe f92e 	bl	80011c8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e13a      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x5dc>
 8002f86:	e018      	b.n	8002fba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f88:	4b5f      	ldr	r3, [pc, #380]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002f8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe f918 	bl	80011c8 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002f9c:	f7fe f914 	bl	80011c8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e120      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002fae:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8115 	beq.w	80031ee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b18      	cmp	r3, #24
 8002fc8:	f000 80af 	beq.w	800312a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 8086 	bne.w	80030e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002fdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f8f1 	bl	80011c8 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002fea:	f7fe f8ed 	bl	80011c8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0f9      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ffc:	4b42      	ldr	r3, [pc, #264]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003008:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003010:	f023 0303 	bic.w	r3, r3, #3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800301c:	0212      	lsls	r2, r2, #8
 800301e:	430a      	orrs	r2, r1
 8003020:	4939      	ldr	r1, [pc, #228]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	628b      	str	r3, [r1, #40]	@ 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	3b01      	subs	r3, #1
 800302c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	3b01      	subs	r3, #1
 8003036:	025b      	lsls	r3, r3, #9
 8003038:	b29b      	uxth	r3, r3
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	3b01      	subs	r3, #1
 8003042:	041b      	lsls	r3, r3, #16
 8003044:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	3b01      	subs	r3, #1
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003056:	492c      	ldr	r1, [pc, #176]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800305c:	4b2a      	ldr	r3, [pc, #168]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003062:	f023 0310 	bic.w	r3, r3, #16
 8003066:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306c:	4a26      	ldr	r2, [pc, #152]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003072:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003078:	f043 0310 	orr.w	r3, r3, #16
 800307c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800307e:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f023 020c 	bic.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	491f      	ldr	r1, [pc, #124]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003090:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	f023 0220 	bic.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309c:	491a      	ldr	r1, [pc, #104]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030a2:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	4a18      	ldr	r2, [pc, #96]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe f885 	bl	80011c8 <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80030c2:	f7fe f881 	bl	80011c8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e08d      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x736>
 80030e0:	e085      	b.n	80031ee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	@ (8003108 <HAL_RCC_OscConfig+0x77c>)
 80030e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe f86b 	bl	80011c8 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80030f6:	f7fe f867 	bl	80011c8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d903      	bls.n	800310c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e073      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
 8003108:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800310c:	4b3a      	ldr	r3, [pc, #232]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003118:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	4a36      	ldr	r2, [pc, #216]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 800311e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	6293      	str	r3, [r2, #40]	@ 0x28
 8003128:	e061      	b.n	80031ee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800312a:	4b33      	ldr	r3, [pc, #204]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003130:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d031      	beq.n	80031a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d12a      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d122      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d11a      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	0a5b      	lsrs	r3, r3, #9
 8003170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d111      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d108      	bne.n	80031a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0e1b      	lsrs	r3, r3, #24
 8003194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e024      	b.n	80031f0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031a6:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	08db      	lsrs	r3, r3, #3
 80031ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d01a      	beq.n	80031ee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80031b8:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	4a0e      	ldr	r2, [pc, #56]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031be:	f023 0310 	bic.w	r3, r3, #16
 80031c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe f800 	bl	80011c8 <HAL_GetTick>
 80031c8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80031ca:	bf00      	nop
 80031cc:	f7fd fffc 	bl	80011c8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d0f9      	beq.n	80031cc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031dc:	4a06      	ldr	r2, [pc, #24]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <HAL_RCC_OscConfig+0x86c>)
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	44020c00 	.word	0x44020c00

080031fc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e19e      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003210:	4b83      	ldr	r3, [pc, #524]	@ (8003420 <HAL_RCC_ClockConfig+0x224>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d910      	bls.n	8003240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b80      	ldr	r3, [pc, #512]	@ (8003420 <HAL_RCC_ClockConfig+0x224>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 020f 	bic.w	r2, r3, #15
 8003226:	497e      	ldr	r1, [pc, #504]	@ (8003420 <HAL_RCC_ClockConfig+0x224>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b7c      	ldr	r3, [pc, #496]	@ (8003420 <HAL_RCC_ClockConfig+0x224>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e186      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	4b74      	ldr	r3, [pc, #464]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800325a:	429a      	cmp	r2, r3
 800325c:	d909      	bls.n	8003272 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800325e:	4b71      	ldr	r3, [pc, #452]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	496d      	ldr	r1, [pc, #436]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 800326e:	4313      	orrs	r3, r2
 8003270:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	4b68      	ldr	r3, [pc, #416]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800328c:	429a      	cmp	r2, r3
 800328e:	d909      	bls.n	80032a4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003290:	4b64      	ldr	r3, [pc, #400]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4961      	ldr	r1, [pc, #388]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032bc:	429a      	cmp	r2, r3
 80032be:	d908      	bls.n	80032d2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80032c0:	4b58      	ldr	r3, [pc, #352]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4955      	ldr	r1, [pc, #340]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d908      	bls.n	8003300 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80032ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f023 020f 	bic.w	r2, r3, #15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	494a      	ldr	r1, [pc, #296]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8093 	beq.w	8003434 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003316:	4b43      	ldr	r3, [pc, #268]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d121      	bne.n	8003366 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e113      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	4b3d      	ldr	r3, [pc, #244]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d115      	bne.n	8003366 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e107      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0fb      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003356:	4b33      	ldr	r3, [pc, #204]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0f3      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003366:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	492c      	ldr	r1, [pc, #176]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd ff26 	bl	80011c8 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d112      	bne.n	80033ac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fd ff1e 	bl	80011c8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0d7      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 0318 	and.w	r3, r3, #24
 80033a6:	2b18      	cmp	r3, #24
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_ClockConfig+0x18c>
 80033aa:	e043      	b.n	8003434 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d112      	bne.n	80033da <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033b6:	f7fd ff07 	bl	80011c8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e0c0      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	4b15      	ldr	r3, [pc, #84]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 0318 	and.w	r3, r3, #24
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x1ba>
 80033d8:	e02c      	b.n	8003434 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d122      	bne.n	8003428 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd fef0 	bl	80011c8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0a9      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80033fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003424 <HAL_RCC_ClockConfig+0x228>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 0318 	and.w	r3, r3, #24
 8003402:	2b08      	cmp	r3, #8
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x1e8>
 8003406:	e015      	b.n	8003434 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fd fede 	bl	80011c8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d906      	bls.n	8003428 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e097      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
 800341e:	bf00      	nop
 8003420:	40022000 	.word	0x40022000
 8003424:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003428:	4b4b      	ldr	r3, [pc, #300]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f003 0318 	and.w	r3, r3, #24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e9      	bne.n	8003408 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4b44      	ldr	r3, [pc, #272]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	429a      	cmp	r2, r3
 800344e:	d208      	bcs.n	8003462 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003450:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 020f 	bic.w	r2, r3, #15
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	493e      	ldr	r1, [pc, #248]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <HAL_RCC_ClockConfig+0x360>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d210      	bcs.n	8003492 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <HAL_RCC_ClockConfig+0x360>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 020f 	bic.w	r2, r3, #15
 8003478:	4938      	ldr	r1, [pc, #224]	@ (800355c <HAL_RCC_ClockConfig+0x360>)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	4b36      	ldr	r3, [pc, #216]	@ (800355c <HAL_RCC_ClockConfig+0x360>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e05d      	b.n	800354e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d208      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4927      	ldr	r1, [pc, #156]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034da:	429a      	cmp	r2, r3
 80034dc:	d209      	bcs.n	80034f2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	491a      	ldr	r1, [pc, #104]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800350c:	429a      	cmp	r2, r3
 800350e:	d209      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	490e      	ldr	r1, [pc, #56]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003524:	f000 f822 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_RCC_ClockConfig+0x35c>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490b      	ldr	r1, [pc, #44]	@ (8003560 <HAL_RCC_ClockConfig+0x364>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <HAL_RCC_ClockConfig+0x368>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_ClockConfig+0x36c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fdb6 	bl	80010b4 <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800354c:	7afb      	ldrb	r3, [r7, #11]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	44020c00 	.word	0x44020c00
 800355c:	40022000 	.word	0x40022000
 8003560:	08008fe4 	.word	0x08008fe4
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003572:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0318 	and.w	r3, r3, #24
 800357a:	2b08      	cmp	r3, #8
 800357c:	d102      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800357e:	4b8a      	ldr	r3, [pc, #552]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e107      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003584:	4b87      	ldr	r3, [pc, #540]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 0318 	and.w	r3, r3, #24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d112      	bne.n	80035b6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003590:	4b84      	ldr	r3, [pc, #528]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800359c:	4b81      	ldr	r3, [pc, #516]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	4a81      	ldr	r2, [pc, #516]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x240>)
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e0f1      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80035b0:	4b7e      	ldr	r3, [pc, #504]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x240>)
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e0ee      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b6:	4b7b      	ldr	r3, [pc, #492]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0318 	and.w	r3, r3, #24
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d102      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035c2:	4b7b      	ldr	r3, [pc, #492]	@ (80037b0 <HAL_RCC_GetSysClockFreq+0x244>)
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e0e5      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c8:	4b76      	ldr	r3, [pc, #472]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f003 0318 	and.w	r3, r3, #24
 80035d0:	2b18      	cmp	r3, #24
 80035d2:	f040 80dd 	bne.w	8003790 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80035d6:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80035e0:	4b70      	ldr	r3, [pc, #448]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80035ec:	4b6d      	ldr	r3, [pc, #436]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80035f8:	4b6a      	ldr	r3, [pc, #424]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003610:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 80b7 	beq.w	800378a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0xbe>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d056      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x16a>
 8003628:	e077      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800362a:	4b5e      	ldr	r3, [pc, #376]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02d      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003636:	4b5b      	ldr	r3, [pc, #364]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	08db      	lsrs	r3, r3, #3
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	4a5a      	ldr	r2, [pc, #360]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x240>)
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003660:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003670:	ed97 6a02 	vldr	s12, [r7, #8]
 8003674:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003678:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800367c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003684:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003690:	e065      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80037b8 <HAL_RCC_GetSysClockFreq+0x24c>
 80036a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a4:	4b3f      	ldr	r3, [pc, #252]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80036a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80036b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x248>
 80036bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80036c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80036d4:	e043      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80037bc <HAL_RCC_GetSysClockFreq+0x250>
 80036e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80036f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80036fc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003700:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003704:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800370c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003718:	e021      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003724:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80037c0 <HAL_RCC_GetSysClockFreq+0x254>
 8003728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800373c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003740:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80037b4 <HAL_RCC_GetSysClockFreq+0x248>
 8003744:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003748:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003750:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800375c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003762:	0a5b      	lsrs	r3, r3, #9
 8003764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003768:	3301      	adds	r3, #1
 800376a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003776:	edd7 6a06 	vldr	s13, [r7, #24]
 800377a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003782:	ee17 3a90 	vmov	r3, s15
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e004      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e001      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCC_GetSysClockFreq+0x240>)
 8003792:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003794:	69fb      	ldr	r3, [r7, #28]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	@ 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	44020c00 	.word	0x44020c00
 80037a8:	003d0900 	.word	0x003d0900
 80037ac:	03d09000 	.word	0x03d09000
 80037b0:	017d7840 	.word	0x017d7840
 80037b4:	46000000 	.word	0x46000000
 80037b8:	4c742400 	.word	0x4c742400
 80037bc:	4bbebc20 	.word	0x4bbebc20
 80037c0:	4a742400 	.word	0x4a742400

080037c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80037c8:	f7ff fed0 	bl	800356c <HAL_RCC_GetSysClockFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80037d2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80037d6:	4907      	ldr	r1, [pc, #28]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80037da:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80037e4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80037e6:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80037e8:	681b      	ldr	r3, [r3, #0]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	44020c00 	.word	0x44020c00
 80037f4:	08008fe4 	.word	0x08008fe4
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003800:	f7ff ffe0 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4904      	ldr	r1, [pc, #16]	@ (8003824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	44020c00 	.word	0x44020c00
 8003824:	08008ff4 	.word	0x08008ff4

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800382c:	f7ff ffca 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	@ (8003850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	44020c00 	.word	0x44020c00
 8003850:	08008ff4 	.word	0x08008ff4

08003854 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003858:	f7ff ffb4 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	0b1b      	lsrs	r3, r3, #12
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	@ (800387c <HAL_RCC_GetPCLK3Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	44020c00 	.word	0x44020c00
 800387c:	08008ff4 	.word	0x08008ff4

08003880 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b0ba      	sub	sp, #232	@ 0xe8
 8003886:	af00      	add	r7, sp, #0
 8003888:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800388c:	2300      	movs	r3, #0
 800388e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003892:	2300      	movs	r3, #0
 8003894:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80038a4:	2500      	movs	r5, #0
 80038a6:	ea54 0305 	orrs.w	r3, r4, r5
 80038aa:	d00b      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80038ac:	4bcd      	ldr	r3, [pc, #820]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80038ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038b2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80038b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	4ac9      	ldr	r2, [pc, #804]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f002 0801 	and.w	r8, r2, #1
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	ea58 0309 	orrs.w	r3, r8, r9
 80038d8:	d042      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80038da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d823      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80038e4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ec <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	08003935 	.word	0x08003935
 80038f0:	08003905 	.word	0x08003905
 80038f4:	08003919 	.word	0x08003919
 80038f8:	08003935 	.word	0x08003935
 80038fc:	08003935 	.word	0x08003935
 8003900:	08003935 	.word	0x08003935
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003908:	3308      	adds	r3, #8
 800390a:	4618      	mov	r0, r3
 800390c:	f003 f90c 	bl	8006b28 <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003916:	e00e      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800391c:	3330      	adds	r3, #48	@ 0x30
 800391e:	4618      	mov	r0, r3
 8003920:	f003 f99a 	bl	8006c58 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003936:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800393e:	4ba9      	ldr	r3, [pc, #676]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003944:	f023 0107 	bic.w	r1, r3, #7
 8003948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800394c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394e:	4aa5      	ldr	r2, [pc, #660]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003950:	430b      	orrs	r3, r1
 8003952:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003956:	e003      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800395c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003960:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f002 0a02 	and.w	sl, r2, #2
 800396c:	f04f 0b00 	mov.w	fp, #0
 8003970:	ea5a 030b 	orrs.w	r3, sl, fp
 8003974:	f000 8088 	beq.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397e:	2b28      	cmp	r3, #40	@ 0x28
 8003980:	d868      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003982:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	08003a5d 	.word	0x08003a5d
 800398c:	08003a55 	.word	0x08003a55
 8003990:	08003a55 	.word	0x08003a55
 8003994:	08003a55 	.word	0x08003a55
 8003998:	08003a55 	.word	0x08003a55
 800399c:	08003a55 	.word	0x08003a55
 80039a0:	08003a55 	.word	0x08003a55
 80039a4:	08003a55 	.word	0x08003a55
 80039a8:	08003a2d 	.word	0x08003a2d
 80039ac:	08003a55 	.word	0x08003a55
 80039b0:	08003a55 	.word	0x08003a55
 80039b4:	08003a55 	.word	0x08003a55
 80039b8:	08003a55 	.word	0x08003a55
 80039bc:	08003a55 	.word	0x08003a55
 80039c0:	08003a55 	.word	0x08003a55
 80039c4:	08003a55 	.word	0x08003a55
 80039c8:	08003a41 	.word	0x08003a41
 80039cc:	08003a55 	.word	0x08003a55
 80039d0:	08003a55 	.word	0x08003a55
 80039d4:	08003a55 	.word	0x08003a55
 80039d8:	08003a55 	.word	0x08003a55
 80039dc:	08003a55 	.word	0x08003a55
 80039e0:	08003a55 	.word	0x08003a55
 80039e4:	08003a55 	.word	0x08003a55
 80039e8:	08003a5d 	.word	0x08003a5d
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003a55 	.word	0x08003a55
 80039f8:	08003a55 	.word	0x08003a55
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	08003a55 	.word	0x08003a55
 8003a10:	08003a55 	.word	0x08003a55
 8003a14:	08003a55 	.word	0x08003a55
 8003a18:	08003a55 	.word	0x08003a55
 8003a1c:	08003a55 	.word	0x08003a55
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003a55 	.word	0x08003a55
 8003a28:	08003a5d 	.word	0x08003a5d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a30:	3308      	adds	r3, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 f878 	bl	8006b28 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003a3e:	e00e      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a44:	3330      	adds	r3, #48	@ 0x30
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 f906 	bl	8006c58 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003a52:	e004      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003a66:	4b5f      	ldr	r3, [pc, #380]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a6c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a76:	4a5b      	ldr	r2, [pc, #364]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0304 	and.w	r3, r2, #4
 8003a94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d04e      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003ab2:	d02c      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003ab4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003ab8:	d825      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d028      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d81f      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ac8:	d025      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003acc:	d81b      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ace:	2b80      	cmp	r3, #128	@ 0x80
 8003ad0:	d00f      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003ad2:	2b80      	cmp	r3, #128	@ 0x80
 8003ad4:	d817      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01f      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d113      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 f81f 	bl	8006b28 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003af0:	e014      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003af6:	3330      	adds	r3, #48	@ 0x30
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 f8ad 	bl	8006c58 <RCCEx_PLL3_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003b04:	e00a      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10c      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003b24:	4b2f      	ldr	r3, [pc, #188]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b2a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b34:	4a2b      	ldr	r2, [pc, #172]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b3c:	e003      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b42:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f002 0308 	and.w	r3, r2, #8
 8003b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	d056      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b6c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b70:	d031      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003b72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b76:	d82a      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7c:	d02d      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b82:	d824      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b88:	d029      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003b8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b8e:	d81e      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b94:	d011      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9a:	d818      	bhi.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d023      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d113      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003baa:	3308      	adds	r3, #8
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 ffbb 	bl	8006b28 <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003bb8:	e017      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bbe:	3330      	adds	r3, #48	@ 0x30
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 f849 	bl	8006c58 <RCCEx_PLL3_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003bcc:	e00d      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bd4:	e009      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e007      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003bda:	bf00      	nop
 8003bdc:	e005      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003bde:	bf00      	nop
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003be2:	bf00      	nop
 8003be4:	44020c00 	.word	0x44020c00
        break;
 8003be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003bf2:	4bb9      	ldr	r3, [pc, #740]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bf8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c02:	4ab5      	ldr	r2, [pc, #724]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f002 0310 	and.w	r3, r2, #16
 8003c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c2a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d053      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c3e:	d031      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003c40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c44:	d82a      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c4a:	d02d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c50:	d824      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c56:	d029      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c5c:	d81e      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c62:	d011      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c68:	d818      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d020      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	d113      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c78:	3308      	adds	r3, #8
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 ff54 	bl	8006b28 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003c86:	e014      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8c:	3330      	adds	r3, #48	@ 0x30
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 ffe2 	bl	8006c58 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ca2:	e006      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ca4:	bf00      	nop
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003cba:	4b87      	ldr	r3, [pc, #540]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	4a83      	ldr	r2, [pc, #524]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003cd2:	e003      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003cd8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f002 0320 	and.w	r3, r2, #32
 8003ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	d053      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003d06:	d031      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003d08:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003d0c:	d82a      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d12:	d02d      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d18:	d824      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d1a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003d1e:	d029      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003d20:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003d24:	d81e      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2a:	d011      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	d818      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d020      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3a:	d113      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d40:	3308      	adds	r3, #8
 8003d42:	4618      	mov	r0, r3
 8003d44:	f002 fef0 	bl	8006b28 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003d4e:	e014      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d54:	3330      	adds	r3, #48	@ 0x30
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 ff7e 	bl	8006c58 <RCCEx_PLL3_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003d62:	e00a      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d6a:	e006      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003d6c:	bf00      	nop
 8003d6e:	e004      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003d70:	bf00      	nop
 8003d72:	e002      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003d74:	bf00      	nop
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003d82:	4b55      	ldr	r3, [pc, #340]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d88:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a51      	ldr	r2, [pc, #324]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003da0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	d053      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003dce:	d031      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003dd0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003dd4:	d82a      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003dd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dda:	d02d      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003de0:	d824      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003de2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003de6:	d029      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003de8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dec:	d81e      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df2:	d011      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003df8:	d818      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d020      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e02:	d113      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e08:	3308      	adds	r3, #8
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 fe8c 	bl	8006b28 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003e16:	e014      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e1c:	3330      	adds	r3, #48	@ 0x30
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 ff1a 	bl	8006c58 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e32:	e006      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e34:	bf00      	nop
 8003e36:	e004      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e38:	bf00      	nop
 8003e3a:	e002      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e42:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e68:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e82:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d03d      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e96:	d01b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003e98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e9c:	d814      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea2:	d017      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8003ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea8:	d80e      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb2:	d109      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb8:	3330      	adds	r3, #48	@ 0x30
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 fecc 	bl	8006c58 <RCCEx_PLL3_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003ec6:	e00a      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003ed0:	bf00      	nop
 8003ed2:	e004      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003ed4:	bf00      	nop
 8003ed6:	e002      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003ed8:	44020c00 	.word	0x44020c00
        break;
 8003edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ede:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003ee6:	4b99      	ldr	r3, [pc, #612]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ee8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef6:	4a95      	ldr	r2, [pc, #596]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003efe:	e003      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f22:	460b      	mov	r3, r1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d03b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f32:	d01b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003f34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f38:	d814      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003f3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f3e:	d017      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003f40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f44:	d80e      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8003f4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f54:	3330      	adds	r3, #48	@ 0x30
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fe7e 	bl	8006c58 <RCCEx_PLL3_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003f62:	e008      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e002      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f7e:	4b73      	ldr	r3, [pc, #460]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f84:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d03d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fcc:	d01b      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8003fce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fd2:	d814      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd8:	d017      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8003fda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fde:	d80e      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d014      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fee:	3330      	adds	r3, #48	@ 0x30
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fe31 	bl	8006c58 <RCCEx_PLL3_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004004:	e004      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004006:	bf00      	nop
 8004008:	e002      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800400e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004010:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10d      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004018:	4b4c      	ldr	r3, [pc, #304]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800401a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800401e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402a:	4a48      	ldr	r2, [pc, #288]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800402c:	430b      	orrs	r3, r1
 800402e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004032:	e003      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004038:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800403c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004052:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d035      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800405c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004068:	d015      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800406a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800406e:	d80e      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004078:	d109      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800407a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800407e:	3330      	adds	r3, #48	@ 0x30
 8004080:	4618      	mov	r0, r3
 8004082:	f002 fde9 	bl	8006c58 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800409a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80040a4:	4b29      	ldr	r3, [pc, #164]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040aa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b6:	4a25      	ldr	r2, [pc, #148]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80040c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	2100      	movs	r1, #0
 80040d2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80040d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d037      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80040e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f4:	d015      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80040f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fa:	d80e      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004104:	d109      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410a:	3330      	adds	r3, #48	@ 0x30
 800410c:	4618      	mov	r0, r3
 800410e:	f002 fda3 	bl	8006c58 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004126:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004128:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10f      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004132:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004136:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800413a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004142:	4a02      	ldr	r2, [pc, #8]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004144:	430b      	orrs	r3, r1
 8004146:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800414a:	e005      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800414c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004154:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	2100      	movs	r1, #0
 8004162:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004168:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800416a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800416e:	460b      	mov	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004174:	4bb8      	ldr	r3, [pc, #736]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4ab7      	ldr	r2, [pc, #732]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800417a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800417e:	61d3      	str	r3, [r2, #28]
 8004180:	4bb5      	ldr	r3, [pc, #724]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004188:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800418c:	4ab2      	ldr	r2, [pc, #712]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800418e:	430b      	orrs	r3, r1
 8004190:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800419e:	673b      	str	r3, [r7, #112]	@ 0x70
 80041a0:	2300      	movs	r3, #0
 80041a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80041a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041a8:	460b      	mov	r3, r1
 80041aa:	4313      	orrs	r3, r2
 80041ac:	d055      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80041ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80041ba:	d031      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80041bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80041c0:	d82a      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c6:	d02d      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041cc:	d824      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80041ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d2:	d029      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80041d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d8:	d81e      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80041da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041de:	d011      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e4:	d818      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d020      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ee:	d113      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041f4:	3308      	adds	r3, #8
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fc96 	bl	8006b28 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004202:	e014      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004208:	3330      	adds	r3, #48	@ 0x30
 800420a:	4618      	mov	r0, r3
 800420c:	f002 fd24 	bl	8006c58 <RCCEx_PLL3_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004216:	e00a      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800421e:	e006      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004220:	bf00      	nop
 8004222:	e004      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004224:	bf00      	nop
 8004226:	e002      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004228:	bf00      	nop
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004236:	4b88      	ldr	r3, [pc, #544]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004238:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800423c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004248:	4a83      	ldr	r2, [pc, #524]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800424a:	430b      	orrs	r3, r1
 800424c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004256:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004266:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004268:	2300      	movs	r3, #0
 800426a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800426c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d055      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004282:	d031      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004284:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004288:	d82a      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428e:	d02d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8004290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004294:	d824      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8004296:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800429a:	d029      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800429c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042a0:	d81e      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a6:	d011      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ac:	d818      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b6:	d113      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042bc:	3308      	adds	r3, #8
 80042be:	4618      	mov	r0, r3
 80042c0:	f002 fc32 	bl	8006b28 <RCCEx_PLL2_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80042ca:	e014      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d0:	3330      	adds	r3, #48	@ 0x30
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fcc0 	bl	8006c58 <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80042de:	e00a      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80042e6:	e006      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80042e8:	bf00      	nop
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80042ec:	bf00      	nop
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80042f0:	bf00      	nop
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80042fe:	4b56      	ldr	r3, [pc, #344]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004304:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004310:	4a51      	ldr	r2, [pc, #324]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004312:	430b      	orrs	r3, r1
 8004314:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800431e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800432e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004330:	2300      	movs	r3, #0
 8004332:	667b      	str	r3, [r7, #100]	@ 0x64
 8004334:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d032      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800433e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004346:	2b05      	cmp	r3, #5
 8004348:	d80f      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800434a:	2b03      	cmp	r3, #3
 800434c:	d211      	bcs.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800434e:	2b01      	cmp	r3, #1
 8004350:	d911      	bls.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004352:	2b02      	cmp	r3, #2
 8004354:	d109      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435a:	3308      	adds	r3, #8
 800435c:	4618      	mov	r0, r3
 800435e:	f002 fbe3 	bl	8006b28 <RCCEx_PLL2_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004378:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004380:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004386:	f023 0107 	bic.w	r1, r3, #7
 800438a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800438e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004392:	4a31      	ldr	r2, [pc, #196]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004394:	430b      	orrs	r3, r1
 8004396:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800439a:	e003      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80043a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	2100      	movs	r1, #0
 80043ae:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d024      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80043c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d005      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80043d6:	e002      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80043dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10d      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80043e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80043e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043ec:	f023 0108 	bic.w	r1, r3, #8
 80043f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043f8:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004406:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004416:	653b      	str	r3, [r7, #80]	@ 0x50
 8004418:	2300      	movs	r3, #0
 800441a:	657b      	str	r3, [r7, #84]	@ 0x54
 800441c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004420:	460b      	mov	r3, r1
 8004422:	4313      	orrs	r3, r2
 8004424:	f000 80b9 	beq.w	800459a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	4a0b      	ldr	r2, [pc, #44]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004434:	f7fc fec8 	bl	80011c8 <HAL_GetTick>
 8004438:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800443c:	e010      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fc fec3 	bl	80011c8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d908      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004454:	e00a      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004456:	bf00      	nop
 8004458:	44020c00 	.word	0x44020c00
 800445c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004460:	4bba      	ldr	r3, [pc, #744]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0e8      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800446c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 808e 	bne.w	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004476:	4bb6      	ldr	r3, [pc, #728]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800447c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004480:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d023      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800448c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004490:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004498:	4293      	cmp	r3, r2
 800449a:	d01b      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800449c:	4bac      	ldr	r3, [pc, #688]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4ba9      	ldr	r3, [pc, #676]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b0:	4aa7      	ldr	r2, [pc, #668]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c0:	4aa3      	ldr	r2, [pc, #652]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ca:	4aa1      	ldr	r2, [pc, #644]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d019      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fc fe72 	bl	80011c8 <HAL_GetTick>
 80044e4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e8:	e00d      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fc fe6d 	bl	80011c8 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d903      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004506:	4b92      	ldr	r3, [pc, #584]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ea      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004514:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d135      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800451c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004520:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452c:	d110      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800452e:	4b88      	ldr	r3, [pc, #544]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800453a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004544:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004548:	4a81      	ldr	r2, [pc, #516]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800454a:	430b      	orrs	r3, r1
 800454c:	61d3      	str	r3, [r2, #28]
 800454e:	e005      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004550:	4b7f      	ldr	r3, [pc, #508]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4a7e      	ldr	r2, [pc, #504]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004556:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800455a:	61d3      	str	r3, [r2, #28]
 800455c:	4b7c      	ldr	r3, [pc, #496]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800455e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004562:	4a7b      	ldr	r2, [pc, #492]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004568:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800456c:	4b78      	ldr	r3, [pc, #480]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800456e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	4a74      	ldr	r2, [pc, #464]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004580:	430b      	orrs	r3, r1
 8004582:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004586:	e008      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004588:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800458c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004596:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800459a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80045a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a8:	2300      	movs	r3, #0
 80045aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d035      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80045b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045be:	2b30      	cmp	r3, #48	@ 0x30
 80045c0:	d014      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80045c2:	2b30      	cmp	r3, #48	@ 0x30
 80045c4:	d80e      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d012      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d80a      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d106      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	4a5d      	ldr	r2, [pc, #372]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80045e2:	e008      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80045ec:	bf00      	nop
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80045fe:	4b54      	ldr	r3, [pc, #336]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004604:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004610:	4a4f      	ldr	r2, [pc, #316]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004612:	430b      	orrs	r3, r1
 8004614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800461e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800462e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004630:	2300      	movs	r3, #0
 8004632:	647b      	str	r3, [r7, #68]	@ 0x44
 8004634:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d033      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800463e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	d007      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800464e:	e010      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004650:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	4a3e      	ldr	r2, [pc, #248]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800465a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800465c:	e00d      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800465e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004662:	3308      	adds	r3, #8
 8004664:	4618      	mov	r0, r3
 8004666:	f002 fa5f 	bl	8006b28 <RCCEx_PLL2_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004682:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004688:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800468c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004694:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004696:	430b      	orrs	r3, r1
 8004698:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046a2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80046a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80046b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046b4:	2300      	movs	r3, #0
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046bc:	460b      	mov	r3, r1
 80046be:	4313      	orrs	r3, r2
 80046c0:	d04c      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80046c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d827      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80046ce:	a201      	add	r2, pc, #4	@ (adr r2, 80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080046e9 	.word	0x080046e9
 80046d8:	080046f7 	.word	0x080046f7
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004727 	.word	0x08004727
 80046e4:	08004727 	.word	0x08004727
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	4a18      	ldr	r2, [pc, #96]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80046ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80046f4:	e018      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046fa:	3308      	adds	r3, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f002 fa13 	bl	8006b28 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004708:	e00e      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800470e:	3330      	adds	r3, #48	@ 0x30
 8004710:	4618      	mov	r0, r3
 8004712:	f002 faa1 	bl	8006c58 <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800471c:	e004      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004728:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004736:	f023 0107 	bic.w	r1, r3, #7
 800473a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004742:	4a03      	ldr	r2, [pc, #12]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004744:	430b      	orrs	r3, r1
 8004746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800474a:	e007      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800474c:	44020800 	.word	0x44020800
 8004750:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004758:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800475c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004768:	633b      	str	r3, [r7, #48]	@ 0x30
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
 800476e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004772:	460b      	mov	r3, r1
 8004774:	4313      	orrs	r3, r2
 8004776:	f000 8081 	beq.w	800487c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800477e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004782:	2b20      	cmp	r3, #32
 8004784:	d85f      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	08004811 	.word	0x08004811
 8004790:	08004847 	.word	0x08004847
 8004794:	08004847 	.word	0x08004847
 8004798:	08004847 	.word	0x08004847
 800479c:	08004847 	.word	0x08004847
 80047a0:	08004847 	.word	0x08004847
 80047a4:	08004847 	.word	0x08004847
 80047a8:	08004847 	.word	0x08004847
 80047ac:	0800481f 	.word	0x0800481f
 80047b0:	08004847 	.word	0x08004847
 80047b4:	08004847 	.word	0x08004847
 80047b8:	08004847 	.word	0x08004847
 80047bc:	08004847 	.word	0x08004847
 80047c0:	08004847 	.word	0x08004847
 80047c4:	08004847 	.word	0x08004847
 80047c8:	08004847 	.word	0x08004847
 80047cc:	08004833 	.word	0x08004833
 80047d0:	08004847 	.word	0x08004847
 80047d4:	08004847 	.word	0x08004847
 80047d8:	08004847 	.word	0x08004847
 80047dc:	08004847 	.word	0x08004847
 80047e0:	08004847 	.word	0x08004847
 80047e4:	08004847 	.word	0x08004847
 80047e8:	08004847 	.word	0x08004847
 80047ec:	0800484f 	.word	0x0800484f
 80047f0:	08004847 	.word	0x08004847
 80047f4:	08004847 	.word	0x08004847
 80047f8:	08004847 	.word	0x08004847
 80047fc:	08004847 	.word	0x08004847
 8004800:	08004847 	.word	0x08004847
 8004804:	08004847 	.word	0x08004847
 8004808:	08004847 	.word	0x08004847
 800480c:	0800484f 	.word	0x0800484f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004810:	4bb9      	ldr	r3, [pc, #740]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	4ab8      	ldr	r2, [pc, #736]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800481c:	e018      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800481e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004822:	3308      	adds	r3, #8
 8004824:	4618      	mov	r0, r3
 8004826:	f002 f97f 	bl	8006b28 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004830:	e00e      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004836:	3330      	adds	r3, #48	@ 0x30
 8004838:	4618      	mov	r0, r3
 800483a:	f002 fa0d 	bl	8006c58 <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800484e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004850:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10d      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004858:	4ba7      	ldr	r3, [pc, #668]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800485a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800485e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800486a:	4aa3      	ldr	r2, [pc, #652]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800486c:	430b      	orrs	r3, r1
 800486e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004872:	e003      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004878:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800487c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800488a:	2300      	movs	r3, #0
 800488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d04e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048a4:	d02e      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048aa:	d827      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80048ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80048ae:	d02b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80048b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80048b2:	d823      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80048b4:	2b80      	cmp	r3, #128	@ 0x80
 80048b6:	d017      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80048b8:	2b80      	cmp	r3, #128	@ 0x80
 80048ba:	d81f      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d007      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80048c4:	e01a      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c6:	4b8c      	ldr	r3, [pc, #560]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	4a8b      	ldr	r2, [pc, #556]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048d2:	e01a      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d8:	3308      	adds	r3, #8
 80048da:	4618      	mov	r0, r3
 80048dc:	f002 f924 	bl	8006b28 <RCCEx_PLL2_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048e6:	e010      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ec:	3330      	adds	r3, #48	@ 0x30
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 f9b2 	bl	8006c58 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048fa:	e006      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004902:	e002      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004912:	4b79      	ldr	r3, [pc, #484]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004918:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800491c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004920:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004924:	4974      	ldr	r1, [pc, #464]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004932:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	2300      	movs	r3, #0
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
 8004948:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d055      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004956:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800495a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800495e:	d031      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004960:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004964:	d82a      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496a:	d02d      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004970:	d824      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004972:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004976:	d029      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004978:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800497c:	d81e      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004982:	d011      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004988:	d818      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800498e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004992:	d113      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004998:	3308      	adds	r3, #8
 800499a:	4618      	mov	r0, r3
 800499c:	f002 f8c4 	bl	8006b28 <RCCEx_PLL2_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80049a6:	e014      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ac:	3330      	adds	r3, #48	@ 0x30
 80049ae:	4618      	mov	r0, r3
 80049b0:	f002 f952 	bl	8006c58 <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80049ba:	e00a      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049c2:	e006      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80049c4:	bf00      	nop
 80049c6:	e004      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80049d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10d      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80049da:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80049dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80049e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049ec:	4942      	ldr	r1, [pc, #264]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049fa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	2100      	movs	r1, #0
 8004a08:	61b9      	str	r1, [r7, #24]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a14:	460b      	mov	r3, r1
 8004a16:	4313      	orrs	r3, r2
 8004a18:	d03c      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d81b      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a67 	.word	0x08004a67
 8004a30:	08004a3d 	.word	0x08004a3d
 8004a34:	08004a4b 	.word	0x08004a4b
 8004a38:	08004a67 	.word	0x08004a67
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	4a2d      	ldr	r2, [pc, #180]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a46:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004a48:	e00e      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a4e:	3308      	adds	r3, #8
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 f869 	bl	8006b28 <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004a70:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a82:	491d      	ldr	r1, [pc, #116]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	6139      	str	r1, [r7, #16]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d03c      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d00e      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac2:	d815      	bhi.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8004ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004acc:	d110      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ace:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ada:	e010      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f002 f820 	bl	8006b28 <RCCEx_PLL2_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004aee:	e006      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004af6:	e002      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8004af8:	44020c00 	.word	0x44020c00
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10d      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004b06:	4b3d      	ldr	r3, [pc, #244]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b18:	4938      	ldr	r1, [pc, #224]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b26:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	2100      	movs	r1, #0
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d038      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b4e:	2b30      	cmp	r3, #48	@ 0x30
 8004b50:	d01b      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8004b52:	2b30      	cmp	r3, #48	@ 0x30
 8004b54:	d815      	bhi.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d002      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d007      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8004b5e:	e010      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b60:	4b26      	ldr	r3, [pc, #152]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	4a25      	ldr	r2, [pc, #148]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b6a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b6c:	e00e      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b72:	3330      	adds	r3, #48	@ 0x30
 8004b74:	4618      	mov	r0, r3
 8004b76:	f002 f86f 	bl	8006c58 <RCCEx_PLL3_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004b80:	e004      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8004b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b9a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ba2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ba6:	4915      	ldr	r1, [pc, #84]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bb4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6039      	str	r1, [r7, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004be6:	4905      	ldr	r1, [pc, #20]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004bee:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	37e8      	adds	r7, #232	@ 0xe8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfc:	44020c00 	.word	0x44020c00

08004c00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b08b      	sub	sp, #44	@ 0x2c
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004c08:	4bae      	ldr	r3, [pc, #696]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c10:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c12:	4bac      	ldr	r3, [pc, #688]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004c1c:	4ba9      	ldr	r3, [pc, #676]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c26:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004c28:	4ba6      	ldr	r3, [pc, #664]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c34:	4ba3      	ldr	r3, [pc, #652]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	ee07 3a90 	vmov	s15, r3
 8004c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8126 	beq.w	8004ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d053      	beq.n	8004d06 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d86f      	bhi.n	8004d44 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d02b      	beq.n	8004cc8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004c70:	e068      	b.n	8004d44 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c72:	4b94      	ldr	r3, [pc, #592]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	08db      	lsrs	r3, r3, #3
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	4a92      	ldr	r2, [pc, #584]	@ (8004ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c82:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004caa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004cc6:	e068      	b.n	8004d9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ce8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004cec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d04:	e049      	b.n	8004d9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d10:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004d14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d26:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004d42:	e02a      	b.n	8004d9a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d44:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d78:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d7c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004ecc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004d98:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004da6:	d121      	bne.n	8004dec <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004da8:	4b46      	ldr	r3, [pc, #280]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004db4:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db8:	0a5b      	lsrs	r3, r3, #9
 8004dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004dc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004dce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dda:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e006      	b.n	8004df2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e002      	b.n	8004df2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004df2:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dfe:	d121      	bne.n	8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004e00:	4b30      	ldr	r3, [pc, #192]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d017      	beq.n	8004e3c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004e26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	e006      	b.n	8004e4a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e002      	b.n	8004e4a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e56:	d121      	bne.n	8004e9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004e58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e64:	4b17      	ldr	r3, [pc, #92]	@ (8004ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004e7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004e92:	e010      	b.n	8004eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	e00c      	b.n	8004eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
}
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	372c      	adds	r7, #44	@ 0x2c
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	44020c00 	.word	0x44020c00
 8004ec8:	03d09000 	.word	0x03d09000
 8004ecc:	46000000 	.word	0x46000000
 8004ed0:	4a742400 	.word	0x4a742400
 8004ed4:	4bbebc20 	.word	0x4bbebc20

08004ed8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b08b      	sub	sp, #44	@ 0x2c
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004ee0:	4bae      	ldr	r3, [pc, #696]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004eea:	4bac      	ldr	r3, [pc, #688]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004ef4:	4ba9      	ldr	r3, [pc, #676]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004efe:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004f00:	4ba6      	ldr	r3, [pc, #664]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004f0c:	4ba3      	ldr	r3, [pc, #652]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	08db      	lsrs	r3, r3, #3
 8004f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f24:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8126 	beq.w	800517c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d053      	beq.n	8004fde <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d86f      	bhi.n	800501c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d003      	beq.n	8004f4a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d02b      	beq.n	8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004f48:	e068      	b.n	800501c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f4a:	4b94      	ldr	r3, [pc, #592]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	08db      	lsrs	r3, r3, #3
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	4a92      	ldr	r2, [pc, #584]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f82:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004f9e:	e068      	b.n	8005072 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004faa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fc0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004fdc:	e049      	b.n	8005072 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ffe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800500e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800501a:	e02a      	b.n	8005072 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800501c:	4b5f      	ldr	r3, [pc, #380]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a5e      	ldr	r2, [pc, #376]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005050:	ed97 6a04 	vldr	s12, [r7, #16]
 8005054:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005060:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005070:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005072:	4b4a      	ldr	r3, [pc, #296]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800507a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800507e:	d121      	bne.n	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005080:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800508c:	4b43      	ldr	r3, [pc, #268]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	0a5b      	lsrs	r3, r3, #9
 8005092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800509e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80050a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80050aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e006      	b.n	80050ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e002      	b.n	80050ca <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050ca:	4b34      	ldr	r3, [pc, #208]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050d6:	d121      	bne.n	800511c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80050d8:	4b30      	ldr	r3, [pc, #192]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d017      	beq.n	8005114 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80050e4:	4b2d      	ldr	r3, [pc, #180]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80050f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80050fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e006      	b.n	8005122 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	e002      	b.n	8005122 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005122:	4b1e      	ldr	r3, [pc, #120]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800512a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800512e:	d121      	bne.n	8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005130:	4b1a      	ldr	r3, [pc, #104]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d017      	beq.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800514e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005152:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005156:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800515a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800515e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005162:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800516a:	e010      	b.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	e00c      	b.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
}
 800517a:	e008      	b.n	800518e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
}
 800518e:	bf00      	nop
 8005190:	372c      	adds	r7, #44	@ 0x2c
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	44020c00 	.word	0x44020c00
 80051a0:	03d09000 	.word	0x03d09000
 80051a4:	46000000 	.word	0x46000000
 80051a8:	4a742400 	.word	0x4a742400
 80051ac:	4bbebc20 	.word	0x4bbebc20

080051b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b08b      	sub	sp, #44	@ 0x2c
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80051b8:	4bae      	ldr	r3, [pc, #696]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80051c2:	4bac      	ldr	r3, [pc, #688]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80051cc:	4ba9      	ldr	r3, [pc, #676]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80051d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051e4:	4ba3      	ldr	r3, [pc, #652]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8126 	beq.w	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d053      	beq.n	80052b6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d86f      	bhi.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d003      	beq.n	8005222 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d02b      	beq.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005220:	e068      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005222:	4b94      	ldr	r3, [pc, #592]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	08db      	lsrs	r3, r3, #3
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	4a92      	ldr	r2, [pc, #584]	@ (8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a04 	vldr	s12, [r7, #16]
 800525a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005276:	e068      	b.n	800534a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005294:	ed97 6a04 	vldr	s12, [r7, #16]
 8005298:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800529c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052b4:	e049      	b.n	800534a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80052c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80052d6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052f2:	e02a      	b.n	800534a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052f4:	4b5f      	ldr	r3, [pc, #380]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	ee07 3a90 	vmov	s15, r3
 800530c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005328:	ed97 6a04 	vldr	s12, [r7, #16]
 800532c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800547c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800533c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005348:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800534a:	4b4a      	ldr	r3, [pc, #296]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005356:	d121      	bne.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005358:	4b46      	ldr	r3, [pc, #280]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005364:	4b43      	ldr	r3, [pc, #268]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005368:	0a5b      	lsrs	r3, r3, #9
 800536a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800537e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e006      	b.n	80053a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e002      	b.n	80053a2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053a2:	4b34      	ldr	r3, [pc, #208]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ae:	d121      	bne.n	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80053b0:	4b30      	ldr	r3, [pc, #192]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d017      	beq.n	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80053bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80053d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e006      	b.n	80053fa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	e002      	b.n	80053fa <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005406:	d121      	bne.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005408:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005414:	4b17      	ldr	r3, [pc, #92]	@ (8005474 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800542a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800542e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800543a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005442:	e010      	b.n	8005466 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
}
 800544a:	e00c      	b.n	8005466 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	609a      	str	r2, [r3, #8]
}
 8005452:	e008      	b.n	8005466 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
}
 8005466:	bf00      	nop
 8005468:	372c      	adds	r7, #44	@ 0x2c
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	44020c00 	.word	0x44020c00
 8005478:	03d09000 	.word	0x03d09000
 800547c:	46000000 	.word	0x46000000
 8005480:	4a742400 	.word	0x4a742400
 8005484:	4bbebc20 	.word	0x4bbebc20

08005488 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b08f      	sub	sp, #60	@ 0x3c
 800548c:	af00      	add	r7, sp, #0
 800548e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005496:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800549a:	4321      	orrs	r1, r4
 800549c:	d150      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800549e:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80054aa:	4b23      	ldr	r3, [pc, #140]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d108      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054be:	d104      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80054c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c6:	f001 bb20 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80054ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054d8:	d108      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e0:	d104      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80054e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e8:	f001 bb0f 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80054ec:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054f8:	d119      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005500:	d115      	bne.n	800552e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800550a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800550e:	d30a      	bcc.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005510:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800551a:	4a08      	ldr	r2, [pc, #32]	@ (800553c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005522:	f001 baf2 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800552a:	f001 baee 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
 8005532:	f001 baea 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005536:	bf00      	nop
 8005538:	44020c00 	.word	0x44020c00
 800553c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005544:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005548:	ea50 0104 	orrs.w	r1, r0, r4
 800554c:	f000 8615 	beq.w	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005554:	2801      	cmp	r0, #1
 8005556:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800555a:	f081 82d3 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800555e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005562:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005566:	ea50 0104 	orrs.w	r1, r0, r4
 800556a:	f000 84d8 	beq.w	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800556e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005572:	2801      	cmp	r0, #1
 8005574:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005578:	f081 82c4 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800557c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005580:	f1a1 0410 	sub.w	r4, r1, #16
 8005584:	ea50 0104 	orrs.w	r1, r0, r4
 8005588:	f001 8288 	beq.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800558c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005590:	2801      	cmp	r0, #1
 8005592:	f171 0110 	sbcs.w	r1, r1, #16
 8005596:	f081 82b5 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800559a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800559e:	f1a1 0408 	sub.w	r4, r1, #8
 80055a2:	ea50 0104 	orrs.w	r1, r0, r4
 80055a6:	f001 81fe 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80055aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ae:	2801      	cmp	r0, #1
 80055b0:	f171 0108 	sbcs.w	r1, r1, #8
 80055b4:	f081 82a6 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055bc:	1f0c      	subs	r4, r1, #4
 80055be:	ea50 0104 	orrs.w	r1, r0, r4
 80055c2:	f000 8753 	beq.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80055c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ca:	2801      	cmp	r0, #1
 80055cc:	f171 0104 	sbcs.w	r1, r1, #4
 80055d0:	f081 8298 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d8:	1e8c      	subs	r4, r1, #2
 80055da:	ea50 0104 	orrs.w	r1, r0, r4
 80055de:	f001 8173 	beq.w	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80055e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e6:	2801      	cmp	r0, #1
 80055e8:	f171 0102 	sbcs.w	r1, r1, #2
 80055ec:	f081 828a 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f4:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80055f8:	4321      	orrs	r1, r4
 80055fa:	f001 80fe 	beq.w	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80055fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005602:	4ccb      	ldr	r4, [pc, #812]	@ (8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005604:	42a0      	cmp	r0, r4
 8005606:	f171 0100 	sbcs.w	r1, r1, #0
 800560a:	f081 827b 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800560e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005612:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005616:	4321      	orrs	r1, r4
 8005618:	f001 8076 	beq.w	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800561c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005620:	4cc4      	ldr	r4, [pc, #784]	@ (8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005622:	42a0      	cmp	r0, r4
 8005624:	f171 0100 	sbcs.w	r1, r1, #0
 8005628:	f081 826c 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800562c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005630:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005634:	4321      	orrs	r1, r4
 8005636:	f000 87b5 	beq.w	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800563a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800563e:	4cbe      	ldr	r4, [pc, #760]	@ (8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005640:	42a0      	cmp	r0, r4
 8005642:	f171 0100 	sbcs.w	r1, r1, #0
 8005646:	f081 825d 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800564a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800564e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005652:	4321      	orrs	r1, r4
 8005654:	f000 8738 	beq.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565c:	4cb7      	ldr	r4, [pc, #732]	@ (800593c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800565e:	42a0      	cmp	r0, r4
 8005660:	f171 0100 	sbcs.w	r1, r1, #0
 8005664:	f081 824e 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800566c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005670:	4321      	orrs	r1, r4
 8005672:	f001 81cd 	beq.w	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567a:	4cb1      	ldr	r4, [pc, #708]	@ (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800567c:	42a0      	cmp	r0, r4
 800567e:	f171 0100 	sbcs.w	r1, r1, #0
 8005682:	f081 823f 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800568a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800568e:	4321      	orrs	r1, r4
 8005690:	f000 80d9 	beq.w	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005698:	4caa      	ldr	r4, [pc, #680]	@ (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 800569a:	42a0      	cmp	r0, r4
 800569c:	f171 0100 	sbcs.w	r1, r1, #0
 80056a0:	f081 8230 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80056ac:	4321      	orrs	r1, r4
 80056ae:	f000 83da 	beq.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80056b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b6:	4ca4      	ldr	r4, [pc, #656]	@ (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	f171 0100 	sbcs.w	r1, r1, #0
 80056be:	f081 8221 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80056ca:	4321      	orrs	r1, r4
 80056cc:	f000 8627 	beq.w	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80056d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d4:	4c9d      	ldr	r4, [pc, #628]	@ (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80056d6:	42a0      	cmp	r0, r4
 80056d8:	f171 0100 	sbcs.w	r1, r1, #0
 80056dc:	f081 8212 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80056e8:	4321      	orrs	r1, r4
 80056ea:	f000 857a 	beq.w	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80056ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f2:	4c97      	ldr	r4, [pc, #604]	@ (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	f171 0100 	sbcs.w	r1, r1, #0
 80056fa:	f081 8203 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005702:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005706:	4321      	orrs	r1, r4
 8005708:	f000 84fb 	beq.w	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800570c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005710:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005714:	f171 0100 	sbcs.w	r1, r1, #0
 8005718:	f081 81f4 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800571c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005720:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005724:	4321      	orrs	r1, r4
 8005726:	f000 84a9 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800572a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800572e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005732:	42a0      	cmp	r0, r4
 8005734:	f171 0100 	sbcs.w	r1, r1, #0
 8005738:	f081 81e4 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800573c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005740:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005744:	4321      	orrs	r1, r4
 8005746:	f000 8456 	beq.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800574a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005752:	42a0      	cmp	r0, r4
 8005754:	f171 0100 	sbcs.w	r1, r1, #0
 8005758:	f081 81d4 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800575c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005760:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005764:	4321      	orrs	r1, r4
 8005766:	f000 8403 	beq.w	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800576a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800576e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005772:	42a0      	cmp	r0, r4
 8005774:	f171 0100 	sbcs.w	r1, r1, #0
 8005778:	f081 81c4 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800577c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005780:	2821      	cmp	r0, #33	@ 0x21
 8005782:	f171 0100 	sbcs.w	r1, r1, #0
 8005786:	d255      	bcs.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578c:	4301      	orrs	r1, r0
 800578e:	f001 81b9 	beq.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005796:	1e42      	subs	r2, r0, #1
 8005798:	f141 33ff 	adc.w	r3, r1, #4294967295
 800579c:	2a20      	cmp	r2, #32
 800579e:	f173 0100 	sbcs.w	r1, r3, #0
 80057a2:	f081 81af 	bcs.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80057a6:	2a1f      	cmp	r2, #31
 80057a8:	f201 81ac 	bhi.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80057ac:	a101      	add	r1, pc, #4	@ (adr r1, 80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80057ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	0800588b 	.word	0x0800588b
 80057b8:	08005989 	.word	0x08005989
 80057bc:	08006b05 	.word	0x08006b05
 80057c0:	08005a49 	.word	0x08005a49
 80057c4:	08006b05 	.word	0x08006b05
 80057c8:	08006b05 	.word	0x08006b05
 80057cc:	08006b05 	.word	0x08006b05
 80057d0:	08005b19 	.word	0x08005b19
 80057d4:	08006b05 	.word	0x08006b05
 80057d8:	08006b05 	.word	0x08006b05
 80057dc:	08006b05 	.word	0x08006b05
 80057e0:	08006b05 	.word	0x08006b05
 80057e4:	08006b05 	.word	0x08006b05
 80057e8:	08006b05 	.word	0x08006b05
 80057ec:	08006b05 	.word	0x08006b05
 80057f0:	08005bfd 	.word	0x08005bfd
 80057f4:	08006b05 	.word	0x08006b05
 80057f8:	08006b05 	.word	0x08006b05
 80057fc:	08006b05 	.word	0x08006b05
 8005800:	08006b05 	.word	0x08006b05
 8005804:	08006b05 	.word	0x08006b05
 8005808:	08006b05 	.word	0x08006b05
 800580c:	08006b05 	.word	0x08006b05
 8005810:	08006b05 	.word	0x08006b05
 8005814:	08006b05 	.word	0x08006b05
 8005818:	08006b05 	.word	0x08006b05
 800581c:	08006b05 	.word	0x08006b05
 8005820:	08006b05 	.word	0x08006b05
 8005824:	08006b05 	.word	0x08006b05
 8005828:	08006b05 	.word	0x08006b05
 800582c:	08006b05 	.word	0x08006b05
 8005830:	08005cd3 	.word	0x08005cd3
 8005834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005838:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800583c:	430b      	orrs	r3, r1
 800583e:	f000 82b3 	beq.w	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005842:	f001 b95f 	b.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005846:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005848:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005858:	f107 0320 	add.w	r3, r7, #32
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f9cf 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005866:	f001 b950 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2b40      	cmp	r3, #64	@ 0x40
 800586e:	d108      	bne.n	8005882 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fb2f 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800587e:	f001 b944 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005886:	f001 b940 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800588a:	4b32      	ldr	r3, [pc, #200]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800588c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800589c:	f7fd ffc4 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80058a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80058a2:	f001 b932 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80058a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b2:	d10a      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ba:	f107 0314 	add.w	r3, r7, #20
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fb0a 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c8:	e05c      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80058ca:	4b22      	ldr	r3, [pc, #136]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058d6:	d10a      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d107      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fc64 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ec:	e04a      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80058ee:	4b19      	ldr	r3, [pc, #100]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d10c      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d109      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005900:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	4a13      	ldr	r2, [pc, #76]	@ (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	637b      	str	r3, [r7, #52]	@ 0x34
 8005912:	e037      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005914:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005920:	d11e      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005924:	2b04      	cmp	r3, #4
 8005926:	d11b      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8005928:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	e02a      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800592e:	bf00      	nop
 8005930:	40000001 	.word	0x40000001
 8005934:	20000001 	.word	0x20000001
 8005938:	10000001 	.word	0x10000001
 800593c:	08000001 	.word	0x08000001
 8005940:	04000001 	.word	0x04000001
 8005944:	00400001 	.word	0x00400001
 8005948:	00200001 	.word	0x00200001
 800594c:	00040001 	.word	0x00040001
 8005950:	00020001 	.word	0x00020001
 8005954:	44020c00 	.word	0x44020c00
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005960:	4ba3      	ldr	r3, [pc, #652]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d106      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	2b05      	cmp	r3, #5
 8005972:	d103      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8005974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
 800597a:	e003      	b.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005980:	f001 b8c3 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005984:	f001 b8c1 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005988:	4b99      	ldr	r3, [pc, #612]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800598a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800598e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005992:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800599a:	f7fd ff2f 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 800599e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80059a0:	f001 b8b3 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80059a4:	4b92      	ldr	r3, [pc, #584]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059b0:	d10a      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d107      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b8:	f107 0314 	add.w	r3, r7, #20
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fa8b 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c6:	e03d      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d108      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fbec 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059dc:	f001 b895 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80059e0:	4b83      	ldr	r3, [pc, #524]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	2b18      	cmp	r3, #24
 80059f0:	d109      	bne.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059f2:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	4a7d      	ldr	r2, [pc, #500]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a04:	e01e      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005a06:	4b7a      	ldr	r3, [pc, #488]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d102      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8005a1a:	4b77      	ldr	r3, [pc, #476]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1e:	e011      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005a20:	4b73      	ldr	r3, [pc, #460]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	2b28      	cmp	r3, #40	@ 0x28
 8005a32:	d103      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8005a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3a:	e003      	b.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a40:	f001 b863 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a44:	f001 b861 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005a48:	4b69      	ldr	r3, [pc, #420]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a4e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005a52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fd fecf 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005a5e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a60:	f001 b853 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005a64:	4b62      	ldr	r3, [pc, #392]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a70:	d10a      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fa2b 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a86:	e045      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005a88:	4b59      	ldr	r3, [pc, #356]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a94:	d10a      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2b80      	cmp	r3, #128	@ 0x80
 8005a9a:	d107      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fb85 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aaa:	e033      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005aac:	4b50      	ldr	r3, [pc, #320]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005abc:	d109      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005abe:	4b4c      	ldr	r3, [pc, #304]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	08db      	lsrs	r3, r3, #3
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005aca:	fa22 f303 	lsr.w	r3, r2, r3
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad0:	e020      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005ad2:	4b47      	ldr	r3, [pc, #284]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae6:	d102      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8005ae8:	4b43      	ldr	r3, [pc, #268]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aec:	e012      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005aee:	4b40      	ldr	r3, [pc, #256]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d107      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005b02:	d103      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8005b04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b10:	f000 bffb 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005b14:	f000 bff9 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005b18:	4b35      	ldr	r3, [pc, #212]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b1e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005b22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7fd fe67 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005b2e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b30:	f000 bfeb 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005b34:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b40:	d10b      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b48:	d107      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff f9c2 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b58:	e047      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005b5a:	4b25      	ldr	r3, [pc, #148]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b66:	d10b      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b6e:	d107      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b70:	f107 0308 	add.w	r3, r7, #8
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fb1b 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7e:	e034      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005b80:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d10d      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b92:	d109      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b94:	4b16      	ldr	r3, [pc, #88]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	4a15      	ldr	r2, [pc, #84]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ba6:	e020      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005ba8:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc2:	e012      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005bd8:	d103      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8005bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be0:	e003      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005be6:	f000 bf90 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005bea:	f000 bf8e 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005bee:	bf00      	nop
 8005bf0:	44020c00 	.word	0x44020c00
 8005bf4:	03d09000 	.word	0x03d09000
 8005bf8:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005bfc:	4ba5      	ldr	r3, [pc, #660]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c02:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005c06:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c0e:	f7fd fdf5 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005c12:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c14:	f000 bf79 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005c18:	4b9e      	ldr	r3, [pc, #632]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c24:	d10b      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2c:	d107      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2e:	f107 0314 	add.w	r3, r7, #20
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f950 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c3c:	e047      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005c3e:	4b95      	ldr	r3, [pc, #596]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c4a:	d10b      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c52:	d107      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff faa9 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c62:	e034      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005c64:	4b8b      	ldr	r3, [pc, #556]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c76:	d109      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c78:	4b86      	ldr	r3, [pc, #536]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	08db      	lsrs	r3, r3, #3
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	4a85      	ldr	r2, [pc, #532]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8a:	e020      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005c8c:	4b81      	ldr	r3, [pc, #516]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ca0:	d102      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8005ca2:	4b7e      	ldr	r3, [pc, #504]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca6:	e012      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005ca8:	4b7a      	ldr	r3, [pc, #488]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005cbc:	d103      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc4:	e003      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cca:	f000 bf1e 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005cce:	f000 bf1c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005cd2:	4b70      	ldr	r3, [pc, #448]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cd8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005cdc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7fd fd8a 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005ce8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cea:	f000 bf0e 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005cee:	4b69      	ldr	r3, [pc, #420]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cfa:	d10b      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d02:	d107      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff f8e5 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d12:	e047      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005d14:	4b5f      	ldr	r3, [pc, #380]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d20:	d10b      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d28:	d107      	bne.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fa3e 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d38:	e034      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005d3a:	4b56      	ldr	r3, [pc, #344]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d10d      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8005d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d48:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d4e:	4b51      	ldr	r3, [pc, #324]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	4a4f      	ldr	r2, [pc, #316]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d60:	e020      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005d62:	4b4c      	ldr	r3, [pc, #304]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8005d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d76:	d102      	bne.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8005d78:	4b48      	ldr	r3, [pc, #288]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7c:	e012      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005d7e:	4b45      	ldr	r3, [pc, #276]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005d92:	d103      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005d94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	e003      	b.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005da0:	f000 beb3 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005da4:	f000 beb1 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005da8:	4b3a      	ldr	r3, [pc, #232]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005db2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005dba:	f7fd fd4b 	bl	8003854 <HAL_RCC_GetPCLK3Freq>
 8005dbe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005dc0:	f000 bea3 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dca:	d108      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff f881 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dda:	f000 be96 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de4:	d108      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de6:	f107 0308 	add.w	r3, r7, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f9e0 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005df4:	f000 be89 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005df8:	4b26      	ldr	r3, [pc, #152]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d10d      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e0a:	d109      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e0c:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	4a20      	ldr	r2, [pc, #128]	@ (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1e:	e020      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005e20:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e34:	d102      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8005e36:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e3a:	e012      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e3c:	4b15      	ldr	r3, [pc, #84]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d107      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e50:	d103      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e5e:	f000 be54 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e62:	f000 be52 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005e66:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005e78:	f7fd fca4 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8005e7c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005e7e:	f000 be44 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e88:	f7fd fb70 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8005e8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005e8e:	f000 be3c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e92:	bf00      	nop
 8005e94:	44020c00 	.word	0x44020c00
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d108      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f814 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb4:	f000 be29 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005eb8:	4b9f      	ldr	r3, [pc, #636]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d102      	bne.n	8005ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8005ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8005ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed0:	e023      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005ed2:	4b99      	ldr	r3, [pc, #612]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d109      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ee4:	4b94      	ldr	r3, [pc, #592]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	4a94      	ldr	r2, [pc, #592]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef6:	e010      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f04:	d105      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d102      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8005f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f10:	e003      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f16:	f000 bdf8 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f1a:	f000 bdf6 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005f1e:	4b86      	ldr	r3, [pc, #536]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005f2a:	4b83      	ldr	r3, [pc, #524]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d106      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8005f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f44:	e012      	b.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005f46:	4b7c      	ldr	r3, [pc, #496]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f54:	d106      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d103      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8005f5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f62:	e003      	b.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005f68:	f000 bdcf 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f6c:	f000 bdcd 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f70:	4b71      	ldr	r3, [pc, #452]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f82:	f7fd fc3b 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8005f86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f88:	f000 bdbf 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f92:	d108      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff f909 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fa2:	f000 bdb2 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005fa6:	4b64      	ldr	r3, [pc, #400]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d10d      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fb8:	d109      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fba:	4b5f      	ldr	r3, [pc, #380]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fcc:	e011      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005fce:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fda:	d106      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fe2:	d102      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8005fe4:	4b57      	ldr	r3, [pc, #348]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe8:	e003      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fee:	f000 bd8c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005ff2:	f000 bd8a 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005ff6:	4b50      	ldr	r3, [pc, #320]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ffc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006000:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006008:	f7fd fbf8 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 800600c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800600e:	f000 bd7c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006018:	d108      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff f8c6 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006028:	f000 bd6f 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800602c:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d10d      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800603e:	d109      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006040:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	4a3d      	ldr	r2, [pc, #244]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	637b      	str	r3, [r7, #52]	@ 0x34
 8006052:	e011      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006054:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800605c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006060:	d106      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006068:	d102      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 800606a:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 800606c:	637b      	str	r3, [r7, #52]	@ 0x34
 800606e:	e003      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006074:	f000 bd49 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006078:	f000 bd47 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800607c:	4b2e      	ldr	r3, [pc, #184]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800607e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006082:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800608e:	f7fd fbe1 	bl	8003854 <HAL_RCC_GetPCLK3Freq>
 8006092:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006094:	f000 bd39 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800609e:	d108      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff f883 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ae:	f000 bd2c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80060b2:	4b21      	ldr	r3, [pc, #132]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d10d      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c4:	d109      	bne.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	08db      	lsrs	r3, r3, #3
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060d8:	e011      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e6:	d106      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060ee:	d102      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80060f0:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f4:	e003      	b.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060fa:	f000 bd06 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80060fe:	f000 bd04 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006108:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800610c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006114:	f7fd fb72 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8006118:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800611a:	f000 bcf6 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006124:	d110      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff f840 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006134:	f000 bce9 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006138:	44020c00 	.word	0x44020c00
 800613c:	017d7840 	.word	0x017d7840
 8006140:	03d09000 	.word	0x03d09000
 8006144:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006148:	4ba4      	ldr	r3, [pc, #656]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d10e      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800615a:	d10a      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800615c:	4b9f      	ldr	r3, [pc, #636]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	08db      	lsrs	r3, r3, #3
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	4a9e      	ldr	r2, [pc, #632]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800616e:	f000 bccc 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006176:	f000 bcc8 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800617a:	4b98      	ldr	r3, [pc, #608]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800617c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006180:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006184:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800618c:	f7fd fb62 	bl	8003854 <HAL_RCC_GetPCLK3Freq>
 8006190:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006192:	f000 bcba 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800619c:	d108      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff f804 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ac:	f000 bcad 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80061b0:	4b8a      	ldr	r3, [pc, #552]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d10e      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061c2:	d10a      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061c4:	4b85      	ldr	r3, [pc, #532]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	4a84      	ldr	r2, [pc, #528]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
 80061d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d6:	f000 bc98 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061de:	f000 bc94 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80061e2:	4b7e      	ldr	r3, [pc, #504]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061ec:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80061f4:	d056      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80061fc:	f200 808b 	bhi.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d03e      	beq.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620e:	f200 8082 	bhi.w	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006218:	d027      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006220:	d879      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006228:	d017      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800622a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006230:	d871      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800623e:	d004      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006240:	e069      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006242:	f7fd fb07 	bl	8003854 <HAL_RCC_GetPCLK3Freq>
 8006246:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006248:	e068      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624a:	f107 0314 	add.w	r3, r7, #20
 800624e:	4618      	mov	r0, r3
 8006250:	f7fe fe42 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006258:	e060      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800625a:	f107 0308 	add.w	r3, r7, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe ffa6 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006268:	e058      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800626a:	4b5c      	ldr	r3, [pc, #368]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800626c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d103      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800627e:	e04d      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006284:	e04a      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006286:	4b55      	ldr	r3, [pc, #340]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800628c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006294:	d103      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 8006296:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800629c:	e03e      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80062a2:	e03b      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062a4:	4b4d      	ldr	r3, [pc, #308]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062b0:	4b4a      	ldr	r3, [pc, #296]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d10c      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062c2:	4b46      	ldr	r3, [pc, #280]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	4a44      	ldr	r2, [pc, #272]	@ (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d4:	e01e      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062d6:	4b41      	ldr	r3, [pc, #260]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062e2:	d106      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ea:	d102      	bne.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80062ec:	4b3d      	ldr	r3, [pc, #244]	@ (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80062ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f0:	e010      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062f2:	4b3a      	ldr	r3, [pc, #232]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062fe:	d106      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006306:	d102      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006308:	4b37      	ldr	r3, [pc, #220]	@ (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800630a:	637b      	str	r3, [r7, #52]	@ 0x34
 800630c:	e002      	b.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006312:	e003      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006314:	e002      	b.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800631a:	bf00      	nop
          }
        }
        break;
 800631c:	e3f5      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800631e:	4b2f      	ldr	r3, [pc, #188]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006320:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006324:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006330:	d05f      	beq.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006338:	f200 8094 	bhi.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006342:	d03f      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800634a:	f200 808b 	bhi.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006354:	d028      	beq.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800635c:	f200 8082 	bhi.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006366:	d017      	beq.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636e:	d879      	bhi.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637c:	d004      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800637e:	e071      	b.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fd fa3c 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8006384:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006386:	e070      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fda3 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006396:	e068      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe ff07 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80063a6:	e060      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80063aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d103      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80063bc:	e055      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80063c2:	e052      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80063c4:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80063c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063d2:	d10b      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80063d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80063da:	e046      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80063dc:	44020c00 	.word	0x44020c00
 80063e0:	03d09000 	.word	0x03d09000
 80063e4:	003d0900 	.word	0x003d0900
 80063e8:	017d7840 	.word	0x017d7840
              frequency = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80063f0:	e03b      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063f2:	4bae      	ldr	r3, [pc, #696]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80063f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063fe:	4bab      	ldr	r3, [pc, #684]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d10c      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800640a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006410:	4ba6      	ldr	r3, [pc, #664]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	08db      	lsrs	r3, r3, #3
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	4aa5      	ldr	r2, [pc, #660]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
 8006422:	e01e      	b.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006424:	4ba1      	ldr	r3, [pc, #644]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800642c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006430:	d106      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006438:	d102      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800643a:	4b9e      	ldr	r3, [pc, #632]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
 800643e:	e010      	b.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006440:	4b9a      	ldr	r3, [pc, #616]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800644c:	d106      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006454:	d102      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006456:	4b98      	ldr	r3, [pc, #608]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006458:	637b      	str	r3, [r7, #52]	@ 0x34
 800645a:	e002      	b.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006460:	e003      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006462:	e002      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006468:	bf00      	nop
          }
        }
        break;
 800646a:	e34e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800646c:	4b8f      	ldr	r3, [pc, #572]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800646e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006476:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006478:	4b8c      	ldr	r3, [pc, #560]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006484:	d105      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800648c:	4b8a      	ldr	r3, [pc, #552]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006490:	e33b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800649a:	f107 0320 	add.w	r3, r7, #32
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fbae 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064a8:	e32f      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b0:	d107      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b2:	f107 0314 	add.w	r3, r7, #20
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fd0e 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064c0:	e323      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064c6:	e320      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80064c8:	4b78      	ldr	r3, [pc, #480]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80064ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d860      	bhi.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	080064f5 	.word	0x080064f5
 80064e4:	08006505 	.word	0x08006505
 80064e8:	08006515 	.word	0x08006515
 80064ec:	08006525 	.word	0x08006525
 80064f0:	0800652b 	.word	0x0800652b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f4:	f107 0320 	add.w	r3, r7, #32
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe fb81 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006502:	e04e      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fce5 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006512:	e046      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fe49 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006522:	e03e      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006524:	4b65      	ldr	r3, [pc, #404]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006528:	e03b      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800652a:	4b60      	ldr	r3, [pc, #384]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800652c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006530:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006536:	4b5d      	ldr	r3, [pc, #372]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d10c      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006548:	4b58      	ldr	r3, [pc, #352]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	08db      	lsrs	r3, r3, #3
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	4a57      	ldr	r2, [pc, #348]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	637b      	str	r3, [r7, #52]	@ 0x34
 800655a:	e01e      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800655c:	4b53      	ldr	r3, [pc, #332]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006568:	d106      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006570:	d102      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006572:	4b50      	ldr	r3, [pc, #320]	@ (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34
 8006576:	e010      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006578:	4b4c      	ldr	r3, [pc, #304]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006584:	d106      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800658c:	d102      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800658e:	4b4a      	ldr	r3, [pc, #296]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
 8006592:	e002      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006598:	e003      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800659a:	e002      	b.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80065a0:	bf00      	nop
          }
        }
        break;
 80065a2:	e2b2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80065a4:	4b41      	ldr	r3, [pc, #260]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80065a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ae:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	f200 80a4 	bhi.w	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80065b8:	a201      	add	r2, pc, #4	@ (adr r2, 80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	08006645 	.word	0x08006645
 80065c4:	08006701 	.word	0x08006701
 80065c8:	08006701 	.word	0x08006701
 80065cc:	08006701 	.word	0x08006701
 80065d0:	08006701 	.word	0x08006701
 80065d4:	08006701 	.word	0x08006701
 80065d8:	08006701 	.word	0x08006701
 80065dc:	08006701 	.word	0x08006701
 80065e0:	08006655 	.word	0x08006655
 80065e4:	08006701 	.word	0x08006701
 80065e8:	08006701 	.word	0x08006701
 80065ec:	08006701 	.word	0x08006701
 80065f0:	08006701 	.word	0x08006701
 80065f4:	08006701 	.word	0x08006701
 80065f8:	08006701 	.word	0x08006701
 80065fc:	08006701 	.word	0x08006701
 8006600:	08006665 	.word	0x08006665
 8006604:	08006701 	.word	0x08006701
 8006608:	08006701 	.word	0x08006701
 800660c:	08006701 	.word	0x08006701
 8006610:	08006701 	.word	0x08006701
 8006614:	08006701 	.word	0x08006701
 8006618:	08006701 	.word	0x08006701
 800661c:	08006701 	.word	0x08006701
 8006620:	08006675 	.word	0x08006675
 8006624:	08006701 	.word	0x08006701
 8006628:	08006701 	.word	0x08006701
 800662c:	08006701 	.word	0x08006701
 8006630:	08006701 	.word	0x08006701
 8006634:	08006701 	.word	0x08006701
 8006638:	08006701 	.word	0x08006701
 800663c:	08006701 	.word	0x08006701
 8006640:	0800667b 	.word	0x0800667b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006644:	f107 0320 	add.w	r3, r7, #32
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe fad9 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006652:	e058      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fc3d 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006662:	e050      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fda1 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006672:	e048      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006674:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006678:	e045      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800667a:	4b0c      	ldr	r3, [pc, #48]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800667c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006680:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006684:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006686:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d116      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 8006692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006698:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	08db      	lsrs	r3, r3, #3
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	4a03      	ldr	r2, [pc, #12]	@ (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80066a4:	fa22 f303 	lsr.w	r3, r2, r3
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	e028      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80066ac:	44020c00 	.word	0x44020c00
 80066b0:	03d09000 	.word	0x03d09000
 80066b4:	003d0900 	.word	0x003d0900
 80066b8:	017d7840 	.word	0x017d7840
 80066bc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c0:	4b95      	ldr	r3, [pc, #596]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066cc:	d106      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80066ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d4:	d102      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80066d6:	4b91      	ldr	r3, [pc, #580]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80066d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066da:	e010      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066dc:	4b8e      	ldr	r3, [pc, #568]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066e8:	d106      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f0:	d102      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80066f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f6:	e002      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80066fe:	e002      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006704:	bf00      	nop
          }
        }
        break;
 8006706:	e200      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006708:	4b83      	ldr	r3, [pc, #524]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800670a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800670e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006712:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800671a:	d031      	beq.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006722:	d866      	bhi.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	2bc0      	cmp	r3, #192	@ 0xc0
 8006728:	d027      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800672a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672c:	2bc0      	cmp	r3, #192	@ 0xc0
 800672e:	d860      	bhi.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	2b80      	cmp	r3, #128	@ 0x80
 8006734:	d019      	beq.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d85a      	bhi.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d008      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006748:	e053      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800674a:	f107 0320 	add.w	r3, r7, #32
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fa56 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006758:	e04e      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675a:	f107 0314 	add.w	r3, r7, #20
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fbba 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006768:	e046      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676a:	f107 0308 	add.w	r3, r7, #8
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fd1e 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006778:	e03e      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800677a:	4b6a      	ldr	r3, [pc, #424]	@ (8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800677e:	e03b      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006780:	4b65      	ldr	r3, [pc, #404]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006786:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800678a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800678c:	4b62      	ldr	r3, [pc, #392]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b02      	cmp	r3, #2
 8006796:	d10c      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800679e:	4b5e      	ldr	r3, [pc, #376]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	08db      	lsrs	r3, r3, #3
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	4a5f      	ldr	r2, [pc, #380]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80067aa:	fa22 f303 	lsr.w	r3, r2, r3
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b0:	e01e      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067b2:	4b59      	ldr	r3, [pc, #356]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067be:	d106      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80067c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c6:	d102      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80067c8:	4b54      	ldr	r3, [pc, #336]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80067ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80067cc:	e010      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067ce:	4b52      	ldr	r3, [pc, #328]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067da:	d106      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e2:	d102      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067e4:	4b4e      	ldr	r3, [pc, #312]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80067f0:	e002      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80067f6:	bf00      	nop
          }
        }
        break;
 80067f8:	e187      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80067fa:	4b47      	ldr	r3, [pc, #284]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006800:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006804:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fd f80c 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8006810:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006812:	e17a      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006814:	4b40      	ldr	r3, [pc, #256]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800681c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006820:	d10b      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006828:	d107      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682a:	f107 0314 	add.w	r3, r7, #20
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fb52 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
 8006838:	e045      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006846:	d10b      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d107      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006850:	f107 0308 	add.w	r3, r7, #8
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe fcab 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	e032      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006860:	4b2d      	ldr	r3, [pc, #180]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d10d      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006872:	d109      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006874:	4b28      	ldr	r3, [pc, #160]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	08db      	lsrs	r3, r3, #3
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	4a2a      	ldr	r2, [pc, #168]	@ (8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
 8006884:	637b      	str	r3, [r7, #52]	@ 0x34
 8006886:	e01e      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006888:	4b23      	ldr	r3, [pc, #140]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006894:	d106      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800689c:	d102      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 800689e:	4b1f      	ldr	r3, [pc, #124]	@ (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a2:	e010      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80068a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b0:	d106      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80068b8:	d102      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80068ba:	4b19      	ldr	r3, [pc, #100]	@ (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80068bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80068be:	e002      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068c4:	e121      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80068c6:	e120      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80068c8:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80068ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d861      	bhi.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80068da:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f1 	.word	0x080068f1
 80068e4:	080068f9 	.word	0x080068f9
 80068e8:	08006909 	.word	0x08006909
 80068ec:	0800692d 	.word	0x0800692d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80068f0:	f7fc ff68 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80068f4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80068f6:	e055      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068f8:	f107 0320 	add.w	r3, r7, #32
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe f97f 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006906:	e04d      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006908:	f107 0314 	add.w	r3, r7, #20
 800690c:	4618      	mov	r0, r3
 800690e:	f7fe fae3 	bl	8004ed8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006916:	e045      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006918:	44020c00 	.word	0x44020c00
 800691c:	003d0900 	.word	0x003d0900
 8006920:	017d7840 	.word	0x017d7840
 8006924:	00bb8000 	.word	0x00bb8000
 8006928:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800692c:	4b79      	ldr	r3, [pc, #484]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800692e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006932:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006936:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006938:	4b76      	ldr	r3, [pc, #472]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d10c      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8006944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800694a:	4b72      	ldr	r3, [pc, #456]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	4a70      	ldr	r2, [pc, #448]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	637b      	str	r3, [r7, #52]	@ 0x34
 800695c:	e01e      	b.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800695e:	4b6d      	ldr	r3, [pc, #436]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800696a:	d106      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006972:	d102      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006974:	4b69      	ldr	r3, [pc, #420]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
 8006978:	e010      	b.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800697a:	4b66      	ldr	r3, [pc, #408]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006986:	d106      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800698e:	d102      	bne.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006990:	4b63      	ldr	r3, [pc, #396]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
 8006994:	e002      	b.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800699c:	e002      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80069a2:	bf00      	nop
          }
        }
        break;
 80069a4:	e0b1      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80069a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069ac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80069b2:	4b58      	ldr	r3, [pc, #352]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	e01f      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80069ce:	4b51      	ldr	r3, [pc, #324]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	d103      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80069e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ea:	e010      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80069ec:	4b49      	ldr	r3, [pc, #292]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f8:	d106      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	2b80      	cmp	r3, #128	@ 0x80
 80069fe:	d103      	bne.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8006a00:	f248 0312 	movw	r3, #32786	@ 0x8012
 8006a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a06:	e002      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006a0c:	e07d      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a0e:	e07c      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006a10:	4b40      	ldr	r3, [pc, #256]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a28:	d105      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8006a30:	4b3c      	ldr	r3, [pc, #240]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a34:	e031      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006a36:	4b37      	ldr	r3, [pc, #220]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a42:	d10a      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	2b10      	cmp	r3, #16
 8006a48:	d107      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a4a:	f107 0320 	add.w	r3, r7, #32
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe f8d6 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	e01f      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d106      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d103      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	e011      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006a76:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a84:	d106      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	2b30      	cmp	r3, #48	@ 0x30
 8006a8a:	d103      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8006a8c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006a98:	e037      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a9a:	e036      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006a9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aa2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006aa6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aae:	f107 0320 	add.w	r3, r7, #32
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe f8a4 	bl	8004c00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006abc:	e025      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aca:	d10a      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad2:	f107 0308 	add.w	r3, r7, #8
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fb6a 	bl	80051b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae0:	e00f      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aee:	d105      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2b30      	cmp	r3, #48	@ 0x30
 8006af4:	d102      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afa:	e002      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8006b00:	e003      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b08:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	373c      	adds	r7, #60	@ 0x3c
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}
 8006b14:	44020c00 	.word	0x44020c00
 8006b18:	03d09000 	.word	0x03d09000
 8006b1c:	003d0900 	.word	0x003d0900
 8006b20:	017d7840 	.word	0x017d7840
 8006b24:	02dc6c00 	.word	0x02dc6c00

08006b28 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006b30:	4b48      	ldr	r3, [pc, #288]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a47      	ldr	r2, [pc, #284]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b3c:	f7fa fb44 	bl	80011c8 <HAL_GetTick>
 8006b40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b42:	e008      	b.n	8006b56 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b44:	f7fa fb40 	bl	80011c8 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e07a      	b.n	8006c4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b56:	4b3f      	ldr	r3, [pc, #252]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006b62:	4b3c      	ldr	r3, [pc, #240]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6811      	ldr	r1, [r2, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6852      	ldr	r2, [r2, #4]
 8006b76:	0212      	lsls	r2, r2, #8
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	4936      	ldr	r1, [pc, #216]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	025b      	lsls	r3, r3, #9
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	061b      	lsls	r3, r3, #24
 8006bac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bb0:	4928      	ldr	r1, [pc, #160]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006bb6:	4b27      	ldr	r3, [pc, #156]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	f023 020c 	bic.w	r2, r3, #12
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	4924      	ldr	r1, [pc, #144]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006bc8:	4b22      	ldr	r3, [pc, #136]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	f023 0220 	bic.w	r2, r3, #32
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	491f      	ldr	r1, [pc, #124]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006bda:	4b1e      	ldr	r3, [pc, #120]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	491c      	ldr	r1, [pc, #112]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006be8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bec:	4a19      	ldr	r2, [pc, #100]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006bf4:	4b17      	ldr	r3, [pc, #92]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bfc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6a12      	ldr	r2, [r2, #32]
 8006c04:	00d2      	lsls	r2, r2, #3
 8006c06:	4913      	ldr	r1, [pc, #76]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006c0c:	4b11      	ldr	r3, [pc, #68]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	4a10      	ldr	r2, [pc, #64]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c12:	f043 0310 	orr.w	r3, r3, #16
 8006c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006c18:	4b0e      	ldr	r3, [pc, #56]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c24:	f7fa fad0 	bl	80011c8 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c2c:	f7fa facc 	bl	80011c8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e006      	b.n	8006c4c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006c3e:	4b05      	ldr	r3, [pc, #20]	@ (8006c54 <RCCEx_PLL2_Config+0x12c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0

}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	44020c00 	.word	0x44020c00

08006c58 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006c60:	4b48      	ldr	r3, [pc, #288]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a47      	ldr	r2, [pc, #284]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c6c:	f7fa faac 	bl	80011c8 <HAL_GetTick>
 8006c70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c72:	e008      	b.n	8006c86 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c74:	f7fa faa8 	bl	80011c8 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e07a      	b.n	8006d7c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c86:	4b3f      	ldr	r3, [pc, #252]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006c92:	4b3c      	ldr	r3, [pc, #240]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6811      	ldr	r1, [r2, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6852      	ldr	r2, [r2, #4]
 8006ca6:	0212      	lsls	r2, r2, #8
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	4936      	ldr	r1, [pc, #216]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	630b      	str	r3, [r1, #48]	@ 0x30
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	025b      	lsls	r3, r3, #9
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	061b      	lsls	r3, r3, #24
 8006cdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ce0:	4928      	ldr	r1, [pc, #160]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ce6:	4b27      	ldr	r3, [pc, #156]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	f023 020c 	bic.w	r2, r3, #12
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	4924      	ldr	r1, [pc, #144]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8006cf8:	4b22      	ldr	r3, [pc, #136]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfc:	f023 0220 	bic.w	r2, r3, #32
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	491f      	ldr	r1, [pc, #124]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	491c      	ldr	r1, [pc, #112]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006d18:	4b1a      	ldr	r3, [pc, #104]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	4a19      	ldr	r2, [pc, #100]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006d24:	4b17      	ldr	r3, [pc, #92]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d2c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6a12      	ldr	r2, [r2, #32]
 8006d34:	00d2      	lsls	r2, r2, #3
 8006d36:	4913      	ldr	r1, [pc, #76]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006d3c:	4b11      	ldr	r3, [pc, #68]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d40:	4a10      	ldr	r2, [pc, #64]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d42:	f043 0310 	orr.w	r3, r3, #16
 8006d46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006d48:	4b0e      	ldr	r3, [pc, #56]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d54:	f7fa fa38 	bl	80011c8 <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d5a:	e008      	b.n	8006d6e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d5c:	f7fa fa34 	bl	80011c8 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e006      	b.n	8006d7c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <RCCEx_PLL3_Config+0x12c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	44020c00 	.word	0x44020c00

08006d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e042      	b.n	8006e20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7f9 ff65 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	@ 0x24
 8006db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0201 	bic.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fd82 	bl	80078dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fbd1 	bl	8007580 <UART_SetConfig>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e01b      	b.n	8006e20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fe01 	bl	8007a20 <UART_CheckIdleState>
 8006e1e:	4603      	mov	r3, r0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	@ 0x28
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	f040 808b 	bne.w	8006f5a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_UART_Transmit+0x28>
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e083      	b.n	8006f5c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5e:	2b80      	cmp	r3, #128	@ 0x80
 8006e60:	d107      	bne.n	8006e72 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e70:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2221      	movs	r2, #33	@ 0x21
 8006e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e82:	f7fa f9a1 	bl	80011c8 <HAL_GetTick>
 8006e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea0:	d108      	bne.n	8006eb4 <HAL_UART_Transmit+0x8c>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	e003      	b.n	8006ebc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ebc:	e030      	b.n	8006f20 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2180      	movs	r1, #128	@ 0x80
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fe53 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e03d      	b.n	8006f5c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e007      	b.n	8006f0e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1c8      	bne.n	8006ebe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2200      	movs	r2, #0
 8006f34:	2140      	movs	r1, #64	@ 0x40
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fe1c 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e006      	b.n	8006f5c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e000      	b.n	8006f5c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006f5a:	2302      	movs	r3, #2
  }
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b0ae      	sub	sp, #184	@ 0xb8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f92:	4013      	ands	r3, r2
 8006f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8006f98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11b      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d015      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 82ac 	beq.w	8007526 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
      }
      return;
 8006fd6:	e2a6      	b.n	8007526 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80fd 	beq.w	80071dc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fe2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80071d0 <HAL_UART_IRQHandler+0x26c>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ff2:	4b78      	ldr	r3, [pc, #480]	@ (80071d4 <HAL_UART_IRQHandler+0x270>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80f0 	beq.w	80071dc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d011      	beq.n	800702c <HAL_UART_IRQHandler+0xc8>
 8007008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800700c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007022:	f043 0201 	orr.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800702c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_UART_IRQHandler+0xf8>
 8007038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2202      	movs	r2, #2
 800704a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	f043 0204 	orr.w	r2, r3, #4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800705c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_UART_IRQHandler+0x128>
 8007068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2204      	movs	r2, #4
 800707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007082:	f043 0202 	orr.w	r2, r3, #2
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800708c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b00      	cmp	r3, #0
 8007096:	d017      	beq.n	80070c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80070a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070a8:	4b49      	ldr	r3, [pc, #292]	@ (80071d0 <HAL_UART_IRQHandler+0x26c>)
 80070aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2208      	movs	r2, #8
 80070b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070be:	f043 0208 	orr.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d012      	beq.n	80070fa <HAL_UART_IRQHandler+0x196>
 80070d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00c      	beq.n	80070fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f0:	f043 0220 	orr.w	r2, r3, #32
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8212 	beq.w	800752a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d013      	beq.n	800713a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007112:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d105      	bne.n	800712a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800711e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714e:	2b40      	cmp	r3, #64	@ 0x40
 8007150:	d005      	beq.n	800715e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007156:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800715a:	2b00      	cmp	r3, #0
 800715c:	d02e      	beq.n	80071bc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fd75 	bl	8007c4e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d120      	bne.n	80071b4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007182:	4a15      	ldr	r2, [pc, #84]	@ (80071d8 <HAL_UART_IRQHandler+0x274>)
 8007184:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718c:	4618      	mov	r0, r3
 800718e:	f7fa fa57 	bl	8001640 <HAL_DMA_Abort_IT>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d019      	beq.n	80071cc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80071a6:	4610      	mov	r0, r2
 80071a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071aa:	e00f      	b.n	80071cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f9d1 	bl	8007554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b2:	e00b      	b.n	80071cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f9cd 	bl	8007554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ba:	e007      	b.n	80071cc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9c9 	bl	8007554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80071ca:	e1ae      	b.n	800752a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071cc:	bf00      	nop
    return;
 80071ce:	e1ac      	b.n	800752a <HAL_UART_IRQHandler+0x5c6>
 80071d0:	10000001 	.word	0x10000001
 80071d4:	04000120 	.word	0x04000120
 80071d8:	08007d1b 	.word	0x08007d1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	f040 8142 	bne.w	800746a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 813b 	beq.w	800746a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8134 	beq.w	800746a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2210      	movs	r2, #16
 8007208:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007214:	2b40      	cmp	r3, #64	@ 0x40
 8007216:	f040 80aa 	bne.w	800736e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007224:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007228:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8084 	beq.w	800733a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007238:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800723c:	429a      	cmp	r2, r3
 800723e:	d27c      	bcs.n	800733a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	2b81      	cmp	r3, #129	@ 0x81
 8007254:	d060      	beq.n	8007318 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800726a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800727c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007280:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800728a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e2      	bne.n	8007256 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80072b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e3      	bne.n	8007290 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e6:	f023 0310 	bic.w	r3, r3, #16
 80072ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e4      	bne.n	80072d6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007312:	4618      	mov	r0, r3
 8007314:	f7fa f918 	bl	8001548 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800732a:	b29b      	uxth	r3, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	b29b      	uxth	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f918 	bl	8007568 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007338:	e0f9      	b.n	800752e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007340:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007344:	429a      	cmp	r2, r3
 8007346:	f040 80f2 	bne.w	800752e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007352:	2b81      	cmp	r3, #129	@ 0x81
 8007354:	f040 80eb 	bne.w	800752e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8fe 	bl	8007568 <HAL_UARTEx_RxEventCallback>
      return;
 800736c:	e0df      	b.n	800752e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800737a:	b29b      	uxth	r3, r3
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80d1 	beq.w	8007532 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8007390:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 80cc 	beq.w	8007532 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e4      	bne.n	800739a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3308      	adds	r3, #8
 80073d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	623b      	str	r3, [r7, #32]
   return(result);
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	f023 0301 	bic.w	r3, r3, #1
 80073ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80073f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80073fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e1      	bne.n	80073d0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60fb      	str	r3, [r7, #12]
   return(result);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0310 	bic.w	r3, r3, #16
 8007434:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	69b9      	ldr	r1, [r7, #24]
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	617b      	str	r3, [r7, #20]
   return(result);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e4      	bne.n	8007420 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800745c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f880 	bl	8007568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007468:	e063      	b.n	8007532 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800746a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800746e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00e      	beq.n	8007494 <HAL_UART_IRQHandler+0x530>
 8007476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800747a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800748a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc81 	bl	8007d94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007492:	e051      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749c:	2b00      	cmp	r3, #0
 800749e:	d014      	beq.n	80074ca <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80074a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d03a      	beq.n	8007536 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	4798      	blx	r3
    }
    return;
 80074c8:	e035      	b.n	8007536 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_UART_IRQHandler+0x586>
 80074d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80074da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fc2b 	bl	8007d3e <UART_EndTransmit_IT>
    return;
 80074e8:	e026      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_UART_IRQHandler+0x5a6>
 80074f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80074fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fc5a 	bl	8007dbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007508:	e016      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800750a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800750e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <HAL_UART_IRQHandler+0x5d4>
 8007516:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800751a:	2b00      	cmp	r3, #0
 800751c:	da0c      	bge.n	8007538 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fc42 	bl	8007da8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007524:	e008      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
      return;
 8007526:	bf00      	nop
 8007528:	e006      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
    return;
 800752a:	bf00      	nop
 800752c:	e004      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
      return;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
      return;
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <HAL_UART_IRQHandler+0x5d4>
    return;
 8007536:	bf00      	nop
  }
}
 8007538:	37b8      	adds	r7, #184	@ 0xb8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop

08007540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007584:	b094      	sub	sp, #80	@ 0x50
 8007586:	af00      	add	r7, sp, #0
 8007588:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	4b83      	ldr	r3, [pc, #524]	@ (80077a4 <UART_SetConfig+0x224>)
 8007596:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	431a      	orrs	r2, r3
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	497c      	ldr	r1, [pc, #496]	@ (80077a8 <UART_SetConfig+0x228>)
 80075b8:	4019      	ands	r1, r3
 80075ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	68d9      	ldr	r1, [r3, #12]
 80075d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	ea40 0301 	orr.w	r3, r0, r1
 80075da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4b6f      	ldr	r3, [pc, #444]	@ (80077a4 <UART_SetConfig+0x224>)
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d009      	beq.n	8007600 <UART_SetConfig+0x80>
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b6e      	ldr	r3, [pc, #440]	@ (80077ac <UART_SetConfig+0x22c>)
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d004      	beq.n	8007600 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075fc:	4313      	orrs	r3, r2
 80075fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800760a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007614:	430b      	orrs	r3, r1
 8007616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	f023 000f 	bic.w	r0, r3, #15
 8007622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007624:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	ea40 0301 	orr.w	r3, r0, r1
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4b5e      	ldr	r3, [pc, #376]	@ (80077b0 <UART_SetConfig+0x230>)
 8007636:	429a      	cmp	r2, r3
 8007638:	d102      	bne.n	8007640 <UART_SetConfig+0xc0>
 800763a:	2301      	movs	r3, #1
 800763c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800763e:	e032      	b.n	80076a6 <UART_SetConfig+0x126>
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4b5b      	ldr	r3, [pc, #364]	@ (80077b4 <UART_SetConfig+0x234>)
 8007646:	429a      	cmp	r2, r3
 8007648:	d102      	bne.n	8007650 <UART_SetConfig+0xd0>
 800764a:	2302      	movs	r3, #2
 800764c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800764e:	e02a      	b.n	80076a6 <UART_SetConfig+0x126>
 8007650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b58      	ldr	r3, [pc, #352]	@ (80077b8 <UART_SetConfig+0x238>)
 8007656:	429a      	cmp	r2, r3
 8007658:	d102      	bne.n	8007660 <UART_SetConfig+0xe0>
 800765a:	2304      	movs	r3, #4
 800765c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800765e:	e022      	b.n	80076a6 <UART_SetConfig+0x126>
 8007660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b55      	ldr	r3, [pc, #340]	@ (80077bc <UART_SetConfig+0x23c>)
 8007666:	429a      	cmp	r2, r3
 8007668:	d102      	bne.n	8007670 <UART_SetConfig+0xf0>
 800766a:	2308      	movs	r3, #8
 800766c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800766e:	e01a      	b.n	80076a6 <UART_SetConfig+0x126>
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b52      	ldr	r3, [pc, #328]	@ (80077c0 <UART_SetConfig+0x240>)
 8007676:	429a      	cmp	r2, r3
 8007678:	d102      	bne.n	8007680 <UART_SetConfig+0x100>
 800767a:	2310      	movs	r3, #16
 800767c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800767e:	e012      	b.n	80076a6 <UART_SetConfig+0x126>
 8007680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4b4f      	ldr	r3, [pc, #316]	@ (80077c4 <UART_SetConfig+0x244>)
 8007686:	429a      	cmp	r2, r3
 8007688:	d102      	bne.n	8007690 <UART_SetConfig+0x110>
 800768a:	2320      	movs	r3, #32
 800768c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800768e:	e00a      	b.n	80076a6 <UART_SetConfig+0x126>
 8007690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	4b43      	ldr	r3, [pc, #268]	@ (80077a4 <UART_SetConfig+0x224>)
 8007696:	429a      	cmp	r2, r3
 8007698:	d103      	bne.n	80076a2 <UART_SetConfig+0x122>
 800769a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800769e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a0:	e001      	b.n	80076a6 <UART_SetConfig+0x126>
 80076a2:	2300      	movs	r3, #0
 80076a4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b3e      	ldr	r3, [pc, #248]	@ (80077a4 <UART_SetConfig+0x224>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d005      	beq.n	80076bc <UART_SetConfig+0x13c>
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	4b3d      	ldr	r3, [pc, #244]	@ (80077ac <UART_SetConfig+0x22c>)
 80076b6:	429a      	cmp	r2, r3
 80076b8:	f040 8088 	bne.w	80077cc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80076bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076be:	2200      	movs	r2, #0
 80076c0:	623b      	str	r3, [r7, #32]
 80076c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80076c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076c8:	f7fd fede 	bl	8005488 <HAL_RCCEx_GetPeriphCLKFreq>
 80076cc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80eb 	beq.w	80078ac <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076da:	4a3b      	ldr	r2, [pc, #236]	@ (80077c8 <UART_SetConfig+0x248>)
 80076dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d305      	bcc.n	8007706 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007702:	429a      	cmp	r2, r3
 8007704:	d903      	bls.n	800770e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800770c:	e048      	b.n	80077a0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007710:	2200      	movs	r2, #0
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	61fa      	str	r2, [r7, #28]
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	4a2b      	ldr	r2, [pc, #172]	@ (80077c8 <UART_SetConfig+0x248>)
 800771c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007720:	b29b      	uxth	r3, r3
 8007722:	2200      	movs	r2, #0
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	617a      	str	r2, [r7, #20]
 8007728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800772c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007730:	f7f8 fdb0 	bl	8000294 <__aeabi_uldivmod>
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	020b      	lsls	r3, r1, #8
 8007746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800774a:	0202      	lsls	r2, r0, #8
 800774c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800774e:	6849      	ldr	r1, [r1, #4]
 8007750:	0849      	lsrs	r1, r1, #1
 8007752:	2000      	movs	r0, #0
 8007754:	460c      	mov	r4, r1
 8007756:	4605      	mov	r5, r0
 8007758:	eb12 0804 	adds.w	r8, r2, r4
 800775c:	eb43 0905 	adc.w	r9, r3, r5
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	60fa      	str	r2, [r7, #12]
 800776a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f8 fd8f 	bl	8000294 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4613      	mov	r3, r2
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800777e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007784:	d308      	bcc.n	8007798 <UART_SetConfig+0x218>
 8007786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007788:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800778c:	d204      	bcs.n	8007798 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800778e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007794:	60da      	str	r2, [r3, #12]
 8007796:	e003      	b.n	80077a0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800779e:	e085      	b.n	80078ac <UART_SetConfig+0x32c>
 80077a0:	e084      	b.n	80078ac <UART_SetConfig+0x32c>
 80077a2:	bf00      	nop
 80077a4:	44002400 	.word	0x44002400
 80077a8:	cfff69f3 	.word	0xcfff69f3
 80077ac:	54002400 	.word	0x54002400
 80077b0:	40013800 	.word	0x40013800
 80077b4:	40004400 	.word	0x40004400
 80077b8:	40004800 	.word	0x40004800
 80077bc:	40004c00 	.word	0x40004c00
 80077c0:	40005000 	.word	0x40005000
 80077c4:	40006400 	.word	0x40006400
 80077c8:	08008ffc 	.word	0x08008ffc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d4:	d13c      	bne.n	8007850 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80077d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077d8:	2200      	movs	r2, #0
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e2:	f7fd fe51 	bl	8005488 <HAL_RCCEx_GetPeriphCLKFreq>
 80077e6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d05e      	beq.n	80078ac <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	4a39      	ldr	r2, [pc, #228]	@ (80078d8 <UART_SetConfig+0x358>)
 80077f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007800:	005a      	lsls	r2, r3, #1
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	085b      	lsrs	r3, r3, #1
 8007808:	441a      	add	r2, r3
 800780a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007816:	2b0f      	cmp	r3, #15
 8007818:	d916      	bls.n	8007848 <UART_SetConfig+0x2c8>
 800781a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007820:	d212      	bcs.n	8007848 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007824:	b29b      	uxth	r3, r3
 8007826:	f023 030f 	bic.w	r3, r3, #15
 800782a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800782c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	b29a      	uxth	r2, r3
 8007838:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800783a:	4313      	orrs	r3, r2
 800783c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007844:	60da      	str	r2, [r3, #12]
 8007846:	e031      	b.n	80078ac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800784e:	e02d      	b.n	80078ac <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007852:	2200      	movs	r2, #0
 8007854:	469a      	mov	sl, r3
 8007856:	4693      	mov	fp, r2
 8007858:	4650      	mov	r0, sl
 800785a:	4659      	mov	r1, fp
 800785c:	f7fd fe14 	bl	8005488 <HAL_RCCEx_GetPeriphCLKFreq>
 8007860:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d021      	beq.n	80078ac <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	4a1a      	ldr	r2, [pc, #104]	@ (80078d8 <UART_SetConfig+0x358>)
 800786e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007872:	461a      	mov	r2, r3
 8007874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007876:	fbb3 f2f2 	udiv	r2, r3, r2
 800787a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	441a      	add	r2, r3
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	fbb2 f3f3 	udiv	r3, r2, r3
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d909      	bls.n	80078a6 <UART_SetConfig+0x326>
 8007892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007898:	d205      	bcs.n	80078a6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800789a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789c:	b29a      	uxth	r2, r3
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60da      	str	r2, [r3, #12]
 80078a4:	e002      	b.n	80078ac <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	2201      	movs	r2, #1
 80078b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078be:	2200      	movs	r2, #0
 80078c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c4:	2200      	movs	r2, #0
 80078c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3750      	adds	r7, #80	@ 0x50
 80078d0:	46bd      	mov	sp, r7
 80078d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078d6:	bf00      	nop
 80078d8:	08008ffc 	.word	0x08008ffc

080078dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079da:	d10a      	bne.n	80079f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b098      	sub	sp, #96	@ 0x60
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a30:	f7f9 fbca 	bl	80011c8 <HAL_GetTick>
 8007a34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d12f      	bne.n	8007aa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f88e 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d022      	beq.n	8007aa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e063      	b.n	8007b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d149      	bne.n	8007b46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aba:	2200      	movs	r2, #0
 8007abc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f857 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03c      	beq.n	8007b46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e6      	bne.n	8007acc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f023 0301 	bic.w	r3, r3, #1
 8007b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b1e:	61fa      	str	r2, [r7, #28]
 8007b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	69b9      	ldr	r1, [r7, #24]
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e5      	bne.n	8007afe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e012      	b.n	8007b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3758      	adds	r7, #88	@ 0x58
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b84:	e04f      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d04b      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8e:	f7f9 fb1b 	bl	80011c8 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d302      	bcc.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e04e      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d037      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b80      	cmp	r3, #128	@ 0x80
 8007bba:	d034      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d031      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d110      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f838 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2208      	movs	r2, #8
 8007be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e029      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c00:	d111      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f81e 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e00f      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d0a0      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b095      	sub	sp, #84	@ 0x54
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e3      	bne.n	8007c88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d118      	bne.n	8007cfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f023 0310 	bic.w	r3, r3, #16
 8007cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6979      	ldr	r1, [r7, #20]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e6      	bne.n	8007cc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d0e:	bf00      	nop
 8007d10:	3754      	adds	r7, #84	@ 0x54
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fc0f 	bl	8007554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6979      	ldr	r1, [r7, #20]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	613b      	str	r3, [r7, #16]
   return(result);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fbda 	bl	8007540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d8c:	bf00      	nop
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e027      	b.n	8007e36 <HAL_UARTEx_DisableFifoMode+0x66>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2224      	movs	r2, #36	@ 0x24
 8007df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e02d      	b.n	8007eb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2224      	movs	r2, #36	@ 0x24
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0201 	bic.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f850 	bl	8007f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	e02d      	b.n	8007f32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2224      	movs	r2, #36	@ 0x24
 8007ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 0201 	bic.w	r2, r2, #1
 8007efc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f812 	bl	8007f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d108      	bne.n	8007f5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f5c:	e031      	b.n	8007fc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f5e:	2308      	movs	r3, #8
 8007f60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f62:	2308      	movs	r3, #8
 8007f64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	0e5b      	lsrs	r3, r3, #25
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	0f5b      	lsrs	r3, r3, #29
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	7b3a      	ldrb	r2, [r7, #12]
 8007f8a:	4911      	ldr	r1, [pc, #68]	@ (8007fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007f8c:	5c8a      	ldrb	r2, [r1, r2]
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f92:	7b3a      	ldrb	r2, [r7, #12]
 8007f94:	490f      	ldr	r1, [pc, #60]	@ (8007fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8007f96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	7b7a      	ldrb	r2, [r7, #13]
 8007fa8:	4909      	ldr	r1, [pc, #36]	@ (8007fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8007faa:	5c8a      	ldrb	r2, [r1, r2]
 8007fac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	4908      	ldr	r1, [pc, #32]	@ (8007fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8007fb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	08009014 	.word	0x08009014
 8007fd4:	0800901c 	.word	0x0800901c

08007fd8 <std>:
 8007fd8:	2300      	movs	r3, #0
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	6083      	str	r3, [r0, #8]
 8007fe0:	8181      	strh	r1, [r0, #12]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fe6:	81c2      	strh	r2, [r0, #14]
 8007fe8:	2208      	movs	r2, #8
 8007fea:	6183      	str	r3, [r0, #24]
 8007fec:	e9c0 3300 	strd	r3, r3, [r0]
 8007ff0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ff4:	305c      	adds	r0, #92	@ 0x5c
 8007ff6:	f000 f9f9 	bl	80083ec <memset>
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <std+0x58>)
 8007ffc:	6224      	str	r4, [r4, #32]
 8007ffe:	6263      	str	r3, [r4, #36]	@ 0x24
 8008000:	4b0c      	ldr	r3, [pc, #48]	@ (8008034 <std+0x5c>)
 8008002:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <std+0x60>)
 8008006:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008008:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <std+0x64>)
 800800a:	6323      	str	r3, [r4, #48]	@ 0x30
 800800c:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <std+0x68>)
 800800e:	429c      	cmp	r4, r3
 8008010:	d006      	beq.n	8008020 <std+0x48>
 8008012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008016:	4294      	cmp	r4, r2
 8008018:	d002      	beq.n	8008020 <std+0x48>
 800801a:	33d0      	adds	r3, #208	@ 0xd0
 800801c:	429c      	cmp	r4, r3
 800801e:	d105      	bne.n	800802c <std+0x54>
 8008020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f000 ba58 	b.w	80084dc <__retarget_lock_init_recursive>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	0800823d 	.word	0x0800823d
 8008034:	0800825f 	.word	0x0800825f
 8008038:	08008297 	.word	0x08008297
 800803c:	080082bb 	.word	0x080082bb
 8008040:	20000174 	.word	0x20000174

08008044 <stdio_exit_handler>:
 8008044:	4a02      	ldr	r2, [pc, #8]	@ (8008050 <stdio_exit_handler+0xc>)
 8008046:	4903      	ldr	r1, [pc, #12]	@ (8008054 <stdio_exit_handler+0x10>)
 8008048:	4803      	ldr	r0, [pc, #12]	@ (8008058 <stdio_exit_handler+0x14>)
 800804a:	f000 b869 	b.w	8008120 <_fwalk_sglue>
 800804e:	bf00      	nop
 8008050:	2000000c 	.word	0x2000000c
 8008054:	08008d81 	.word	0x08008d81
 8008058:	2000001c 	.word	0x2000001c

0800805c <cleanup_stdio>:
 800805c:	6841      	ldr	r1, [r0, #4]
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <cleanup_stdio+0x34>)
 8008060:	4299      	cmp	r1, r3
 8008062:	b510      	push	{r4, lr}
 8008064:	4604      	mov	r4, r0
 8008066:	d001      	beq.n	800806c <cleanup_stdio+0x10>
 8008068:	f000 fe8a 	bl	8008d80 <_fflush_r>
 800806c:	68a1      	ldr	r1, [r4, #8]
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <cleanup_stdio+0x38>)
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <cleanup_stdio+0x1e>
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fe83 	bl	8008d80 <_fflush_r>
 800807a:	68e1      	ldr	r1, [r4, #12]
 800807c:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <cleanup_stdio+0x3c>)
 800807e:	4299      	cmp	r1, r3
 8008080:	d004      	beq.n	800808c <cleanup_stdio+0x30>
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f000 be7a 	b.w	8008d80 <_fflush_r>
 800808c:	bd10      	pop	{r4, pc}
 800808e:	bf00      	nop
 8008090:	20000174 	.word	0x20000174
 8008094:	200001dc 	.word	0x200001dc
 8008098:	20000244 	.word	0x20000244

0800809c <global_stdio_init.part.0>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <global_stdio_init.part.0+0x30>)
 80080a0:	2104      	movs	r1, #4
 80080a2:	4c0b      	ldr	r4, [pc, #44]	@ (80080d0 <global_stdio_init.part.0+0x34>)
 80080a4:	4a0b      	ldr	r2, [pc, #44]	@ (80080d4 <global_stdio_init.part.0+0x38>)
 80080a6:	4620      	mov	r0, r4
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f7ff ff94 	bl	8007fd8 <std>
 80080b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080b4:	2201      	movs	r2, #1
 80080b6:	2109      	movs	r1, #9
 80080b8:	f7ff ff8e 	bl	8007fd8 <std>
 80080bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080c0:	2202      	movs	r2, #2
 80080c2:	2112      	movs	r1, #18
 80080c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c8:	f7ff bf86 	b.w	8007fd8 <std>
 80080cc:	200002ac 	.word	0x200002ac
 80080d0:	20000174 	.word	0x20000174
 80080d4:	08008045 	.word	0x08008045

080080d8 <__sfp_lock_acquire>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__sfp_lock_acquire+0x8>)
 80080da:	f000 ba00 	b.w	80084de <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	200002b5 	.word	0x200002b5

080080e4 <__sfp_lock_release>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__sfp_lock_release+0x8>)
 80080e6:	f000 b9fb 	b.w	80084e0 <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	200002b5 	.word	0x200002b5

080080f0 <__sinit>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7ff fff0 	bl	80080d8 <__sfp_lock_acquire>
 80080f8:	6a23      	ldr	r3, [r4, #32]
 80080fa:	b11b      	cbz	r3, 8008104 <__sinit+0x14>
 80080fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008100:	f7ff bff0 	b.w	80080e4 <__sfp_lock_release>
 8008104:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <__sinit+0x28>)
 8008106:	6223      	str	r3, [r4, #32]
 8008108:	4b04      	ldr	r3, [pc, #16]	@ (800811c <__sinit+0x2c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f5      	bne.n	80080fc <__sinit+0xc>
 8008110:	f7ff ffc4 	bl	800809c <global_stdio_init.part.0>
 8008114:	e7f2      	b.n	80080fc <__sinit+0xc>
 8008116:	bf00      	nop
 8008118:	0800805d 	.word	0x0800805d
 800811c:	200002ac 	.word	0x200002ac

08008120 <_fwalk_sglue>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	4607      	mov	r7, r0
 8008126:	4688      	mov	r8, r1
 8008128:	4614      	mov	r4, r2
 800812a:	2600      	movs	r6, #0
 800812c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008130:	f1b9 0901 	subs.w	r9, r9, #1
 8008134:	d505      	bpl.n	8008142 <_fwalk_sglue+0x22>
 8008136:	6824      	ldr	r4, [r4, #0]
 8008138:	2c00      	cmp	r4, #0
 800813a:	d1f7      	bne.n	800812c <_fwalk_sglue+0xc>
 800813c:	4630      	mov	r0, r6
 800813e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d907      	bls.n	8008158 <_fwalk_sglue+0x38>
 8008148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800814c:	3301      	adds	r3, #1
 800814e:	d003      	beq.n	8008158 <_fwalk_sglue+0x38>
 8008150:	4629      	mov	r1, r5
 8008152:	4638      	mov	r0, r7
 8008154:	47c0      	blx	r8
 8008156:	4306      	orrs	r6, r0
 8008158:	3568      	adds	r5, #104	@ 0x68
 800815a:	e7e9      	b.n	8008130 <_fwalk_sglue+0x10>

0800815c <iprintf>:
 800815c:	b40f      	push	{r0, r1, r2, r3}
 800815e:	b507      	push	{r0, r1, r2, lr}
 8008160:	4906      	ldr	r1, [pc, #24]	@ (800817c <iprintf+0x20>)
 8008162:	ab04      	add	r3, sp, #16
 8008164:	6808      	ldr	r0, [r1, #0]
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	6881      	ldr	r1, [r0, #8]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f000 fadb 	bl	8008728 <_vfiprintf_r>
 8008172:	b003      	add	sp, #12
 8008174:	f85d eb04 	ldr.w	lr, [sp], #4
 8008178:	b004      	add	sp, #16
 800817a:	4770      	bx	lr
 800817c:	20000018 	.word	0x20000018

08008180 <_puts_r>:
 8008180:	6a03      	ldr	r3, [r0, #32]
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	4605      	mov	r5, r0
 8008186:	460e      	mov	r6, r1
 8008188:	6884      	ldr	r4, [r0, #8]
 800818a:	b90b      	cbnz	r3, 8008190 <_puts_r+0x10>
 800818c:	f7ff ffb0 	bl	80080f0 <__sinit>
 8008190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008192:	07db      	lsls	r3, r3, #31
 8008194:	d405      	bmi.n	80081a2 <_puts_r+0x22>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	0598      	lsls	r0, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_puts_r+0x22>
 800819c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800819e:	f000 f99e 	bl	80084de <__retarget_lock_acquire_recursive>
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	0719      	lsls	r1, r3, #28
 80081a6:	d502      	bpl.n	80081ae <_puts_r+0x2e>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d135      	bne.n	800821a <_puts_r+0x9a>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f8c5 	bl	8008340 <__swsetup_r>
 80081b6:	b380      	cbz	r0, 800821a <_puts_r+0x9a>
 80081b8:	f04f 35ff 	mov.w	r5, #4294967295
 80081bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081be:	07da      	lsls	r2, r3, #31
 80081c0:	d405      	bmi.n	80081ce <_puts_r+0x4e>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	059b      	lsls	r3, r3, #22
 80081c6:	d402      	bmi.n	80081ce <_puts_r+0x4e>
 80081c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ca:	f000 f989 	bl	80084e0 <__retarget_lock_release_recursive>
 80081ce:	4628      	mov	r0, r5
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da04      	bge.n	80081e0 <_puts_r+0x60>
 80081d6:	69a2      	ldr	r2, [r4, #24]
 80081d8:	429a      	cmp	r2, r3
 80081da:	dc17      	bgt.n	800820c <_puts_r+0x8c>
 80081dc:	290a      	cmp	r1, #10
 80081de:	d015      	beq.n	800820c <_puts_r+0x8c>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	6022      	str	r2, [r4, #0]
 80081e6:	7019      	strb	r1, [r3, #0]
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081ee:	3b01      	subs	r3, #1
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	2900      	cmp	r1, #0
 80081f4:	d1ed      	bne.n	80081d2 <_puts_r+0x52>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	da11      	bge.n	800821e <_puts_r+0x9e>
 80081fa:	4622      	mov	r2, r4
 80081fc:	210a      	movs	r1, #10
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f85f 	bl	80082c2 <__swbuf_r>
 8008204:	3001      	adds	r0, #1
 8008206:	d0d7      	beq.n	80081b8 <_puts_r+0x38>
 8008208:	250a      	movs	r5, #10
 800820a:	e7d7      	b.n	80081bc <_puts_r+0x3c>
 800820c:	4622      	mov	r2, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f857 	bl	80082c2 <__swbuf_r>
 8008214:	3001      	adds	r0, #1
 8008216:	d1e7      	bne.n	80081e8 <_puts_r+0x68>
 8008218:	e7ce      	b.n	80081b8 <_puts_r+0x38>
 800821a:	3e01      	subs	r6, #1
 800821c:	e7e4      	b.n	80081e8 <_puts_r+0x68>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	6022      	str	r2, [r4, #0]
 8008224:	220a      	movs	r2, #10
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e7ee      	b.n	8008208 <_puts_r+0x88>
	...

0800822c <puts>:
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <puts+0xc>)
 800822e:	4601      	mov	r1, r0
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f7ff bfa5 	b.w	8008180 <_puts_r>
 8008236:	bf00      	nop
 8008238:	20000018 	.word	0x20000018

0800823c <__sread>:
 800823c:	b510      	push	{r4, lr}
 800823e:	460c      	mov	r4, r1
 8008240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008244:	f000 f8fc 	bl	8008440 <_read_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	bfab      	itete	ge
 800824c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800824e:	89a3      	ldrhlt	r3, [r4, #12]
 8008250:	181b      	addge	r3, r3, r0
 8008252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008256:	bfac      	ite	ge
 8008258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800825a:	81a3      	strhlt	r3, [r4, #12]
 800825c:	bd10      	pop	{r4, pc}

0800825e <__swrite>:
 800825e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	461f      	mov	r7, r3
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	4605      	mov	r5, r0
 8008268:	460c      	mov	r4, r1
 800826a:	05db      	lsls	r3, r3, #23
 800826c:	4616      	mov	r6, r2
 800826e:	d505      	bpl.n	800827c <__swrite+0x1e>
 8008270:	2302      	movs	r3, #2
 8008272:	2200      	movs	r2, #0
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	f000 f8d0 	bl	800841c <_lseek_r>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	4632      	mov	r2, r6
 8008280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008284:	4628      	mov	r0, r5
 8008286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	463b      	mov	r3, r7
 800828e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	f000 b8e7 	b.w	8008464 <_write_r>

08008296 <__sseek>:
 8008296:	b510      	push	{r4, lr}
 8008298:	460c      	mov	r4, r1
 800829a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800829e:	f000 f8bd 	bl	800841c <_lseek_r>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	bf15      	itete	ne
 80082a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082b2:	81a3      	strheq	r3, [r4, #12]
 80082b4:	bf18      	it	ne
 80082b6:	81a3      	strhne	r3, [r4, #12]
 80082b8:	bd10      	pop	{r4, pc}

080082ba <__sclose>:
 80082ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082be:	f000 b89d 	b.w	80083fc <_close_r>

080082c2 <__swbuf_r>:
 80082c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c4:	460e      	mov	r6, r1
 80082c6:	4614      	mov	r4, r2
 80082c8:	4605      	mov	r5, r0
 80082ca:	b118      	cbz	r0, 80082d4 <__swbuf_r+0x12>
 80082cc:	6a03      	ldr	r3, [r0, #32]
 80082ce:	b90b      	cbnz	r3, 80082d4 <__swbuf_r+0x12>
 80082d0:	f7ff ff0e 	bl	80080f0 <__sinit>
 80082d4:	69a3      	ldr	r3, [r4, #24]
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	071a      	lsls	r2, r3, #28
 80082dc:	d501      	bpl.n	80082e2 <__swbuf_r+0x20>
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	b943      	cbnz	r3, 80082f4 <__swbuf_r+0x32>
 80082e2:	4621      	mov	r1, r4
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 f82b 	bl	8008340 <__swsetup_r>
 80082ea:	b118      	cbz	r0, 80082f4 <__swbuf_r+0x32>
 80082ec:	f04f 37ff 	mov.w	r7, #4294967295
 80082f0:	4638      	mov	r0, r7
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	b2f6      	uxtb	r6, r6
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	4637      	mov	r7, r6
 80082fc:	1a98      	subs	r0, r3, r2
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	4283      	cmp	r3, r0
 8008302:	dc05      	bgt.n	8008310 <__swbuf_r+0x4e>
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 fd3a 	bl	8008d80 <_fflush_r>
 800830c:	2800      	cmp	r0, #0
 800830e:	d1ed      	bne.n	80082ec <__swbuf_r+0x2a>
 8008310:	68a3      	ldr	r3, [r4, #8]
 8008312:	3b01      	subs	r3, #1
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	701e      	strb	r6, [r3, #0]
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	6962      	ldr	r2, [r4, #20]
 8008322:	429a      	cmp	r2, r3
 8008324:	d004      	beq.n	8008330 <__swbuf_r+0x6e>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d5e1      	bpl.n	80082f0 <__swbuf_r+0x2e>
 800832c:	2e0a      	cmp	r6, #10
 800832e:	d1df      	bne.n	80082f0 <__swbuf_r+0x2e>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 fd24 	bl	8008d80 <_fflush_r>
 8008338:	2800      	cmp	r0, #0
 800833a:	d0d9      	beq.n	80082f0 <__swbuf_r+0x2e>
 800833c:	e7d6      	b.n	80082ec <__swbuf_r+0x2a>
	...

08008340 <__swsetup_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4b29      	ldr	r3, [pc, #164]	@ (80083e8 <__swsetup_r+0xa8>)
 8008344:	4605      	mov	r5, r0
 8008346:	460c      	mov	r4, r1
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	b118      	cbz	r0, 8008354 <__swsetup_r+0x14>
 800834c:	6a03      	ldr	r3, [r0, #32]
 800834e:	b90b      	cbnz	r3, 8008354 <__swsetup_r+0x14>
 8008350:	f7ff fece 	bl	80080f0 <__sinit>
 8008354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008358:	0719      	lsls	r1, r3, #28
 800835a:	d422      	bmi.n	80083a2 <__swsetup_r+0x62>
 800835c:	06da      	lsls	r2, r3, #27
 800835e:	d407      	bmi.n	8008370 <__swsetup_r+0x30>
 8008360:	2209      	movs	r2, #9
 8008362:	602a      	str	r2, [r5, #0]
 8008364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	e033      	b.n	80083d8 <__swsetup_r+0x98>
 8008370:	0758      	lsls	r0, r3, #29
 8008372:	d512      	bpl.n	800839a <__swsetup_r+0x5a>
 8008374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008376:	b141      	cbz	r1, 800838a <__swsetup_r+0x4a>
 8008378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800837c:	4299      	cmp	r1, r3
 800837e:	d002      	beq.n	8008386 <__swsetup_r+0x46>
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f8af 	bl	80084e4 <_free_r>
 8008386:	2300      	movs	r3, #0
 8008388:	6363      	str	r3, [r4, #52]	@ 0x34
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b94b      	cbnz	r3, 80083ba <__swsetup_r+0x7a>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b0:	d003      	beq.n	80083ba <__swsetup_r+0x7a>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 fd30 	bl	8008e1a <__smakebuf_r>
 80083ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083be:	f013 0201 	ands.w	r2, r3, #1
 80083c2:	d00a      	beq.n	80083da <__swsetup_r+0x9a>
 80083c4:	2200      	movs	r2, #0
 80083c6:	60a2      	str	r2, [r4, #8]
 80083c8:	6962      	ldr	r2, [r4, #20]
 80083ca:	4252      	negs	r2, r2
 80083cc:	61a2      	str	r2, [r4, #24]
 80083ce:	6922      	ldr	r2, [r4, #16]
 80083d0:	b942      	cbnz	r2, 80083e4 <__swsetup_r+0xa4>
 80083d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083d6:	d1c5      	bne.n	8008364 <__swsetup_r+0x24>
 80083d8:	bd38      	pop	{r3, r4, r5, pc}
 80083da:	0799      	lsls	r1, r3, #30
 80083dc:	bf58      	it	pl
 80083de:	6962      	ldrpl	r2, [r4, #20]
 80083e0:	60a2      	str	r2, [r4, #8]
 80083e2:	e7f4      	b.n	80083ce <__swsetup_r+0x8e>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7f7      	b.n	80083d8 <__swsetup_r+0x98>
 80083e8:	20000018 	.word	0x20000018

080083ec <memset>:
 80083ec:	4402      	add	r2, r0
 80083ee:	4603      	mov	r3, r0
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d100      	bne.n	80083f6 <memset+0xa>
 80083f4:	4770      	bx	lr
 80083f6:	f803 1b01 	strb.w	r1, [r3], #1
 80083fa:	e7f9      	b.n	80083f0 <memset+0x4>

080083fc <_close_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	2300      	movs	r3, #0
 8008400:	4d05      	ldr	r5, [pc, #20]	@ (8008418 <_close_r+0x1c>)
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	f7f8 fd1b 	bl	8000e42 <_close>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_close_r+0x1a>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_close_r+0x1a>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	200002b0 	.word	0x200002b0

0800841c <_lseek_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	4d06      	ldr	r5, [pc, #24]	@ (800843c <_lseek_r+0x20>)
 8008422:	4608      	mov	r0, r1
 8008424:	4611      	mov	r1, r2
 8008426:	2200      	movs	r2, #0
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f7f8 fd30 	bl	8000e90 <_lseek>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_lseek_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_lseek_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	200002b0 	.word	0x200002b0

08008440 <_read_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	4d06      	ldr	r5, [pc, #24]	@ (8008460 <_read_r+0x20>)
 8008446:	4608      	mov	r0, r1
 8008448:	4611      	mov	r1, r2
 800844a:	2200      	movs	r2, #0
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f7f8 fcbe 	bl	8000dd0 <_read>
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	d102      	bne.n	800845e <_read_r+0x1e>
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	b103      	cbz	r3, 800845e <_read_r+0x1e>
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	200002b0 	.word	0x200002b0

08008464 <_write_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4604      	mov	r4, r0
 8008468:	4d06      	ldr	r5, [pc, #24]	@ (8008484 <_write_r+0x20>)
 800846a:	4608      	mov	r0, r1
 800846c:	4611      	mov	r1, r2
 800846e:	2200      	movs	r2, #0
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	f7f8 fcc9 	bl	8000e0a <_write>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_write_r+0x1e>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_write_r+0x1e>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	200002b0 	.word	0x200002b0

08008488 <__errno>:
 8008488:	4b01      	ldr	r3, [pc, #4]	@ (8008490 <__errno+0x8>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000018 	.word	0x20000018

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	@ (80084cc <__libc_init_array+0x38>)
 8008498:	2600      	movs	r6, #0
 800849a:	4c0d      	ldr	r4, [pc, #52]	@ (80084d0 <__libc_init_array+0x3c>)
 800849c:	1b64      	subs	r4, r4, r5
 800849e:	10a4      	asrs	r4, r4, #2
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	@ (80084d4 <__libc_init_array+0x40>)
 80084a6:	2600      	movs	r6, #0
 80084a8:	4c0b      	ldr	r4, [pc, #44]	@ (80084d8 <__libc_init_array+0x44>)
 80084aa:	f000 fd33 	bl	8008f14 <_init>
 80084ae:	1b64      	subs	r4, r4, r5
 80084b0:	10a4      	asrs	r4, r4, #2
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	3601      	adds	r6, #1
 80084be:	4798      	blx	r3
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	3601      	adds	r6, #1
 80084c8:	4798      	blx	r3
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	08009060 	.word	0x08009060
 80084d0:	08009060 	.word	0x08009060
 80084d4:	08009060 	.word	0x08009060
 80084d8:	08009064 	.word	0x08009064

080084dc <__retarget_lock_init_recursive>:
 80084dc:	4770      	bx	lr

080084de <__retarget_lock_acquire_recursive>:
 80084de:	4770      	bx	lr

080084e0 <__retarget_lock_release_recursive>:
 80084e0:	4770      	bx	lr
	...

080084e4 <_free_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d041      	beq.n	8008570 <_free_r+0x8c>
 80084ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f0:	1f0c      	subs	r4, r1, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfb8      	it	lt
 80084f6:	18e4      	addlt	r4, r4, r3
 80084f8:	f000 f8e0 	bl	80086bc <__malloc_lock>
 80084fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008574 <_free_r+0x90>)
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	b933      	cbnz	r3, 8008510 <_free_r+0x2c>
 8008502:	6063      	str	r3, [r4, #4]
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	4628      	mov	r0, r5
 8008508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850c:	f000 b8dc 	b.w	80086c8 <__malloc_unlock>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d908      	bls.n	8008526 <_free_r+0x42>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	1821      	adds	r1, r4, r0
 8008518:	428b      	cmp	r3, r1
 800851a:	bf01      	itttt	eq
 800851c:	6819      	ldreq	r1, [r3, #0]
 800851e:	685b      	ldreq	r3, [r3, #4]
 8008520:	1809      	addeq	r1, r1, r0
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	e7ed      	b.n	8008502 <_free_r+0x1e>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x4c>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x42>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1850      	adds	r0, r2, r1
 8008534:	42a0      	cmp	r0, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x6c>
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	4401      	add	r1, r0
 800853c:	1850      	adds	r0, r2, r1
 800853e:	6011      	str	r1, [r2, #0]
 8008540:	4283      	cmp	r3, r0
 8008542:	d1e0      	bne.n	8008506 <_free_r+0x22>
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	4408      	add	r0, r1
 800854a:	6053      	str	r3, [r2, #4]
 800854c:	6010      	str	r0, [r2, #0]
 800854e:	e7da      	b.n	8008506 <_free_r+0x22>
 8008550:	d902      	bls.n	8008558 <_free_r+0x74>
 8008552:	230c      	movs	r3, #12
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	e7d6      	b.n	8008506 <_free_r+0x22>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	1821      	adds	r1, r4, r0
 800855c:	428b      	cmp	r3, r1
 800855e:	bf02      	ittt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	1809      	addeq	r1, r1, r0
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	bf08      	it	eq
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6054      	str	r4, [r2, #4]
 800856e:	e7ca      	b.n	8008506 <_free_r+0x22>
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	bf00      	nop
 8008574:	200002bc 	.word	0x200002bc

08008578 <sbrk_aligned>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4e0f      	ldr	r6, [pc, #60]	@ (80085b8 <sbrk_aligned+0x40>)
 800857c:	460c      	mov	r4, r1
 800857e:	4605      	mov	r5, r0
 8008580:	6831      	ldr	r1, [r6, #0]
 8008582:	b911      	cbnz	r1, 800858a <sbrk_aligned+0x12>
 8008584:	f000 fca8 	bl	8008ed8 <_sbrk_r>
 8008588:	6030      	str	r0, [r6, #0]
 800858a:	4621      	mov	r1, r4
 800858c:	4628      	mov	r0, r5
 800858e:	f000 fca3 	bl	8008ed8 <_sbrk_r>
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	d103      	bne.n	800859e <sbrk_aligned+0x26>
 8008596:	f04f 34ff 	mov.w	r4, #4294967295
 800859a:	4620      	mov	r0, r4
 800859c:	bd70      	pop	{r4, r5, r6, pc}
 800859e:	1cc4      	adds	r4, r0, #3
 80085a0:	f024 0403 	bic.w	r4, r4, #3
 80085a4:	42a0      	cmp	r0, r4
 80085a6:	d0f8      	beq.n	800859a <sbrk_aligned+0x22>
 80085a8:	1a21      	subs	r1, r4, r0
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 fc94 	bl	8008ed8 <_sbrk_r>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d1f2      	bne.n	800859a <sbrk_aligned+0x22>
 80085b4:	e7ef      	b.n	8008596 <sbrk_aligned+0x1e>
 80085b6:	bf00      	nop
 80085b8:	200002b8 	.word	0x200002b8

080085bc <_malloc_r>:
 80085bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c0:	1ccd      	adds	r5, r1, #3
 80085c2:	4606      	mov	r6, r0
 80085c4:	f025 0503 	bic.w	r5, r5, #3
 80085c8:	3508      	adds	r5, #8
 80085ca:	2d0c      	cmp	r5, #12
 80085cc:	bf38      	it	cc
 80085ce:	250c      	movcc	r5, #12
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	db01      	blt.n	80085d8 <_malloc_r+0x1c>
 80085d4:	42a9      	cmp	r1, r5
 80085d6:	d904      	bls.n	80085e2 <_malloc_r+0x26>
 80085d8:	230c      	movs	r3, #12
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	2000      	movs	r0, #0
 80085de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086b8 <_malloc_r+0xfc>
 80085e6:	f000 f869 	bl	80086bc <__malloc_lock>
 80085ea:	f8d8 3000 	ldr.w	r3, [r8]
 80085ee:	461c      	mov	r4, r3
 80085f0:	bb44      	cbnz	r4, 8008644 <_malloc_r+0x88>
 80085f2:	4629      	mov	r1, r5
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7ff ffbf 	bl	8008578 <sbrk_aligned>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	4604      	mov	r4, r0
 80085fe:	d158      	bne.n	80086b2 <_malloc_r+0xf6>
 8008600:	f8d8 4000 	ldr.w	r4, [r8]
 8008604:	4627      	mov	r7, r4
 8008606:	2f00      	cmp	r7, #0
 8008608:	d143      	bne.n	8008692 <_malloc_r+0xd6>
 800860a:	2c00      	cmp	r4, #0
 800860c:	d04b      	beq.n	80086a6 <_malloc_r+0xea>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	4639      	mov	r1, r7
 8008612:	4630      	mov	r0, r6
 8008614:	eb04 0903 	add.w	r9, r4, r3
 8008618:	f000 fc5e 	bl	8008ed8 <_sbrk_r>
 800861c:	4581      	cmp	r9, r0
 800861e:	d142      	bne.n	80086a6 <_malloc_r+0xea>
 8008620:	6821      	ldr	r1, [r4, #0]
 8008622:	4630      	mov	r0, r6
 8008624:	1a6d      	subs	r5, r5, r1
 8008626:	4629      	mov	r1, r5
 8008628:	f7ff ffa6 	bl	8008578 <sbrk_aligned>
 800862c:	3001      	adds	r0, #1
 800862e:	d03a      	beq.n	80086a6 <_malloc_r+0xea>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	442b      	add	r3, r5
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	f8d8 3000 	ldr.w	r3, [r8]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	bb62      	cbnz	r2, 8008698 <_malloc_r+0xdc>
 800863e:	f8c8 7000 	str.w	r7, [r8]
 8008642:	e00f      	b.n	8008664 <_malloc_r+0xa8>
 8008644:	6822      	ldr	r2, [r4, #0]
 8008646:	1b52      	subs	r2, r2, r5
 8008648:	d420      	bmi.n	800868c <_malloc_r+0xd0>
 800864a:	2a0b      	cmp	r2, #11
 800864c:	d917      	bls.n	800867e <_malloc_r+0xc2>
 800864e:	1961      	adds	r1, r4, r5
 8008650:	42a3      	cmp	r3, r4
 8008652:	6025      	str	r5, [r4, #0]
 8008654:	bf18      	it	ne
 8008656:	6059      	strne	r1, [r3, #4]
 8008658:	6863      	ldr	r3, [r4, #4]
 800865a:	bf08      	it	eq
 800865c:	f8c8 1000 	streq.w	r1, [r8]
 8008660:	5162      	str	r2, [r4, r5]
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	4630      	mov	r0, r6
 8008666:	f000 f82f 	bl	80086c8 <__malloc_unlock>
 800866a:	f104 000b 	add.w	r0, r4, #11
 800866e:	1d23      	adds	r3, r4, #4
 8008670:	f020 0007 	bic.w	r0, r0, #7
 8008674:	1ac2      	subs	r2, r0, r3
 8008676:	bf1c      	itt	ne
 8008678:	1a1b      	subne	r3, r3, r0
 800867a:	50a3      	strne	r3, [r4, r2]
 800867c:	e7af      	b.n	80085de <_malloc_r+0x22>
 800867e:	6862      	ldr	r2, [r4, #4]
 8008680:	42a3      	cmp	r3, r4
 8008682:	bf0c      	ite	eq
 8008684:	f8c8 2000 	streq.w	r2, [r8]
 8008688:	605a      	strne	r2, [r3, #4]
 800868a:	e7eb      	b.n	8008664 <_malloc_r+0xa8>
 800868c:	4623      	mov	r3, r4
 800868e:	6864      	ldr	r4, [r4, #4]
 8008690:	e7ae      	b.n	80085f0 <_malloc_r+0x34>
 8008692:	463c      	mov	r4, r7
 8008694:	687f      	ldr	r7, [r7, #4]
 8008696:	e7b6      	b.n	8008606 <_malloc_r+0x4a>
 8008698:	461a      	mov	r2, r3
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	42a3      	cmp	r3, r4
 800869e:	d1fb      	bne.n	8008698 <_malloc_r+0xdc>
 80086a0:	2300      	movs	r3, #0
 80086a2:	6053      	str	r3, [r2, #4]
 80086a4:	e7de      	b.n	8008664 <_malloc_r+0xa8>
 80086a6:	230c      	movs	r3, #12
 80086a8:	4630      	mov	r0, r6
 80086aa:	6033      	str	r3, [r6, #0]
 80086ac:	f000 f80c 	bl	80086c8 <__malloc_unlock>
 80086b0:	e794      	b.n	80085dc <_malloc_r+0x20>
 80086b2:	6005      	str	r5, [r0, #0]
 80086b4:	e7d6      	b.n	8008664 <_malloc_r+0xa8>
 80086b6:	bf00      	nop
 80086b8:	200002bc 	.word	0x200002bc

080086bc <__malloc_lock>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__malloc_lock+0x8>)
 80086be:	f7ff bf0e 	b.w	80084de <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	200002b4 	.word	0x200002b4

080086c8 <__malloc_unlock>:
 80086c8:	4801      	ldr	r0, [pc, #4]	@ (80086d0 <__malloc_unlock+0x8>)
 80086ca:	f7ff bf09 	b.w	80084e0 <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	200002b4 	.word	0x200002b4

080086d4 <__sfputc_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	b410      	push	{r4}
 80086dc:	6093      	str	r3, [r2, #8]
 80086de:	da08      	bge.n	80086f2 <__sfputc_r+0x1e>
 80086e0:	6994      	ldr	r4, [r2, #24]
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	db01      	blt.n	80086ea <__sfputc_r+0x16>
 80086e6:	290a      	cmp	r1, #10
 80086e8:	d103      	bne.n	80086f2 <__sfputc_r+0x1e>
 80086ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ee:	f7ff bde8 	b.w	80082c2 <__swbuf_r>
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	1c58      	adds	r0, r3, #1
 80086f6:	6010      	str	r0, [r2, #0]
 80086f8:	4608      	mov	r0, r1
 80086fa:	7019      	strb	r1, [r3, #0]
 80086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008700:	4770      	bx	lr

08008702 <__sfputs_r>:
 8008702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	4614      	mov	r4, r2
 800870a:	18d5      	adds	r5, r2, r3
 800870c:	42ac      	cmp	r4, r5
 800870e:	d101      	bne.n	8008714 <__sfputs_r+0x12>
 8008710:	2000      	movs	r0, #0
 8008712:	e007      	b.n	8008724 <__sfputs_r+0x22>
 8008714:	463a      	mov	r2, r7
 8008716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ffda 	bl	80086d4 <__sfputc_r>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d1f3      	bne.n	800870c <__sfputs_r+0xa>
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008728 <_vfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	460d      	mov	r5, r1
 800872e:	b09d      	sub	sp, #116	@ 0x74
 8008730:	4614      	mov	r4, r2
 8008732:	4698      	mov	r8, r3
 8008734:	4606      	mov	r6, r0
 8008736:	b118      	cbz	r0, 8008740 <_vfiprintf_r+0x18>
 8008738:	6a03      	ldr	r3, [r0, #32]
 800873a:	b90b      	cbnz	r3, 8008740 <_vfiprintf_r+0x18>
 800873c:	f7ff fcd8 	bl	80080f0 <__sinit>
 8008740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	d405      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 8008746:	89ab      	ldrh	r3, [r5, #12]
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d402      	bmi.n	8008752 <_vfiprintf_r+0x2a>
 800874c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800874e:	f7ff fec6 	bl	80084de <__retarget_lock_acquire_recursive>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	071b      	lsls	r3, r3, #28
 8008756:	d501      	bpl.n	800875c <_vfiprintf_r+0x34>
 8008758:	692b      	ldr	r3, [r5, #16]
 800875a:	b99b      	cbnz	r3, 8008784 <_vfiprintf_r+0x5c>
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff fdee 	bl	8008340 <__swsetup_r>
 8008764:	b170      	cbz	r0, 8008784 <_vfiprintf_r+0x5c>
 8008766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008768:	07dc      	lsls	r4, r3, #31
 800876a:	d504      	bpl.n	8008776 <_vfiprintf_r+0x4e>
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	b01d      	add	sp, #116	@ 0x74
 8008772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	0598      	lsls	r0, r3, #22
 800877a:	d4f7      	bmi.n	800876c <_vfiprintf_r+0x44>
 800877c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800877e:	f7ff feaf 	bl	80084e0 <__retarget_lock_release_recursive>
 8008782:	e7f3      	b.n	800876c <_vfiprintf_r+0x44>
 8008784:	2300      	movs	r3, #0
 8008786:	f8cd 800c 	str.w	r8, [sp, #12]
 800878a:	f04f 0901 	mov.w	r9, #1
 800878e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8008944 <_vfiprintf_r+0x21c>
 8008792:	9309      	str	r3, [sp, #36]	@ 0x24
 8008794:	2320      	movs	r3, #32
 8008796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800879a:	2330      	movs	r3, #48	@ 0x30
 800879c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087a0:	4623      	mov	r3, r4
 80087a2:	469a      	mov	sl, r3
 80087a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a8:	b10a      	cbz	r2, 80087ae <_vfiprintf_r+0x86>
 80087aa:	2a25      	cmp	r2, #37	@ 0x25
 80087ac:	d1f9      	bne.n	80087a2 <_vfiprintf_r+0x7a>
 80087ae:	ebba 0b04 	subs.w	fp, sl, r4
 80087b2:	d00b      	beq.n	80087cc <_vfiprintf_r+0xa4>
 80087b4:	465b      	mov	r3, fp
 80087b6:	4622      	mov	r2, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ffa1 	bl	8008702 <__sfputs_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	f000 80a7 	beq.w	8008914 <_vfiprintf_r+0x1ec>
 80087c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087c8:	445a      	add	r2, fp
 80087ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80087cc:	f89a 3000 	ldrb.w	r3, [sl]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 809f 	beq.w	8008914 <_vfiprintf_r+0x1ec>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295
 80087dc:	f10a 0a01 	add.w	sl, sl, #1
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	9307      	str	r3, [sp, #28]
 80087e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ee:	4654      	mov	r4, sl
 80087f0:	2205      	movs	r2, #5
 80087f2:	4854      	ldr	r0, [pc, #336]	@ (8008944 <_vfiprintf_r+0x21c>)
 80087f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f8:	f000 fb7e 	bl	8008ef8 <memchr>
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	b9d8      	cbnz	r0, 8008838 <_vfiprintf_r+0x110>
 8008800:	06d1      	lsls	r1, r2, #27
 8008802:	bf44      	itt	mi
 8008804:	2320      	movmi	r3, #32
 8008806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800880a:	0713      	lsls	r3, r2, #28
 800880c:	bf44      	itt	mi
 800880e:	232b      	movmi	r3, #43	@ 0x2b
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b2a      	cmp	r3, #42	@ 0x2a
 800881a:	d015      	beq.n	8008848 <_vfiprintf_r+0x120>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4621      	mov	r1, r4
 8008828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882c:	3b30      	subs	r3, #48	@ 0x30
 800882e:	2b09      	cmp	r3, #9
 8008830:	d94b      	bls.n	80088ca <_vfiprintf_r+0x1a2>
 8008832:	b1b0      	cbz	r0, 8008862 <_vfiprintf_r+0x13a>
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	e014      	b.n	8008862 <_vfiprintf_r+0x13a>
 8008838:	eba0 0308 	sub.w	r3, r0, r8
 800883c:	46a2      	mov	sl, r4
 800883e:	fa09 f303 	lsl.w	r3, r9, r3
 8008842:	4313      	orrs	r3, r2
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	e7d2      	b.n	80087ee <_vfiprintf_r+0xc6>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	9103      	str	r1, [sp, #12]
 8008852:	bfbb      	ittet	lt
 8008854:	425b      	neglt	r3, r3
 8008856:	f042 0202 	orrlt.w	r2, r2, #2
 800885a:	9307      	strge	r3, [sp, #28]
 800885c:	9307      	strlt	r3, [sp, #28]
 800885e:	bfb8      	it	lt
 8008860:	9204      	strlt	r2, [sp, #16]
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	2b2e      	cmp	r3, #46	@ 0x2e
 8008866:	d10a      	bne.n	800887e <_vfiprintf_r+0x156>
 8008868:	7863      	ldrb	r3, [r4, #1]
 800886a:	2b2a      	cmp	r3, #42	@ 0x2a
 800886c:	d132      	bne.n	80088d4 <_vfiprintf_r+0x1ac>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	3402      	adds	r4, #2
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800887a:	9203      	str	r2, [sp, #12]
 800887c:	9305      	str	r3, [sp, #20]
 800887e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008954 <_vfiprintf_r+0x22c>
 8008882:	2203      	movs	r2, #3
 8008884:	7821      	ldrb	r1, [r4, #0]
 8008886:	4650      	mov	r0, sl
 8008888:	f000 fb36 	bl	8008ef8 <memchr>
 800888c:	b138      	cbz	r0, 800889e <_vfiprintf_r+0x176>
 800888e:	eba0 000a 	sub.w	r0, r0, sl
 8008892:	2240      	movs	r2, #64	@ 0x40
 8008894:	9b04      	ldr	r3, [sp, #16]
 8008896:	3401      	adds	r4, #1
 8008898:	4082      	lsls	r2, r0
 800889a:	4313      	orrs	r3, r2
 800889c:	9304      	str	r3, [sp, #16]
 800889e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a2:	2206      	movs	r2, #6
 80088a4:	4828      	ldr	r0, [pc, #160]	@ (8008948 <_vfiprintf_r+0x220>)
 80088a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088aa:	f000 fb25 	bl	8008ef8 <memchr>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d03f      	beq.n	8008932 <_vfiprintf_r+0x20a>
 80088b2:	4b26      	ldr	r3, [pc, #152]	@ (800894c <_vfiprintf_r+0x224>)
 80088b4:	bb1b      	cbnz	r3, 80088fe <_vfiprintf_r+0x1d6>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	3307      	adds	r3, #7
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	3308      	adds	r3, #8
 80088c0:	9303      	str	r3, [sp, #12]
 80088c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c4:	443b      	add	r3, r7
 80088c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c8:	e76a      	b.n	80087a0 <_vfiprintf_r+0x78>
 80088ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ce:	460c      	mov	r4, r1
 80088d0:	2001      	movs	r0, #1
 80088d2:	e7a8      	b.n	8008826 <_vfiprintf_r+0xfe>
 80088d4:	2300      	movs	r3, #0
 80088d6:	3401      	adds	r4, #1
 80088d8:	f04f 0c0a 	mov.w	ip, #10
 80088dc:	4619      	mov	r1, r3
 80088de:	9305      	str	r3, [sp, #20]
 80088e0:	4620      	mov	r0, r4
 80088e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e6:	3a30      	subs	r2, #48	@ 0x30
 80088e8:	2a09      	cmp	r2, #9
 80088ea:	d903      	bls.n	80088f4 <_vfiprintf_r+0x1cc>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0c6      	beq.n	800887e <_vfiprintf_r+0x156>
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	e7c4      	b.n	800887e <_vfiprintf_r+0x156>
 80088f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f8:	4604      	mov	r4, r0
 80088fa:	2301      	movs	r3, #1
 80088fc:	e7f0      	b.n	80088e0 <_vfiprintf_r+0x1b8>
 80088fe:	ab03      	add	r3, sp, #12
 8008900:	462a      	mov	r2, r5
 8008902:	a904      	add	r1, sp, #16
 8008904:	4630      	mov	r0, r6
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <_vfiprintf_r+0x228>)
 800890a:	f3af 8000 	nop.w
 800890e:	4607      	mov	r7, r0
 8008910:	1c78      	adds	r0, r7, #1
 8008912:	d1d6      	bne.n	80088c2 <_vfiprintf_r+0x19a>
 8008914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008916:	07d9      	lsls	r1, r3, #31
 8008918:	d405      	bmi.n	8008926 <_vfiprintf_r+0x1fe>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	059a      	lsls	r2, r3, #22
 800891e:	d402      	bmi.n	8008926 <_vfiprintf_r+0x1fe>
 8008920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008922:	f7ff fddd 	bl	80084e0 <__retarget_lock_release_recursive>
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	065b      	lsls	r3, r3, #25
 800892a:	f53f af1f 	bmi.w	800876c <_vfiprintf_r+0x44>
 800892e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008930:	e71e      	b.n	8008770 <_vfiprintf_r+0x48>
 8008932:	ab03      	add	r3, sp, #12
 8008934:	462a      	mov	r2, r5
 8008936:	a904      	add	r1, sp, #16
 8008938:	4630      	mov	r0, r6
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4b04      	ldr	r3, [pc, #16]	@ (8008950 <_vfiprintf_r+0x228>)
 800893e:	f000 f87d 	bl	8008a3c <_printf_i>
 8008942:	e7e4      	b.n	800890e <_vfiprintf_r+0x1e6>
 8008944:	08009024 	.word	0x08009024
 8008948:	0800902e 	.word	0x0800902e
 800894c:	00000000 	.word	0x00000000
 8008950:	08008703 	.word	0x08008703
 8008954:	0800902a 	.word	0x0800902a

08008958 <_printf_common>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	4616      	mov	r6, r2
 800895e:	4698      	mov	r8, r3
 8008960:	688a      	ldr	r2, [r1, #8]
 8008962:	4607      	mov	r7, r0
 8008964:	690b      	ldr	r3, [r1, #16]
 8008966:	460c      	mov	r4, r1
 8008968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800896c:	4293      	cmp	r3, r2
 800896e:	bfb8      	it	lt
 8008970:	4613      	movlt	r3, r2
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008978:	b10a      	cbz	r2, 800897e <_printf_common+0x26>
 800897a:	3301      	adds	r3, #1
 800897c:	6033      	str	r3, [r6, #0]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0699      	lsls	r1, r3, #26
 8008982:	bf42      	ittt	mi
 8008984:	6833      	ldrmi	r3, [r6, #0]
 8008986:	3302      	addmi	r3, #2
 8008988:	6033      	strmi	r3, [r6, #0]
 800898a:	6825      	ldr	r5, [r4, #0]
 800898c:	f015 0506 	ands.w	r5, r5, #6
 8008990:	d106      	bne.n	80089a0 <_printf_common+0x48>
 8008992:	f104 0a19 	add.w	sl, r4, #25
 8008996:	68e3      	ldr	r3, [r4, #12]
 8008998:	6832      	ldr	r2, [r6, #0]
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	42ab      	cmp	r3, r5
 800899e:	dc2b      	bgt.n	80089f8 <_printf_common+0xa0>
 80089a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089a4:	6822      	ldr	r2, [r4, #0]
 80089a6:	3b00      	subs	r3, #0
 80089a8:	bf18      	it	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	0692      	lsls	r2, r2, #26
 80089ae:	d430      	bmi.n	8008a12 <_printf_common+0xba>
 80089b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089b4:	4641      	mov	r1, r8
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c8      	blx	r9
 80089ba:	3001      	adds	r0, #1
 80089bc:	d023      	beq.n	8008a06 <_printf_common+0xae>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	341a      	adds	r4, #26
 80089c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80089c6:	f003 0306 	and.w	r3, r3, #6
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	bf0a      	itet	eq
 80089ce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80089d2:	2500      	movne	r5, #0
 80089d4:	6833      	ldreq	r3, [r6, #0]
 80089d6:	f04f 0600 	mov.w	r6, #0
 80089da:	bf08      	it	eq
 80089dc:	1aed      	subeq	r5, r5, r3
 80089de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80089e2:	bf08      	it	eq
 80089e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e8:	4293      	cmp	r3, r2
 80089ea:	bfc4      	itt	gt
 80089ec:	1a9b      	subgt	r3, r3, r2
 80089ee:	18ed      	addgt	r5, r5, r3
 80089f0:	42b5      	cmp	r5, r6
 80089f2:	d11a      	bne.n	8008a2a <_printf_common+0xd2>
 80089f4:	2000      	movs	r0, #0
 80089f6:	e008      	b.n	8008a0a <_printf_common+0xb2>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4652      	mov	r2, sl
 80089fc:	4641      	mov	r1, r8
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c8      	blx	r9
 8008a02:	3001      	adds	r0, #1
 8008a04:	d103      	bne.n	8008a0e <_printf_common+0xb6>
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	3501      	adds	r5, #1
 8008a10:	e7c1      	b.n	8008996 <_printf_common+0x3e>
 8008a12:	18e1      	adds	r1, r4, r3
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	2030      	movs	r0, #48	@ 0x30
 8008a18:	3302      	adds	r3, #2
 8008a1a:	4422      	add	r2, r4
 8008a1c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a28:	e7c2      	b.n	80089b0 <_printf_common+0x58>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4638      	mov	r0, r7
 8008a32:	47c8      	blx	r9
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0e6      	beq.n	8008a06 <_printf_common+0xae>
 8008a38:	3601      	adds	r6, #1
 8008a3a:	e7d9      	b.n	80089f0 <_printf_common+0x98>

08008a3c <_printf_i>:
 8008a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	7e0f      	ldrb	r7, [r1, #24]
 8008a42:	4691      	mov	r9, r2
 8008a44:	4680      	mov	r8, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	2f78      	cmp	r7, #120	@ 0x78
 8008a4a:	469a      	mov	sl, r3
 8008a4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a52:	d807      	bhi.n	8008a64 <_printf_i+0x28>
 8008a54:	2f62      	cmp	r7, #98	@ 0x62
 8008a56:	d80a      	bhi.n	8008a6e <_printf_i+0x32>
 8008a58:	2f00      	cmp	r7, #0
 8008a5a:	f000 80d1 	beq.w	8008c00 <_printf_i+0x1c4>
 8008a5e:	2f58      	cmp	r7, #88	@ 0x58
 8008a60:	f000 80b8 	beq.w	8008bd4 <_printf_i+0x198>
 8008a64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a6c:	e03a      	b.n	8008ae4 <_printf_i+0xa8>
 8008a6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a72:	2b15      	cmp	r3, #21
 8008a74:	d8f6      	bhi.n	8008a64 <_printf_i+0x28>
 8008a76:	a101      	add	r1, pc, #4	@ (adr r1, 8008a7c <_printf_i+0x40>)
 8008a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a7c:	08008ad5 	.word	0x08008ad5
 8008a80:	08008ae9 	.word	0x08008ae9
 8008a84:	08008a65 	.word	0x08008a65
 8008a88:	08008a65 	.word	0x08008a65
 8008a8c:	08008a65 	.word	0x08008a65
 8008a90:	08008a65 	.word	0x08008a65
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008a65 	.word	0x08008a65
 8008a9c:	08008a65 	.word	0x08008a65
 8008aa0:	08008a65 	.word	0x08008a65
 8008aa4:	08008a65 	.word	0x08008a65
 8008aa8:	08008be7 	.word	0x08008be7
 8008aac:	08008b13 	.word	0x08008b13
 8008ab0:	08008ba1 	.word	0x08008ba1
 8008ab4:	08008a65 	.word	0x08008a65
 8008ab8:	08008a65 	.word	0x08008a65
 8008abc:	08008c09 	.word	0x08008c09
 8008ac0:	08008a65 	.word	0x08008a65
 8008ac4:	08008b13 	.word	0x08008b13
 8008ac8:	08008a65 	.word	0x08008a65
 8008acc:	08008a65 	.word	0x08008a65
 8008ad0:	08008ba9 	.word	0x08008ba9
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6032      	str	r2, [r6, #0]
 8008adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e09c      	b.n	8008c22 <_printf_i+0x1e6>
 8008ae8:	6833      	ldr	r3, [r6, #0]
 8008aea:	6820      	ldr	r0, [r4, #0]
 8008aec:	1d19      	adds	r1, r3, #4
 8008aee:	6031      	str	r1, [r6, #0]
 8008af0:	0606      	lsls	r6, r0, #24
 8008af2:	d501      	bpl.n	8008af8 <_printf_i+0xbc>
 8008af4:	681d      	ldr	r5, [r3, #0]
 8008af6:	e003      	b.n	8008b00 <_printf_i+0xc4>
 8008af8:	0645      	lsls	r5, r0, #25
 8008afa:	d5fb      	bpl.n	8008af4 <_printf_i+0xb8>
 8008afc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b00:	2d00      	cmp	r5, #0
 8008b02:	da03      	bge.n	8008b0c <_printf_i+0xd0>
 8008b04:	232d      	movs	r3, #45	@ 0x2d
 8008b06:	426d      	negs	r5, r5
 8008b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b0c:	4858      	ldr	r0, [pc, #352]	@ (8008c70 <_printf_i+0x234>)
 8008b0e:	230a      	movs	r3, #10
 8008b10:	e011      	b.n	8008b36 <_printf_i+0xfa>
 8008b12:	6821      	ldr	r1, [r4, #0]
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	0608      	lsls	r0, r1, #24
 8008b18:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b1c:	d402      	bmi.n	8008b24 <_printf_i+0xe8>
 8008b1e:	0649      	lsls	r1, r1, #25
 8008b20:	bf48      	it	mi
 8008b22:	b2ad      	uxthmi	r5, r5
 8008b24:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b26:	6033      	str	r3, [r6, #0]
 8008b28:	4851      	ldr	r0, [pc, #324]	@ (8008c70 <_printf_i+0x234>)
 8008b2a:	bf14      	ite	ne
 8008b2c:	230a      	movne	r3, #10
 8008b2e:	2308      	moveq	r3, #8
 8008b30:	2100      	movs	r1, #0
 8008b32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b36:	6866      	ldr	r6, [r4, #4]
 8008b38:	2e00      	cmp	r6, #0
 8008b3a:	60a6      	str	r6, [r4, #8]
 8008b3c:	db05      	blt.n	8008b4a <_printf_i+0x10e>
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	432e      	orrs	r6, r5
 8008b42:	f021 0104 	bic.w	r1, r1, #4
 8008b46:	6021      	str	r1, [r4, #0]
 8008b48:	d04b      	beq.n	8008be2 <_printf_i+0x1a6>
 8008b4a:	4616      	mov	r6, r2
 8008b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b50:	fb03 5711 	mls	r7, r3, r1, r5
 8008b54:	5dc7      	ldrb	r7, [r0, r7]
 8008b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b5a:	462f      	mov	r7, r5
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	42bb      	cmp	r3, r7
 8008b60:	d9f4      	bls.n	8008b4c <_printf_i+0x110>
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d10b      	bne.n	8008b7e <_printf_i+0x142>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	07df      	lsls	r7, r3, #31
 8008b6a:	d508      	bpl.n	8008b7e <_printf_i+0x142>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	6861      	ldr	r1, [r4, #4]
 8008b70:	4299      	cmp	r1, r3
 8008b72:	bfde      	ittt	le
 8008b74:	2330      	movle	r3, #48	@ 0x30
 8008b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b7e:	1b92      	subs	r2, r2, r6
 8008b80:	6122      	str	r2, [r4, #16]
 8008b82:	464b      	mov	r3, r9
 8008b84:	aa03      	add	r2, sp, #12
 8008b86:	4621      	mov	r1, r4
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f8cd a000 	str.w	sl, [sp]
 8008b8e:	f7ff fee3 	bl	8008958 <_printf_common>
 8008b92:	3001      	adds	r0, #1
 8008b94:	d14a      	bne.n	8008c2c <_printf_i+0x1f0>
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	b004      	add	sp, #16
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	f043 0320 	orr.w	r3, r3, #32
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	2778      	movs	r7, #120	@ 0x78
 8008baa:	4832      	ldr	r0, [pc, #200]	@ (8008c74 <_printf_i+0x238>)
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bb2:	061f      	lsls	r7, r3, #24
 8008bb4:	6831      	ldr	r1, [r6, #0]
 8008bb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bba:	d402      	bmi.n	8008bc2 <_printf_i+0x186>
 8008bbc:	065f      	lsls	r7, r3, #25
 8008bbe:	bf48      	it	mi
 8008bc0:	b2ad      	uxthmi	r5, r5
 8008bc2:	6031      	str	r1, [r6, #0]
 8008bc4:	07d9      	lsls	r1, r3, #31
 8008bc6:	bf44      	itt	mi
 8008bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bcc:	6023      	strmi	r3, [r4, #0]
 8008bce:	b11d      	cbz	r5, 8008bd8 <_printf_i+0x19c>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	e7ad      	b.n	8008b30 <_printf_i+0xf4>
 8008bd4:	4826      	ldr	r0, [pc, #152]	@ (8008c70 <_printf_i+0x234>)
 8008bd6:	e7e9      	b.n	8008bac <_printf_i+0x170>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	f023 0320 	bic.w	r3, r3, #32
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	e7f6      	b.n	8008bd0 <_printf_i+0x194>
 8008be2:	4616      	mov	r6, r2
 8008be4:	e7bd      	b.n	8008b62 <_printf_i+0x126>
 8008be6:	6833      	ldr	r3, [r6, #0]
 8008be8:	6825      	ldr	r5, [r4, #0]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6961      	ldr	r1, [r4, #20]
 8008bee:	6030      	str	r0, [r6, #0]
 8008bf0:	062e      	lsls	r6, r5, #24
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	d501      	bpl.n	8008bfa <_printf_i+0x1be>
 8008bf6:	6019      	str	r1, [r3, #0]
 8008bf8:	e002      	b.n	8008c00 <_printf_i+0x1c4>
 8008bfa:	0668      	lsls	r0, r5, #25
 8008bfc:	d5fb      	bpl.n	8008bf6 <_printf_i+0x1ba>
 8008bfe:	8019      	strh	r1, [r3, #0]
 8008c00:	2300      	movs	r3, #0
 8008c02:	4616      	mov	r6, r2
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	e7bc      	b.n	8008b82 <_printf_i+0x146>
 8008c08:	6833      	ldr	r3, [r6, #0]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	1d1a      	adds	r2, r3, #4
 8008c0e:	6032      	str	r2, [r6, #0]
 8008c10:	681e      	ldr	r6, [r3, #0]
 8008c12:	6862      	ldr	r2, [r4, #4]
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f96f 	bl	8008ef8 <memchr>
 8008c1a:	b108      	cbz	r0, 8008c20 <_printf_i+0x1e4>
 8008c1c:	1b80      	subs	r0, r0, r6
 8008c1e:	6060      	str	r0, [r4, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	2300      	movs	r3, #0
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2a:	e7aa      	b.n	8008b82 <_printf_i+0x146>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	4632      	mov	r2, r6
 8008c30:	4649      	mov	r1, r9
 8008c32:	4640      	mov	r0, r8
 8008c34:	47d0      	blx	sl
 8008c36:	3001      	adds	r0, #1
 8008c38:	d0ad      	beq.n	8008b96 <_printf_i+0x15a>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	079b      	lsls	r3, r3, #30
 8008c3e:	d413      	bmi.n	8008c68 <_printf_i+0x22c>
 8008c40:	68e0      	ldr	r0, [r4, #12]
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	4298      	cmp	r0, r3
 8008c46:	bfb8      	it	lt
 8008c48:	4618      	movlt	r0, r3
 8008c4a:	e7a6      	b.n	8008b9a <_printf_i+0x15e>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4632      	mov	r2, r6
 8008c50:	4649      	mov	r1, r9
 8008c52:	4640      	mov	r0, r8
 8008c54:	47d0      	blx	sl
 8008c56:	3001      	adds	r0, #1
 8008c58:	d09d      	beq.n	8008b96 <_printf_i+0x15a>
 8008c5a:	3501      	adds	r5, #1
 8008c5c:	68e3      	ldr	r3, [r4, #12]
 8008c5e:	9903      	ldr	r1, [sp, #12]
 8008c60:	1a5b      	subs	r3, r3, r1
 8008c62:	42ab      	cmp	r3, r5
 8008c64:	dcf2      	bgt.n	8008c4c <_printf_i+0x210>
 8008c66:	e7eb      	b.n	8008c40 <_printf_i+0x204>
 8008c68:	2500      	movs	r5, #0
 8008c6a:	f104 0619 	add.w	r6, r4, #25
 8008c6e:	e7f5      	b.n	8008c5c <_printf_i+0x220>
 8008c70:	08009035 	.word	0x08009035
 8008c74:	08009046 	.word	0x08009046

08008c78 <__sflush_r>:
 8008c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	0716      	lsls	r6, r2, #28
 8008c82:	4605      	mov	r5, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d454      	bmi.n	8008d32 <__sflush_r+0xba>
 8008c88:	684b      	ldr	r3, [r1, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	dc02      	bgt.n	8008c94 <__sflush_r+0x1c>
 8008c8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dd48      	ble.n	8008d26 <__sflush_r+0xae>
 8008c94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c96:	2e00      	cmp	r6, #0
 8008c98:	d045      	beq.n	8008d26 <__sflush_r+0xae>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ca0:	682f      	ldr	r7, [r5, #0]
 8008ca2:	6a21      	ldr	r1, [r4, #32]
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	d030      	beq.n	8008d0a <__sflush_r+0x92>
 8008ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	0759      	lsls	r1, r3, #29
 8008cae:	d505      	bpl.n	8008cbc <__sflush_r+0x44>
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cb6:	b10b      	cbz	r3, 8008cbc <__sflush_r+0x44>
 8008cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cc0:	6a21      	ldr	r1, [r4, #32]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b0      	blx	r6
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	d106      	bne.n	8008cda <__sflush_r+0x62>
 8008ccc:	6829      	ldr	r1, [r5, #0]
 8008cce:	291d      	cmp	r1, #29
 8008cd0:	d82b      	bhi.n	8008d2a <__sflush_r+0xb2>
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d7c <__sflush_r+0x104>)
 8008cd4:	40ca      	lsrs	r2, r1
 8008cd6:	07d6      	lsls	r6, r2, #31
 8008cd8:	d527      	bpl.n	8008d2a <__sflush_r+0xb2>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	04d9      	lsls	r1, r3, #19
 8008cde:	6062      	str	r2, [r4, #4]
 8008ce0:	6922      	ldr	r2, [r4, #16]
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	d504      	bpl.n	8008cf0 <__sflush_r+0x78>
 8008ce6:	1c42      	adds	r2, r0, #1
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0x76>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	b903      	cbnz	r3, 8008cf0 <__sflush_r+0x78>
 8008cee:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cf2:	602f      	str	r7, [r5, #0]
 8008cf4:	b1b9      	cbz	r1, 8008d26 <__sflush_r+0xae>
 8008cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d002      	beq.n	8008d04 <__sflush_r+0x8c>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7ff fbf0 	bl	80084e4 <_free_r>
 8008d04:	2300      	movs	r3, #0
 8008d06:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d08:	e00d      	b.n	8008d26 <__sflush_r+0xae>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	4602      	mov	r2, r0
 8008d12:	1c50      	adds	r0, r2, #1
 8008d14:	d1c9      	bne.n	8008caa <__sflush_r+0x32>
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c6      	beq.n	8008caa <__sflush_r+0x32>
 8008d1c:	2b1d      	cmp	r3, #29
 8008d1e:	d001      	beq.n	8008d24 <__sflush_r+0xac>
 8008d20:	2b16      	cmp	r3, #22
 8008d22:	d11d      	bne.n	8008d60 <__sflush_r+0xe8>
 8008d24:	602f      	str	r7, [r5, #0]
 8008d26:	2000      	movs	r0, #0
 8008d28:	e021      	b.n	8008d6e <__sflush_r+0xf6>
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2e:	b21b      	sxth	r3, r3
 8008d30:	e01a      	b.n	8008d68 <__sflush_r+0xf0>
 8008d32:	690f      	ldr	r7, [r1, #16]
 8008d34:	2f00      	cmp	r7, #0
 8008d36:	d0f6      	beq.n	8008d26 <__sflush_r+0xae>
 8008d38:	0793      	lsls	r3, r2, #30
 8008d3a:	680e      	ldr	r6, [r1, #0]
 8008d3c:	600f      	str	r7, [r1, #0]
 8008d3e:	bf0c      	ite	eq
 8008d40:	694b      	ldreq	r3, [r1, #20]
 8008d42:	2300      	movne	r3, #0
 8008d44:	eba6 0807 	sub.w	r8, r6, r7
 8008d48:	608b      	str	r3, [r1, #8]
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	ddea      	ble.n	8008d26 <__sflush_r+0xae>
 8008d50:	4643      	mov	r3, r8
 8008d52:	463a      	mov	r2, r7
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	4628      	mov	r0, r5
 8008d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d5a:	47b0      	blx	r6
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	dc08      	bgt.n	8008d72 <__sflush_r+0xfa>
 8008d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d72:	4407      	add	r7, r0
 8008d74:	eba8 0800 	sub.w	r8, r8, r0
 8008d78:	e7e7      	b.n	8008d4a <__sflush_r+0xd2>
 8008d7a:	bf00      	nop
 8008d7c:	20400001 	.word	0x20400001

08008d80 <_fflush_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b913      	cbnz	r3, 8008d90 <_fflush_r+0x10>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	b118      	cbz	r0, 8008d9a <_fflush_r+0x1a>
 8008d92:	6a03      	ldr	r3, [r0, #32]
 8008d94:	b90b      	cbnz	r3, 8008d9a <_fflush_r+0x1a>
 8008d96:	f7ff f9ab 	bl	80080f0 <__sinit>
 8008d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f3      	beq.n	8008d8a <_fflush_r+0xa>
 8008da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008da4:	07d0      	lsls	r0, r2, #31
 8008da6:	d404      	bmi.n	8008db2 <_fflush_r+0x32>
 8008da8:	0599      	lsls	r1, r3, #22
 8008daa:	d402      	bmi.n	8008db2 <_fflush_r+0x32>
 8008dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dae:	f7ff fb96 	bl	80084de <__retarget_lock_acquire_recursive>
 8008db2:	4628      	mov	r0, r5
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7ff ff5f 	bl	8008c78 <__sflush_r>
 8008dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d4e4      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	059b      	lsls	r3, r3, #22
 8008dc6:	d4e1      	bmi.n	8008d8c <_fflush_r+0xc>
 8008dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dca:	f7ff fb89 	bl	80084e0 <__retarget_lock_release_recursive>
 8008dce:	e7dd      	b.n	8008d8c <_fflush_r+0xc>

08008dd0 <__swhatbuf_r>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd8:	b096      	sub	sp, #88	@ 0x58
 8008dda:	4615      	mov	r5, r2
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	461e      	mov	r6, r3
 8008de0:	da0c      	bge.n	8008dfc <__swhatbuf_r+0x2c>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	2100      	movs	r1, #0
 8008de6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dea:	bf14      	ite	ne
 8008dec:	2340      	movne	r3, #64	@ 0x40
 8008dee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008df2:	2000      	movs	r0, #0
 8008df4:	6031      	str	r1, [r6, #0]
 8008df6:	602b      	str	r3, [r5, #0]
 8008df8:	b016      	add	sp, #88	@ 0x58
 8008dfa:	bd70      	pop	{r4, r5, r6, pc}
 8008dfc:	466a      	mov	r2, sp
 8008dfe:	f000 f849 	bl	8008e94 <_fstat_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	dbed      	blt.n	8008de2 <__swhatbuf_r+0x12>
 8008e06:	9901      	ldr	r1, [sp, #4]
 8008e08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e10:	4259      	negs	r1, r3
 8008e12:	4159      	adcs	r1, r3
 8008e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e18:	e7eb      	b.n	8008df2 <__swhatbuf_r+0x22>

08008e1a <__smakebuf_r>:
 8008e1a:	898b      	ldrh	r3, [r1, #12]
 8008e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e1e:	079d      	lsls	r5, r3, #30
 8008e20:	4606      	mov	r6, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	d507      	bpl.n	8008e36 <__smakebuf_r+0x1c>
 8008e26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	2301      	movs	r3, #1
 8008e30:	6163      	str	r3, [r4, #20]
 8008e32:	b003      	add	sp, #12
 8008e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e36:	ab01      	add	r3, sp, #4
 8008e38:	466a      	mov	r2, sp
 8008e3a:	f7ff ffc9 	bl	8008dd0 <__swhatbuf_r>
 8008e3e:	9f00      	ldr	r7, [sp, #0]
 8008e40:	4605      	mov	r5, r0
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7ff fbb9 	bl	80085bc <_malloc_r>
 8008e4a:	b948      	cbnz	r0, 8008e60 <__smakebuf_r+0x46>
 8008e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d4ee      	bmi.n	8008e32 <__smakebuf_r+0x18>
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	e7e2      	b.n	8008e26 <__smakebuf_r+0xc>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	6020      	str	r0, [r4, #0]
 8008e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	9b01      	ldr	r3, [sp, #4]
 8008e6c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e70:	b15b      	cbz	r3, 8008e8a <__smakebuf_r+0x70>
 8008e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e76:	4630      	mov	r0, r6
 8008e78:	f000 f81e 	bl	8008eb8 <_isatty_r>
 8008e7c:	b128      	cbz	r0, 8008e8a <__smakebuf_r+0x70>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f023 0303 	bic.w	r3, r3, #3
 8008e84:	f043 0301 	orr.w	r3, r3, #1
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	431d      	orrs	r5, r3
 8008e8e:	81a5      	strh	r5, [r4, #12]
 8008e90:	e7cf      	b.n	8008e32 <__smakebuf_r+0x18>
	...

08008e94 <_fstat_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	2300      	movs	r3, #0
 8008e98:	4d06      	ldr	r5, [pc, #24]	@ (8008eb4 <_fstat_r+0x20>)
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f7 ffda 	bl	8000e5a <_fstat>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_fstat_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_fstat_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200002b0 	.word	0x200002b0

08008eb8 <_isatty_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4d05      	ldr	r5, [pc, #20]	@ (8008ed4 <_isatty_r+0x1c>)
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	f7f7 ffd9 	bl	8000e7a <_isatty>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_isatty_r+0x1a>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_isatty_r+0x1a>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	200002b0 	.word	0x200002b0

08008ed8 <_sbrk_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	2300      	movs	r3, #0
 8008edc:	4d05      	ldr	r5, [pc, #20]	@ (8008ef4 <_sbrk_r+0x1c>)
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	602b      	str	r3, [r5, #0]
 8008ee4:	f7f7 ffe2 	bl	8000eac <_sbrk>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	d102      	bne.n	8008ef2 <_sbrk_r+0x1a>
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	b103      	cbz	r3, 8008ef2 <_sbrk_r+0x1a>
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}
 8008ef4:	200002b0 	.word	0x200002b0

08008ef8 <memchr>:
 8008ef8:	b2c9      	uxtb	r1, r1
 8008efa:	4603      	mov	r3, r0
 8008efc:	4402      	add	r2, r0
 8008efe:	b510      	push	{r4, lr}
 8008f00:	4293      	cmp	r3, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	d101      	bne.n	8008f0a <memchr+0x12>
 8008f06:	2000      	movs	r0, #0
 8008f08:	e003      	b.n	8008f12 <memchr+0x1a>
 8008f0a:	7804      	ldrb	r4, [r0, #0]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	428c      	cmp	r4, r1
 8008f10:	d1f6      	bne.n	8008f00 <memchr+0x8>
 8008f12:	bd10      	pop	{r4, pc}

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr
